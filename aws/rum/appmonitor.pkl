/// AWS::RUM::AppMonitor
///
/// Generated by rain build --pkl-class AWS::RUM::AppMonitor
module aws.rum.appmonitor

import "../../cloudformation.pkl"

/// AppMonitor configuration
open class AppMonitorAppMonitorConfiguration {
    AllowCookies: (Boolean|Mapping)?
    EnableXRay: (Boolean|Mapping)?
    ExcludedPages: (AppMonitorPages)?
    FavoritePages: (AppMonitorFavoritePages)?
    GuestRoleArn: (AppMonitorArn)?
    IdentityPoolId: (String(matches(Regex(#"[\w-]+:[0-9a-f-]+"#)))|Mapping)?
    IncludedPages: (AppMonitorPages)?
    MetricDestinations: (Listing<AppMonitorMetricDestination>)?
    SessionSampleRate: (Number|Mapping)?
    Telemetries: (Listing<AppMonitorTelemetry>)?
}

typealias AppMonitorArn = String|Mapping


/// AppMonitor custom events configuration
open class AppMonitorCustomEvents {
    Status: (AppMonitorCustomEventsStatus)?
}

typealias AppMonitorCustomEventsStatus = String|Mapping


typealias AppMonitorFavoritePages = Listing<(String|Mapping)?>


typealias AppMonitorMetricDefinitionDimensionKeys = Mapping<String, Any>

/// A single metric definition
open class AppMonitorMetricDefinition {
    DimensionKeys: (AppMonitorMetricDefinitionDimensionKeys)?
    EventPattern: (String|Mapping)?
    Name: String|Mapping
    Namespace: (String(matches(Regex(#"[a-zA-Z0-9-._/#:]+$"#)))|Mapping)?
    UnitLabel: (String|Mapping)?
    ValueKey: (String(matches(Regex(#".*"#)))|Mapping)?
}

typealias MetricDestinationDestination = "CloudWatch"|"Evidently"

/// An structure which defines the destination and the metrics that you want to send.
open class AppMonitorMetricDestination {
    Destination: MetricDestinationDestination|Mapping
    DestinationArn: (String(matches(Regex(#"arn:[^:]*:[^:]*:[^:]*:[^:]*:.*"#)))|Mapping)?
    IamRoleArn: (String(matches(Regex(#"arn:[^:]*:[^:]*:[^:]*:[^:]*:.*"#)))|Mapping)?
    MetricDefinitions: (Listing<AppMonitorMetricDefinition>)?
}

typealias AppMonitorPages = Listing<(AppMonitorUrl)?>


/// A key-value pair to associate with a resource.
open class AppMonitorTag {
    Key: String(matches(Regex(#"^(?!aws:)[a-zA-Z+-=._:/]+$"#)))|Mapping
    Value: String|Mapping
}

typealias AppMonitorTagDef = Listing<(AppMonitorTag)?>


typealias AppMonitorTelemetry = String|Mapping


typealias AppMonitorUrl = String|Mapping


/// Resource Type definition for AWS::RUM::AppMonitor
open class AppMonitor extends cloudformation.Resource {

    Type = "AWS::RUM::AppMonitor"


    /// 
    hidden AppMonitorConfiguration: (AppMonitorAppMonitorConfiguration)?

    /// 
    hidden CustomEvents: (AppMonitorCustomEvents)?

    /// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
    hidden CwLogEnabled: (Boolean|Mapping)?

    /// The top-level internet domain name for which your application has administrative authority.
    hidden Domain: String(matches(Regex(#"^(localhost)|^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?![-.])([A-Za-z0-9-\.\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))|^(\*\.)(?![-.])([A-Za-z0-9-\.\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))"#)))|Mapping

    /// A name for the app monitor
    hidden Name: String(matches(Regex(#"[\.\-_/#A-Za-z0-9]+"#)))|Mapping

    /// 
    hidden Tags: (AppMonitorTagDef)?

    Properties {
        ["AppMonitorConfiguration"] = if (AppMonitorConfiguration == null) null else AppMonitorConfiguration
        ["CustomEvents"] = if (CustomEvents == null) null else CustomEvents
        ["CwLogEnabled"] = if (CwLogEnabled == null) null else CwLogEnabled
        ["Domain"] = if (Domain == null) null else Domain
        ["Name"] = if (Name == null) null else Name
        ["Tags"] = if (Tags == null) null else Tags
    }

}
