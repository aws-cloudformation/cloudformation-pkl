/// AWS::MWAA::Environment
///
/// Generated by rain build --pkl-class AWS::MWAA::Environment
module aws.mwaa.environment

import "../../cloudformation.pkl"

typealias EnvironmentAirflowArn = String|Mapping


typealias EnvironmentAirflowVersion = String|Mapping


typealias EnvironmentCeleryExecutorQueue = String|Mapping


typealias EnvironmentCloudWatchLogGroupArn = String|Mapping


typealias EnvironmentConfigKey = String|Mapping


typealias EnvironmentConfigValue = String|Mapping


typealias EnvironmentCreatedAt = String|Mapping


typealias EnvironmentDatabaseVpcEndpointService = String|Mapping


typealias EnvironmentEndpointManagement = String|Mapping


typealias EnvironmentEnvironmentArn = String|Mapping


typealias EnvironmentEnvironmentClass = String|Mapping


typealias EnvironmentEnvironmentName = String|Mapping


typealias EnvironmentEnvironmentStatus = String|Mapping


typealias EnvironmentErrorCode = String|Mapping


typealias EnvironmentErrorMessage = String|Mapping


typealias EnvironmentExecutionRoleArn = String|Mapping


typealias EnvironmentKmsKey = String|Mapping


/// Details about the last update performed on the environment.
open class EnvironmentLastUpdate {
    CreatedAt: (EnvironmentUpdateCreatedAt)?
    Error: (EnvironmentUpdateError)?
    Status: (EnvironmentUpdateStatus)?
}

/// Logging configuration for the environment.
open class EnvironmentLoggingConfiguration {
    DagProcessingLogs: (EnvironmentModuleLoggingConfiguration)?
    SchedulerLogs: (EnvironmentModuleLoggingConfiguration)?
    TaskLogs: (EnvironmentModuleLoggingConfiguration)?
    WebserverLogs: (EnvironmentModuleLoggingConfiguration)?
    WorkerLogs: (EnvironmentModuleLoggingConfiguration)?
}

/// Configures logging for the environment.
open class EnvironmentLoggingConfigurationInput {
    DagProcessingLogs: (EnvironmentModuleLoggingConfigurationInput)?
    SchedulerLogs: (EnvironmentModuleLoggingConfigurationInput)?
    TaskLogs: (EnvironmentModuleLoggingConfigurationInput)?
    WebserverLogs: (EnvironmentModuleLoggingConfigurationInput)?
    WorkerLogs: (EnvironmentModuleLoggingConfigurationInput)?
}

typealias EnvironmentLoggingEnabled = Boolean|Mapping


typealias EnvironmentLoggingLevel = String|Mapping


typealias EnvironmentMaxWorkers = Int|Mapping


typealias EnvironmentMinWorkers = Int|Mapping


/// Logging configuration for a specific airflow component.
open class EnvironmentModuleLoggingConfiguration {
    CloudWatchLogGroupArn: (EnvironmentCloudWatchLogGroupArn)?
    Enabled: (EnvironmentLoggingEnabled)?
    LogLevel: (EnvironmentLoggingLevel)?
}

/// Configures airflow component logging for the environment.
open class EnvironmentModuleLoggingConfigurationInput {
    Enabled: (EnvironmentLoggingEnabled)?
    LogLevel: (EnvironmentLoggingLevel)?
}

/// Configures the network resources of the environment.
open class EnvironmentNetworkConfiguration {
    SecurityGroupIds: (Listing<EnvironmentSecurityGroupId>)?
    SubnetIds: (Listing<EnvironmentSubnetId>)?
}

typealias EnvironmentRelativePath = String|Mapping


typealias EnvironmentS3BucketArn = String|Mapping


typealias EnvironmentS3ObjectVersion = String|Mapping


typealias EnvironmentSchedulers = Int|Mapping


typealias EnvironmentSecurityGroupId = String|Mapping


typealias EnvironmentServiceRoleArn = String|Mapping


typealias EnvironmentSubnetId = String|Mapping


typealias EnvironmentUpdateCreatedAt = String|Mapping


/// The error associated with an update request.
open class EnvironmentUpdateError {
    ErrorCode: (EnvironmentErrorCode)?
    ErrorMessage: (EnvironmentErrorMessage)?
}

typealias EnvironmentUpdateStatus = String|Mapping


typealias EnvironmentWebserverAccessMode = String|Mapping


typealias EnvironmentWebserverUrl = String|Mapping


typealias EnvironmentWebserverVpcEndpointService = String|Mapping


typealias EnvironmentWeeklyMaintenanceWindowStart = String|Mapping


/// Resource schema for AWS::MWAA::Environment
open class Environment extends cloudformation.Resource {

    Type = "AWS::MWAA::Environment"


    /// Key/value pairs representing Airflow configuration variables.
    ///
    ///     Keys are prefixed by their section:
    /// 
    ///     [core]
    ///     dags_folder={AIRFLOW_HOME}/dags
    /// 
    ///     Would be represented as
    /// 
    ///     "core.dags_folder": "{AIRFLOW_HOME}/dags"
    hidden AirflowConfigurationOptions: (Dynamic)?

    /// 
    hidden AirflowVersion: (EnvironmentAirflowVersion)?

    /// 
    hidden DagS3Path: (EnvironmentRelativePath)?

    /// 
    hidden EndpointManagement: (EnvironmentEndpointManagement)?

    /// 
    hidden EnvironmentClass: (EnvironmentEnvironmentClass)?

    /// 
    hidden ExecutionRoleArn: (EnvironmentExecutionRoleArn)?

    /// 
    hidden KmsKey: (EnvironmentKmsKey)?

    /// 
    hidden LoggingConfiguration: (EnvironmentLoggingConfiguration)?

    /// 
    hidden MaxWorkers: (EnvironmentMaxWorkers)?

    /// 
    hidden MinWorkers: (EnvironmentMinWorkers)?

    /// 
    hidden Name: EnvironmentEnvironmentName

    /// 
    hidden NetworkConfiguration: (EnvironmentNetworkConfiguration)?

    /// 
    hidden PluginsS3ObjectVersion: (EnvironmentS3ObjectVersion)?

    /// 
    hidden PluginsS3Path: (EnvironmentRelativePath)?

    /// 
    hidden RequirementsS3ObjectVersion: (EnvironmentS3ObjectVersion)?

    /// 
    hidden RequirementsS3Path: (EnvironmentRelativePath)?

    /// 
    hidden Schedulers: (EnvironmentSchedulers)?

    /// 
    hidden SourceBucketArn: (EnvironmentS3BucketArn)?

    /// 
    hidden StartupScriptS3ObjectVersion: (EnvironmentS3ObjectVersion)?

    /// 
    hidden StartupScriptS3Path: (EnvironmentRelativePath)?

    /// A map of tags for the environment.
    hidden Tags: (Dynamic)?

    /// 
    hidden WebserverAccessMode: (EnvironmentWebserverAccessMode)?

    /// 
    hidden WeeklyMaintenanceWindowStart: (EnvironmentWeeklyMaintenanceWindowStart)?

    Properties {
        ["AirflowConfigurationOptions"] = if (AirflowConfigurationOptions == null) null else AirflowConfigurationOptions
        ["AirflowVersion"] = if (AirflowVersion == null) null else AirflowVersion
        ["DagS3Path"] = if (DagS3Path == null) null else DagS3Path
        ["EndpointManagement"] = if (EndpointManagement == null) null else EndpointManagement
        ["EnvironmentClass"] = if (EnvironmentClass == null) null else EnvironmentClass
        ["ExecutionRoleArn"] = if (ExecutionRoleArn == null) null else ExecutionRoleArn
        ["KmsKey"] = if (KmsKey == null) null else KmsKey
        ["LoggingConfiguration"] = if (LoggingConfiguration == null) null else LoggingConfiguration
        ["MaxWorkers"] = if (MaxWorkers == null) null else MaxWorkers
        ["MinWorkers"] = if (MinWorkers == null) null else MinWorkers
        ["Name"] = if (Name == null) null else Name
        ["NetworkConfiguration"] = if (NetworkConfiguration == null) null else NetworkConfiguration
        ["PluginsS3ObjectVersion"] = if (PluginsS3ObjectVersion == null) null else PluginsS3ObjectVersion
        ["PluginsS3Path"] = if (PluginsS3Path == null) null else PluginsS3Path
        ["RequirementsS3ObjectVersion"] = if (RequirementsS3ObjectVersion == null) null else RequirementsS3ObjectVersion
        ["RequirementsS3Path"] = if (RequirementsS3Path == null) null else RequirementsS3Path
        ["Schedulers"] = if (Schedulers == null) null else Schedulers
        ["SourceBucketArn"] = if (SourceBucketArn == null) null else SourceBucketArn
        ["StartupScriptS3ObjectVersion"] = if (StartupScriptS3ObjectVersion == null) null else StartupScriptS3ObjectVersion
        ["StartupScriptS3Path"] = if (StartupScriptS3Path == null) null else StartupScriptS3Path
        ["Tags"] = if (Tags == null) null else Tags
        ["WebserverAccessMode"] = if (WebserverAccessMode == null) null else WebserverAccessMode
        ["WeeklyMaintenanceWindowStart"] = if (WeeklyMaintenanceWindowStart == null) null else WeeklyMaintenanceWindowStart
    }

}
