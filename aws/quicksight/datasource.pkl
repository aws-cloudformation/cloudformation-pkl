/// AWS::QuickSight::DataSource
///
/// Generated by rain build --pkl-class AWS::QuickSight::DataSource
module aws.quicksight.datasource

import "../../cloudformation.pkl"

/// <p>Amazon Elasticsearch Service parameters.</p>
open class DataSourceAmazonElasticsearchParameters {
    Domain: String|Mapping
}

/// <p>Amazon OpenSearch Service parameters.</p>
open class DataSourceAmazonOpenSearchParameters {
    Domain: String|Mapping
}

/// <p>Amazon Athena parameters.</p>
open class DataSourceAthenaParameters {
    RoleArn: (String|Mapping)?
    WorkGroup: (String|Mapping)?
}

/// <p>Amazon Aurora parameters.</p>
open class DataSourceAuroraParameters {
    Database: String|Mapping
    Host: String|Mapping
    Port: Number|Mapping
}

/// <p>Amazon Aurora with PostgreSQL compatibility parameters.</p>
open class DataSourceAuroraPostgreSqlParameters {
    Database: String|Mapping
    Host: String|Mapping
    Port: Number|Mapping
}

/// <p>AWS IoT Analytics parameters.</p>
open class DataSourceAwsIotAnalyticsParameters {
    DataSetName: String|Mapping
}

/// <p>The combination of user name and password that are used as credentials.</p>
open class DataSourceCredentialPair {
    AlternateDataSourceParameters: (Listing<DataSourceDataSourceParameters>)?
    Password: String|Mapping
    Username: String|Mapping
}

/// <p>Data source credentials. This is a variant type structure. For this structure to be
///
///             valid, only one of the attributes can be non-null.</p>
open class DataSourceDataSourceCredentials {
    CopySourceArn: (String(matches(Regex(#"^arn:[-a-z0-9]*:quicksight:[-a-z0-9]*:[0-9]{12}:datasource/.+"#)))|Mapping)?
    CredentialPair: (DataSourceCredentialPair)?
    SecretArn: (String(matches(Regex(#"^arn:[-a-z0-9]*:secretsmanager:[-a-z0-9]*:[0-9]{12}:secret:.+"#)))|Mapping)?
}

/// <p>Error information for the data source creation or update.</p>
open class DataSourceDataSourceErrorInfo {
    Message: (String|Mapping)?
    Type: (DataSourceDataSourceErrorInfoType)?
}

typealias DataSourceDataSourceErrorInfoType = String|Mapping


/// <p>The parameters that Amazon QuickSight uses to connect to your underlying data source.
///
///             This is a variant type structure. For this structure to be valid, only one of the
///             attributes can be non-null.</p>
open class DataSourceDataSourceParameters {
    AmazonElasticsearchParameters: (DataSourceAmazonElasticsearchParameters)?
    AmazonOpenSearchParameters: (DataSourceAmazonOpenSearchParameters)?
    AthenaParameters: (DataSourceAthenaParameters)?
    AuroraParameters: (DataSourceAuroraParameters)?
    AuroraPostgreSqlParameters: (DataSourceAuroraPostgreSqlParameters)?
    DatabricksParameters: (DataSourceDatabricksParameters)?
    MariaDbParameters: (DataSourceMariaDbParameters)?
    MySqlParameters: (DataSourceMySqlParameters)?
    OracleParameters: (DataSourceOracleParameters)?
    PostgreSqlParameters: (DataSourcePostgreSqlParameters)?
    PrestoParameters: (DataSourcePrestoParameters)?
    RdsParameters: (DataSourceRdsParameters)?
    RedshiftParameters: (DataSourceRedshiftParameters)?
    S3Parameters: (DataSourceS3Parameters)?
    SnowflakeParameters: (DataSourceSnowflakeParameters)?
    SparkParameters: (DataSourceSparkParameters)?
    SqlServerParameters: (DataSourceSqlServerParameters)?
    StarburstParameters: (DataSourceStarburstParameters)?
    TeradataParameters: (DataSourceTeradataParameters)?
    TrinoParameters: (DataSourceTrinoParameters)?
}

typealias DataSourceDataSourceType = String|Mapping


/// <p>Databricks parameters.</p>
open class DataSourceDatabricksParameters {
    Host: String|Mapping
    Port: Number|Mapping
    SqlEndpointPath: String|Mapping
}

/// <p>Amazon S3 manifest file location.</p>
open class DataSourceManifestFileLocation {
    Bucket: String|Mapping
    Key: String|Mapping
}

/// <p>MariaDB parameters.</p>
open class DataSourceMariaDbParameters {
    Database: String|Mapping
    Host: String|Mapping
    Port: Number|Mapping
}

/// <p>MySQL parameters.</p>
open class DataSourceMySqlParameters {
    Database: String|Mapping
    Host: String|Mapping
    Port: Number|Mapping
}

/// 
open class DataSourceOracleParameters {
    Database: String|Mapping
    Host: String|Mapping
    Port: Number|Mapping
}

/// <p>PostgreSQL parameters.</p>
open class DataSourcePostgreSqlParameters {
    Database: String|Mapping
    Host: String|Mapping
    Port: Number|Mapping
}

/// <p>Presto parameters.</p>
open class DataSourcePrestoParameters {
    Catalog: String|Mapping
    Host: String|Mapping
    Port: Number|Mapping
}

/// <p>Amazon RDS parameters.</p>
open class DataSourceRdsParameters {
    Database: String|Mapping
    InstanceId: String|Mapping
}

/// <p>Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if
///
///             <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and
///             <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>
open class DataSourceRedshiftParameters {
    ClusterId: (String|Mapping)?
    Database: String|Mapping
    Host: (String|Mapping)?
    Port: (Number|Mapping)?
}

/// <p>Permission for the resource.</p>
open class DataSourceResourcePermission {
    Actions: Listing<String|Mapping>
    Principal: String|Mapping
}

typealias DataSourceResourceStatus = String|Mapping


/// <p>S3 parameters.</p>
open class DataSourceS3Parameters {
    ManifestFileLocation: DataSourceManifestFileLocation
    RoleArn: (String|Mapping)?
}

/// <p>Snowflake parameters.</p>
open class DataSourceSnowflakeParameters {
    Database: String|Mapping
    Host: String|Mapping
    Warehouse: String|Mapping
}

/// <p>Spark parameters.</p>
open class DataSourceSparkParameters {
    Host: String|Mapping
    Port: Number|Mapping
}

/// <p>SQL Server parameters.</p>
open class DataSourceSqlServerParameters {
    Database: String|Mapping
    Host: String|Mapping
    Port: Number|Mapping
}

/// <p>Secure Socket Layer (SSL) properties that apply when QuickSight connects to your
///
///             underlying data source.</p>
open class DataSourceSslProperties {
    DisableSsl: (Boolean|Mapping)?
}

/// <p>Starburst parameters.</p>
open class DataSourceStarburstParameters {
    Catalog: String|Mapping
    Host: String|Mapping
    Port: Number|Mapping
    ProductType: (DataSourceStarburstProductType)?
}

typealias DataSourceStarburstProductType = String|Mapping


/// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
///
///             resource.</p>
open class DataSourceTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// <p>Teradata parameters.</p>
open class DataSourceTeradataParameters {
    Database: String|Mapping
    Host: String|Mapping
    Port: Number|Mapping
}

/// <p>Trino parameters.</p>
open class DataSourceTrinoParameters {
    Catalog: String|Mapping
    Host: String|Mapping
    Port: Number|Mapping
}

/// <p>VPC connection properties.</p>
open class DataSourceVpcConnectionProperties {
    VpcConnectionArn: String|Mapping
}

/// Definition of the AWS::QuickSight::DataSource Resource Type.
open class DataSource extends cloudformation.Resource {

    Type = "AWS::QuickSight::DataSource"


    /// <p>A set of alternate data source parameters that you want to share for the credentials
    ///
    ///             stored with this data source. The credentials are applied in tandem with the data source
    ///             parameters when you copy a data source by using a create or update request. The API
    ///             operation compares the <code>DataSourceParameters</code> structure that's in the request
    ///             with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the
    ///             structures are an exact match, the request is allowed to use the credentials from this
    ///             existing data source. If the <code>AlternateDataSourceParameters</code> list is null,
    ///             the <code>Credentials</code> originally used with this <code>DataSourceParameters</code>
    ///             are automatically allowed.</p>
    hidden AlternateDataSourceParameters: (Listing<DataSourceDataSourceParameters>)?

    /// 
    hidden AwsAccountId: (String(matches(Regex(#"^[0-9]{12}$"#)))|Mapping)?

    /// 
    hidden Credentials: (DataSourceDataSourceCredentials)?

    /// 
    hidden DataSourceId: (String|Mapping)?

    /// 
    hidden DataSourceParameters: (DataSourceDataSourceParameters)?

    /// 
    hidden ErrorInfo: (DataSourceDataSourceErrorInfo)?

    /// <p>A display name for the data source.</p>
    hidden Name: (String|Mapping)?

    /// <p>A list of resource permissions on the data source.</p>
    hidden Permissions: (Listing<DataSourceResourcePermission>)?

    /// 
    hidden SslProperties: (DataSourceSslProperties)?

    /// <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.</p>
    hidden Tags: (Listing<DataSourceTag>)?

    /// 
    hidden TypeProperty: (DataSourceDataSourceType)?

    /// 
    hidden VpcConnectionProperties: (DataSourceVpcConnectionProperties)?

    Properties {
        ["AlternateDataSourceParameters"] = if (AlternateDataSourceParameters == null) null else AlternateDataSourceParameters
        ["AwsAccountId"] = if (AwsAccountId == null) null else AwsAccountId
        ["Credentials"] = if (Credentials == null) null else Credentials
        ["DataSourceId"] = if (DataSourceId == null) null else DataSourceId
        ["DataSourceParameters"] = if (DataSourceParameters == null) null else DataSourceParameters
        ["ErrorInfo"] = if (ErrorInfo == null) null else ErrorInfo
        ["Name"] = if (Name == null) null else Name
        ["Permissions"] = if (Permissions == null) null else Permissions
        ["SslProperties"] = if (SslProperties == null) null else SslProperties
        ["Tags"] = if (Tags == null) null else Tags
        ["Type"] = if (TypeProperty == null) null else TypeProperty
        ["VpcConnectionProperties"] = if (VpcConnectionProperties == null) null else VpcConnectionProperties
    }

}
