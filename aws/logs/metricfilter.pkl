/// AWS::Logs::MetricFilter
///
/// Generated by rain build --pkl-class AWS::Logs::MetricFilter
module aws.logs.metricfilter

import "../../cloudformation.pkl"

/// Specifies the CW metric dimensions to publish with this metric.
///
///   Because dimensions are part of the unique identifier for a metric, whenever a unique dimension name/value pair is extracted from your logs, you are creating a new variation of that metric.
///  For more information about publishing dimensions with metrics created by metric filters, see [Publishing dimensions with metrics from values in JSON or space-delimited log events](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html#logs-metric-filters-dimensions).
///   Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric. 
///  To help prevent accidental high charges, Amazon disables a metric filter if it generates 1000 different name/value pairs for the dimensions that you have specified within a certain amount of time.
///  You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
open class MetricFilterDimension {
    Key: String|Mapping
    Value: String|Mapping
}

typealias MetricTransformationUnit = "Seconds"|"Microseconds"|"Milliseconds"|"Bytes"|"Kilobytes"|"Megabytes"|"Gigabytes"|"Terabytes"|"Bits"|"Kilobits"|"Megabits"|"Gigabits"|"Terabits"|"Percent"|"Count"|"Bytes/Second"|"Kilobytes/Second"|"Megabytes/Second"|"Gigabytes/Second"|"Terabytes/Second"|"Bits/Second"|"Kilobits/Second"|"Megabits/Second"|"Gigabits/Second"|"Terabits/Second"|"Count/Second"|"None"

/// ``MetricTransformation`` is a property of the ``AWS::Logs::MetricFilter`` resource that describes how to transform log streams into a CloudWatch metric.
open class MetricFilterMetricTransformation {
    DefaultValue: (Number|Mapping)?
    Dimensions: (Listing<MetricFilterDimension>)?
    MetricName: String(matches(Regex(#"^((?![:*$])[\x00-\x7F]){1,255}"#)))|Mapping
    MetricNamespace: String(matches(Regex(#"^[0-9a-zA-Z\.\-_\/#]{1,256}"#)))|Mapping
    MetricValue: String(matches(Regex(#".{1,100}"#)))|Mapping
    Unit: (MetricTransformationUnit|Mapping)?
}

/// The ``AWS::Logs::MetricFilter`` resource specifies a metric filter that describes how CWL extracts information from logs and transforms it into Amazon CloudWatch metrics. If you have multiple metric filters that are associated with a log group, all the filters are applied to the log streams in that group.
///
///  The maximum number of metric filters that can be associated with a log group is 100.
open class MetricFilter extends cloudformation.Resource {

    Type = "AWS::Logs::MetricFilter"


    /// The name of the metric filter.
    hidden FilterName: (String(matches(Regex(#"^[^:*]{1,512}"#)))|Mapping)?

    /// A filter pattern for extracting metric data out of ingested log events. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
    hidden FilterPattern: String|Mapping

    /// The name of an existing log group that you want to associate with this metric filter.
    hidden LogGroupName: String(matches(Regex(#"^[.\-_/#A-Za-z0-9]{1,512}"#)))|Mapping

    /// The metric transformations.
    hidden MetricTransformations: Listing<MetricFilterMetricTransformation>

    Properties {
        ["FilterName"] = if (FilterName == null) null else FilterName
        ["FilterPattern"] = if (FilterPattern == null) null else FilterPattern
        ["LogGroupName"] = if (LogGroupName == null) null else LogGroupName
        ["MetricTransformations"] = if (MetricTransformations == null) null else MetricTransformations
    }

}
