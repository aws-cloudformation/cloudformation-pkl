/// AWS::IoT::Authorizer
///
/// Generated by rain build --pkl-class AWS::IoT::Authorizer
module aws.iot.authorizer

import "../../cloudformation.pkl"

/// 
open class AuthorizerTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// Creates an authorizer.
open class Authorizer extends cloudformation.Resource {

    Type = "AWS::IoT::Authorizer"


    /// 
    hidden AuthorizerFunctionArn: String|Mapping

    /// 
    hidden AuthorizerName: (String(matches(Regex(#"[\w=,@-]+"#)))|Mapping)?

    /// 
    hidden EnableCachingForHttp: (Boolean|Mapping)?

    /// 
    hidden SigningDisabled: (Boolean|Mapping)?

    /// 
    hidden Status: (AuthorizerStatus|Mapping)?

    /// 
    hidden Tags: (Listing<AuthorizerTag>)?

    /// 
    hidden TokenKeyName: (String|Mapping)?

    /// 
    hidden TokenSigningPublicKeys: (AuthorizerAuthorizerTokenSigningPublicKeys)?

    Properties {
        ["AuthorizerFunctionArn"] = if (AuthorizerFunctionArn == null) null else AuthorizerFunctionArn
        ["AuthorizerName"] = if (AuthorizerName == null) null else AuthorizerName
        ["EnableCachingForHttp"] = if (EnableCachingForHttp == null) null else EnableCachingForHttp
        ["SigningDisabled"] = if (SigningDisabled == null) null else SigningDisabled
        ["Status"] = if (Status == null) null else Status
        ["Tags"] = if (Tags == null) null else Tags
        ["TokenKeyName"] = if (TokenKeyName == null) null else TokenKeyName
        ["TokenSigningPublicKeys"] = if (TokenSigningPublicKeys == null) null else TokenSigningPublicKeys
    }

}


typealias AuthorizerStatus = "ACTIVE"|"INACTIVE"

typealias AuthorizerAuthorizerTokenSigningPublicKeys = Mapping<String, Any>
