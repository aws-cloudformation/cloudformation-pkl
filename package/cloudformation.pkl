@go.Package { name = "github.com/aws-cloudformation/rain/pkl/cloudformation" }
module cloudformation

import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.6.0#/go.pkl"

typealias RefString = String|Mapping

/// A CloudFormation resource.
///
/// Note that in subclasses of Resource, properties are elevated 
/// to the top level, so we have to rename any properties that 
/// conflict with resource attribute names such as `Type` and `DependsOn`.
/// 
/// Any property that conflicts will be suffixed with `Property`.
open class Resource {
    Type: String(matches(Regex(#"^.*::.*::.*$"#)))
    Properties: Any?
    CreationPolicy: Mapping? 
    DeletionPolicy: String?
    DependsOn: Listing<String>?
    Metadata: Dynamic?
    UpdatePolicy: Mapping?
    UpdateReplacePolicy: String?
    Condition: String?

    // Overrides is specific to Rain modules
    Overrides: Mapping?
}

/// A CloudFormation Parameter
open class Parameter {
    Type: String
    Default: String?
    AllowedValues: Listing<String>?
    Description: String?
    AllowedPattern: String?
    ConstraintDescription: String?
    MaxLength: Int?
    MaxValue: Number?
    MinLength: Int?
    MinValue: Number?
    NoEcho: Boolean?
}

///  A Rule assertion, which is an element of a Rule
open class RuleAssertion {
    Assert: Mapping
    AssertDescription: RefString?
}

/// A Rule, which is a set of assertions that can be made on Parameters
open class Rule {
    RuleCondition: Mapping?
    Assertions: Listing<RuleAssertion>
}

/// A stack Output exported value
open class Export {
    Name: RefString
}

/// A stack output value
open class Output {
    Description: RefString?
    Value: RefString
    Export: Export?
}

function Base64(valueToEncode: RefString): Mapping = new Mapping {
    ["Fn::Base64"] = valueToEncode
}

function Cidr(ipBlock: RefString, count: RefString, cidrBits: RefString): Mapping = new Mapping {
    ["Fn::Cidr"] = new Listing {
        ipBlock
        count
        cidrBits
    }
}

function Ref(to: String): Mapping = new Mapping {
    ["Ref"] = to
}

function Sub(sub: String): Mapping = new Mapping {
    ["Fn::Sub"] = sub
}

function GetAtt(name: String, att: String): Mapping = new Mapping {
    ["Fn::GetAtt"] = new Listing {
        name
        att
    }
}

function Equals(a: Any, b: Any): Mapping = new Mapping {
    ["Fn::Equals"] = new Listing {
        a
        b
    }
}

function Contains(list: Listing, val: RefString): Mapping = new Mapping {
    ["Fn::Contains"] = new Listing {
        list
        val
    }
}

function FindInMap(mapName: String, topLevelKey: RefString, secondLevelKey: RefString): Mapping = new Mapping {
    ["Fn::FindInMap"] = new Listing {
        mapName
        topLevelKey
        secondLevelKey
    }
}

function GetAZs(region: String): Mapping = new Mapping {
    ["Fn::GetAZs"] = region
}

function ImportValue(sharedValueToImport: RefString): Mapping = new Mapping {
    ["Fn::ImportValue"] = sharedValueToImport
}

function Join(delimiter: RefString, list: Listing): Mapping = new Mapping {
    ["Fn::Join"] = new Listing {
        delimiter
        list
    }
}

function Select(index: Int, list: Listing|Mapping): Mapping = new Mapping {
    ["Fn::Select"] = new Listing {
        index
        list
    }
}

function Split(delimiter: RefString, sourceString: RefString): Mapping = new Mapping {
    ["Fn::Split"] = new Listing {
        delimiter
        sourceString
    }
}

function Arn(svc:String, id:String): RefString = 
    Sub("arn:${AWS::Partition}:\(svc):${AWS::Region}:${AWS::AccountId}:\(id)")

