/// AWS::Transfer::Server
///
/// Generated by rain build --pkl-class AWS::Transfer::Server
module aws.transfer.server

import "../../cloudformation.pkl"

typealias ServerAs2Transport = Dynamic


/// 
open class ServerEndpointDetails {
    AddressAllocationIds: (Listing<String|Mapping>)?
    SecurityGroupIds: (Listing<String|Mapping>)?
    SubnetIds: (Listing<String|Mapping>)?
    VpcEndpointId: (String|Mapping)?
    VpcId: (String|Mapping)?
}

/// 
open class ServerIdentityProviderDetails {
    DirectoryId: (String|Mapping)?
    Function: (String|Mapping)?
    InvocationRole: (String|Mapping)?
    SftpAuthenticationMethods: (String|Mapping)?
    Url: (String|Mapping)?
}

typealias ServerProtocol = Dynamic


/// 
open class ServerProtocolDetails {
    As2Transports: (Listing<ServerAs2Transport>)?
    PassiveIp: (String|Mapping)?
    SetStatOption: (String|Mapping)?
    TlsSessionResumptionMode: (String|Mapping)?
}

/// 
open class ServerS3StorageOptions {
    DirectoryListingOptimization: (String|Mapping)?
}

typealias ServerStructuredLogDestination = Dynamic


/// 
open class ServerTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// 
open class ServerWorkflowDetail {
    ExecutionRole: String|Mapping
    WorkflowId: String|Mapping
}

/// 
open class ServerWorkflowDetails {
    OnPartialUpload: (Listing<ServerWorkflowDetail>)?
    OnUpload: (Listing<ServerWorkflowDetail>)?
}

/// Resource Type definition for AWS::Transfer::Server
open class Server extends cloudformation.Resource {

    Type = "AWS::Transfer::Server"


    /// 
    hidden Certificate: (String|Mapping)?

    /// 
    hidden Domain: (String|Mapping)?

    /// 
    hidden EndpointDetails: (ServerEndpointDetails)?

    /// 
    hidden EndpointType: (String|Mapping)?

    /// 
    hidden IdentityProviderDetails: (ServerIdentityProviderDetails)?

    /// 
    hidden IdentityProviderType: (String|Mapping)?

    /// 
    hidden LoggingRole: (String|Mapping)?

    /// 
    hidden PostAuthenticationLoginBanner: (String|Mapping)?

    /// 
    hidden PreAuthenticationLoginBanner: (String|Mapping)?

    /// 
    hidden ProtocolDetails: (ServerProtocolDetails)?

    /// 
    hidden Protocols: (Listing<ServerProtocol>)?

    /// 
    hidden S3StorageOptions: (ServerS3StorageOptions)?

    /// 
    hidden SecurityPolicyName: (String|Mapping)?

    /// 
    hidden StructuredLogDestinations: (Listing<ServerStructuredLogDestination>)?

    /// 
    hidden Tags: (Listing<ServerTag>)?

    /// 
    hidden WorkflowDetails: (ServerWorkflowDetails)?

    Properties {
        ["Certificate"] = if (Certificate == null) null else Certificate
        ["Domain"] = if (Domain == null) null else Domain
        ["EndpointDetails"] = if (EndpointDetails == null) null else EndpointDetails
        ["EndpointType"] = if (EndpointType == null) null else EndpointType
        ["IdentityProviderDetails"] = if (IdentityProviderDetails == null) null else IdentityProviderDetails
        ["IdentityProviderType"] = if (IdentityProviderType == null) null else IdentityProviderType
        ["LoggingRole"] = if (LoggingRole == null) null else LoggingRole
        ["PostAuthenticationLoginBanner"] = if (PostAuthenticationLoginBanner == null) null else PostAuthenticationLoginBanner
        ["PreAuthenticationLoginBanner"] = if (PreAuthenticationLoginBanner == null) null else PreAuthenticationLoginBanner
        ["ProtocolDetails"] = if (ProtocolDetails == null) null else ProtocolDetails
        ["Protocols"] = if (Protocols == null) null else Protocols
        ["S3StorageOptions"] = if (S3StorageOptions == null) null else S3StorageOptions
        ["SecurityPolicyName"] = if (SecurityPolicyName == null) null else SecurityPolicyName
        ["StructuredLogDestinations"] = if (StructuredLogDestinations == null) null else StructuredLogDestinations
        ["Tags"] = if (Tags == null) null else Tags
        ["WorkflowDetails"] = if (WorkflowDetails == null) null else WorkflowDetails
    }

}
