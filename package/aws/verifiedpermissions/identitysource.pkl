/// AWS::VerifiedPermissions::IdentitySource
///
/// Generated by rain build --pkl-class AWS::VerifiedPermissions::IdentitySource
module aws.verifiedpermissions.identitysource

import "../../cloudformation.pkl"

/// 
open class IdentitySourceCognitoGroupConfiguration {
    GroupEntityType: String(matches(Regex(#"^([_a-zA-Z][_a-zA-Z0-9]*::)*[_a-zA-Z][_a-zA-Z0-9]*$"#)))|Mapping
}

/// 
open class IdentitySourceCognitoUserPoolConfiguration {
    ClientIds: (Listing<String|Mapping>)?
    GroupConfiguration: (IdentitySourceCognitoGroupConfiguration)?
    UserPoolArn: String(matches(Regex(#"^arn:[a-zA-Z0-9-]+:cognito-idp:(([a-zA-Z0-9-]+:\d{12}:userpool/[\w-]+_[0-9a-zA-Z]+))$"#)))|Mapping
}

typealias IdentitySourceIdentitySourceConfiguration = IdentitySourceIdentitySourceConfigurationCognitoUserPoolConfiguration|IdentitySourceIdentitySourceConfigurationOpenIdConnectConfiguration


/// 
open class IdentitySourceIdentitySourceConfigurationCognitoUserPoolConfiguration {
    CognitoUserPoolConfiguration: IdentitySourceCognitoUserPoolConfiguration
}

/// 
open class IdentitySourceIdentitySourceConfigurationOpenIdConnectConfiguration {
    OpenIdConnectConfiguration: IdentitySourceOpenIdConnectConfiguration
}

/// 
open class IdentitySourceIdentitySourceDetails {
    ClientIds: (Listing<String|Mapping>)?
    DiscoveryUrl: (String(matches(Regex(#"^https://.*$"#)))|Mapping)?
    OpenIdIssuer: (IdentitySourceOpenIdIssuer)?
    UserPoolArn: (String(matches(Regex(#"^arn:[a-zA-Z0-9-]+:cognito-idp:(([a-zA-Z0-9-]+:\d{12}:userpool/[\w-]+_[0-9a-zA-Z]+))$"#)))|Mapping)?
}

/// 
open class IdentitySourceOpenIdConnectAccessTokenConfiguration {
    Audiences: (Listing<String|Mapping>)?
    PrincipalIdClaim: (String|Mapping)?
}

/// 
open class IdentitySourceOpenIdConnectConfiguration {
    EntityIdPrefix: (String|Mapping)?
    GroupConfiguration: (IdentitySourceOpenIdConnectGroupConfiguration)?
    Issuer: String(matches(Regex(#"^https://.*$"#)))|Mapping
    TokenSelection: IdentitySourceOpenIdConnectTokenSelection
}

/// 
open class IdentitySourceOpenIdConnectGroupConfiguration {
    GroupClaim: String|Mapping
    GroupEntityType: String(matches(Regex(#"^([_a-zA-Z][_a-zA-Z0-9]*::)*[_a-zA-Z][_a-zA-Z0-9]*$"#)))|Mapping
}

/// 
open class IdentitySourceOpenIdConnectIdentityTokenConfiguration {
    ClientIds: (Listing<String|Mapping>)?
    PrincipalIdClaim: (String|Mapping)?
}

typealias IdentitySourceOpenIdConnectTokenSelection = IdentitySourceOpenIdConnectTokenSelectionAccessTokenOnly|IdentitySourceOpenIdConnectTokenSelectionIdentityTokenOnly


/// 
open class IdentitySourceOpenIdConnectTokenSelectionAccessTokenOnly {
    AccessTokenOnly: IdentitySourceOpenIdConnectAccessTokenConfiguration
}

/// 
open class IdentitySourceOpenIdConnectTokenSelectionIdentityTokenOnly {
    IdentityTokenOnly: IdentitySourceOpenIdConnectIdentityTokenConfiguration
}

typealias IdentitySourceOpenIdIssuer = String|Mapping


/// Definition of AWS::VerifiedPermissions::IdentitySource Resource Type
open class IdentitySource extends cloudformation.Resource {

    Type = "AWS::VerifiedPermissions::IdentitySource"


    /// 
    hidden Configuration: IdentitySourceIdentitySourceConfiguration

    /// 
    hidden PolicyStoreId: String(matches(Regex(#"^[a-zA-Z0-9-]*$"#)))|Mapping

    /// 
    hidden PrincipalEntityType: (String(matches(Regex(#"^.*$"#)))|Mapping)?

    Properties {
        ["Configuration"] = if (Configuration == null) null else Configuration
        ["PolicyStoreId"] = if (PolicyStoreId == null) null else PolicyStoreId
        ["PrincipalEntityType"] = if (PrincipalEntityType == null) null else PrincipalEntityType
    }

}
