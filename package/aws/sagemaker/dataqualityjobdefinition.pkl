/// AWS::SageMaker::DataQualityJobDefinition
///
/// Generated by rain build --pkl-class AWS::SageMaker::DataQualityJobDefinition
module aws.sagemaker.dataqualityjobdefinition

import "../../cloudformation.pkl"

typealias BatchTransformInputS3DataDistributionType = "FullyReplicated"|"ShardedByS3Key"

typealias BatchTransformInputS3InputMode = "Pipe"|"File"

/// The batch transform input for a monitoring job.
open class DataQualityJobDefinitionBatchTransformInput {
    DataCapturedDestinationS3Uri: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
    DatasetFormat: DataQualityJobDefinitionDatasetFormat
    ExcludeFeaturesAttribute: (String|Mapping)?
    LocalPath: String(matches(Regex(#".*"#)))|Mapping
    S3DataDistributionType: (BatchTransformInputS3DataDistributionType|Mapping)?
    S3InputMode: (BatchTransformInputS3InputMode|Mapping)?
}

/// Configuration for the cluster used to run model monitoring jobs.
open class DataQualityJobDefinitionClusterConfig {
    InstanceCount: Int|Mapping
    InstanceType: String|Mapping
    VolumeKmsKeyId: (String|Mapping)?
    VolumeSizeInGB: Int|Mapping
}

/// The baseline constraints resource for a monitoring job.
open class DataQualityJobDefinitionConstraintsResource {
    S3Uri: (DataQualityJobDefinitionS3Uri)?
}

/// The CSV format
open class DataQualityJobDefinitionCsv {
    Header: (Boolean|Mapping)?
}

typealias DataQualityJobDefinitionDataQualityAppSpecificationEnvironment = Mapping<String, Any>

/// Container image configuration object for the monitoring job.
open class DataQualityJobDefinitionDataQualityAppSpecification {
    ContainerArguments: (Listing<String|Mapping>)?
    ContainerEntrypoint: (Listing<String|Mapping>)?
    Environment: (DataQualityJobDefinitionDataQualityAppSpecificationEnvironment)?
    ImageUri: String(matches(Regex(#".*"#)))|Mapping
    PostAnalyticsProcessorSourceUri: (DataQualityJobDefinitionS3Uri)?
    RecordPreprocessorSourceUri: (DataQualityJobDefinitionS3Uri)?
}

/// Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
open class DataQualityJobDefinitionDataQualityBaselineConfig {
    BaseliningJobName: (DataQualityJobDefinitionProcessingJobName)?
    ConstraintsResource: (DataQualityJobDefinitionConstraintsResource)?
    StatisticsResource: (DataQualityJobDefinitionStatisticsResource)?
}

/// The inputs for a monitoring job.
open class DataQualityJobDefinitionDataQualityJobInput {
    BatchTransformInput: (DataQualityJobDefinitionBatchTransformInput)?
    EndpointInput: (DataQualityJobDefinitionEndpointInput)?
}

/// The dataset format of the data to monitor
open class DataQualityJobDefinitionDatasetFormat {
    Csv: (DataQualityJobDefinitionCsv)?
    Json: (DataQualityJobDefinitionJson)?
    Parquet: (DataQualityJobDefinitionParquet)?
}

typealias EndpointInputS3DataDistributionType = "FullyReplicated"|"ShardedByS3Key"

typealias EndpointInputS3InputMode = "Pipe"|"File"

/// The endpoint for a monitoring job.
open class DataQualityJobDefinitionEndpointInput {
    EndpointName: DataQualityJobDefinitionEndpointName
    ExcludeFeaturesAttribute: (String|Mapping)?
    LocalPath: String(matches(Regex(#".*"#)))|Mapping
    S3DataDistributionType: (EndpointInputS3DataDistributionType|Mapping)?
    S3InputMode: (EndpointInputS3InputMode|Mapping)?
}

typealias DataQualityJobDefinitionEndpointName = String|Mapping


typealias DataQualityJobDefinitionJobDefinitionName = String|Mapping


/// The Json format
open class DataQualityJobDefinitionJson {
    Line: (Boolean|Mapping)?
}

/// The output object for a monitoring job.
open class DataQualityJobDefinitionMonitoringOutput {
    S3Output: DataQualityJobDefinitionS3Output
}

/// The output configuration for monitoring jobs.
open class DataQualityJobDefinitionMonitoringOutputConfig {
    KmsKeyId: (String(matches(Regex(#".*"#)))|Mapping)?
    MonitoringOutputs: Listing<DataQualityJobDefinitionMonitoringOutput>
}

/// Identifies the resources to deploy for a monitoring job.
open class DataQualityJobDefinitionMonitoringResources {
    ClusterConfig: DataQualityJobDefinitionClusterConfig
}

/// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
open class DataQualityJobDefinitionNetworkConfig {
    EnableInterContainerTrafficEncryption: (Boolean|Mapping)?
    EnableNetworkIsolation: (Boolean|Mapping)?
    VpcConfig: (DataQualityJobDefinitionVpcConfig)?
}

typealias DataQualityJobDefinitionParquet = Boolean|Mapping


typealias DataQualityJobDefinitionProcessingJobName = String|Mapping


typealias S3OutputS3UploadMode = "Continuous"|"EndOfJob"

/// Information about where and how to store the results of a monitoring job.
open class DataQualityJobDefinitionS3Output {
    LocalPath: String(matches(Regex(#".*"#)))|Mapping
    S3UploadMode: (S3OutputS3UploadMode|Mapping)?
    S3Uri: String(matches(Regex(#"^(https|s3)://([^/]+)/?(.*)$"#)))|Mapping
}

typealias DataQualityJobDefinitionS3Uri = String|Mapping


/// The baseline statistics resource for a monitoring job.
open class DataQualityJobDefinitionStatisticsResource {
    S3Uri: (DataQualityJobDefinitionS3Uri)?
}

/// Specifies a time limit for how long the monitoring job is allowed to run.
open class DataQualityJobDefinitionStoppingCondition {
    MaxRuntimeInSeconds: Int|Mapping
}

/// A key-value pair to associate with a resource.
open class DataQualityJobDefinitionTag {
    Key: String(matches(Regex(#"^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$"#)))|Mapping
    Value: String(matches(Regex(#"^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$"#)))|Mapping
}

/// Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
open class DataQualityJobDefinitionVpcConfig {
    SecurityGroupIds: Listing<String|Mapping>
    Subnets: Listing<String|Mapping>
}

/// Resource Type definition for AWS::SageMaker::DataQualityJobDefinition
open class DataQualityJobDefinition extends cloudformation.Resource {

    Type = "AWS::SageMaker::DataQualityJobDefinition"


    /// 
    hidden DataQualityAppSpecification: DataQualityJobDefinitionDataQualityAppSpecification

    /// 
    hidden DataQualityBaselineConfig: (DataQualityJobDefinitionDataQualityBaselineConfig)?

    /// 
    hidden DataQualityJobInput: DataQualityJobDefinitionDataQualityJobInput

    /// 
    hidden DataQualityJobOutputConfig: DataQualityJobDefinitionMonitoringOutputConfig

    /// 
    hidden EndpointName: (DataQualityJobDefinitionEndpointName)?

    /// 
    hidden JobDefinitionName: (DataQualityJobDefinitionJobDefinitionName)?

    /// 
    hidden JobResources: DataQualityJobDefinitionMonitoringResources

    /// 
    hidden NetworkConfig: (DataQualityJobDefinitionNetworkConfig)?

    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    hidden RoleArn: String(matches(Regex(#"^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$"#)))|Mapping

    /// 
    hidden StoppingCondition: (DataQualityJobDefinitionStoppingCondition)?

    /// An array of key-value pairs to apply to this resource.
    hidden Tags: (Listing<DataQualityJobDefinitionTag>)?

    Properties {
        ["DataQualityAppSpecification"] = if (DataQualityAppSpecification == null) null else DataQualityAppSpecification
        ["DataQualityBaselineConfig"] = if (DataQualityBaselineConfig == null) null else DataQualityBaselineConfig
        ["DataQualityJobInput"] = if (DataQualityJobInput == null) null else DataQualityJobInput
        ["DataQualityJobOutputConfig"] = if (DataQualityJobOutputConfig == null) null else DataQualityJobOutputConfig
        ["EndpointName"] = if (EndpointName == null) null else EndpointName
        ["JobDefinitionName"] = if (JobDefinitionName == null) null else JobDefinitionName
        ["JobResources"] = if (JobResources == null) null else JobResources
        ["NetworkConfig"] = if (NetworkConfig == null) null else NetworkConfig
        ["RoleArn"] = if (RoleArn == null) null else RoleArn
        ["StoppingCondition"] = if (StoppingCondition == null) null else StoppingCondition
        ["Tags"] = if (Tags == null) null else Tags
    }

}
