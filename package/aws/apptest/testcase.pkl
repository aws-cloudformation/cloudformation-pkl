/// AWS::AppTest::TestCase
///
/// Generated by rain build --pkl-class AWS::AppTest::TestCase
module aws.apptest.testcase

import "../../cloudformation.pkl"

/// 
open class TestCaseBatch {
    BatchJobName: String(matches(Regex(#"^\S{1,1000}$"#)))|Mapping
    BatchJobParameters: (TestCaseBatchJobParameters)?
    ExportDataSetNames: (Listing<String|Mapping>)?
}

typealias TestCaseBatchJobParameters = Mapping<String, Any>


typealias TestCaseCaptureTool = String|Mapping


/// 
open class TestCaseCloudFormationAction {
    ActionType: (TestCaseCloudFormationActionType)?
    Resource: String(matches(Regex(#"^\S{1,1000}$"#)))|Mapping
}

typealias TestCaseCloudFormationActionType = String|Mapping


/// 
open class TestCaseCompareAction {
    Input: TestCaseInput
    Output: (TestCaseOutput)?
}

/// 
open class TestCaseDataSet {
    Ccsid: String(matches(Regex(#"^\S{1,50}$"#)))|Mapping
    Format: TestCaseFormat
    Length: Number|Mapping
    Name: String(matches(Regex(#"^\S{1,100}$"#)))|Mapping
    Type: TestCaseDataSetType
}

typealias TestCaseDataSetType = String|Mapping


/// 
open class TestCaseDatabaseCDC {
    SourceMetadata: TestCaseSourceDatabaseMetadata
    TargetMetadata: TestCaseTargetDatabaseMetadata
}

typealias TestCaseFileMetadata = TestCaseFileMetadataDataSets|TestCaseFileMetadataDatabaseCDC


/// 
open class TestCaseFileMetadataDataSets {
    DataSets: Listing<TestCaseDataSet>
}

/// 
open class TestCaseFileMetadataDatabaseCDC {
    DatabaseCDC: TestCaseDatabaseCDC
}

typealias TestCaseFormat = String|Mapping


typealias TestCaseInput = TestCaseInputFile


/// 
open class TestCaseInputFile {
    FileMetadata: TestCaseFileMetadata
    SourceLocation: String(matches(Regex(#"^\S{1,1000}$"#)))|Mapping
    TargetLocation: String(matches(Regex(#"^\S{1,1000}$"#)))|Mapping
}

/// 
open class TestCaseM2ManagedActionProperties {
    ForceStop: (Boolean|Mapping)?
    ImportDataSetLocation: (String(matches(Regex(#"^\S{1,1000}$"#)))|Mapping)?
}

typealias TestCaseM2ManagedActionType = String|Mapping


/// 
open class TestCaseM2ManagedApplicationAction {
    ActionType: TestCaseM2ManagedActionType
    Properties: (TestCaseM2ManagedActionProperties)?
    Resource: String(matches(Regex(#"^\S{1,1000}$"#)))|Mapping
}

typealias TestCaseM2NonManagedActionType = String|Mapping


/// 
open class TestCaseM2NonManagedApplicationAction {
    ActionType: TestCaseM2NonManagedActionType
    Resource: String(matches(Regex(#"^\S{1,1000}$"#)))|Mapping
}

/// 
open class TestCaseMainframeAction {
    ActionType: TestCaseMainframeActionType
    Properties: (TestCaseMainframeActionProperties)?
    Resource: String(matches(Regex(#"^\S{1,1000}$"#)))|Mapping
}

/// 
open class TestCaseMainframeActionProperties {
    DmsTaskArn: (String(matches(Regex(#"^\S{1,1000}$"#)))|Mapping)?
}

typealias TestCaseMainframeActionType = TestCaseMainframeActionTypeBatch|TestCaseMainframeActionTypeTn3270


/// 
open class TestCaseMainframeActionTypeBatch {
    Batch: TestCaseBatch
}

/// 
open class TestCaseMainframeActionTypeTn3270 {
    Tn3270: TestCaseTN3270
}

typealias TestCaseOutput = TestCaseOutputFile


/// 
open class TestCaseOutputFile {
    FileLocation: (String|Mapping)?
}

typealias TestCaseResourceAction = TestCaseResourceActionM2ManagedApplicationAction|TestCaseResourceActionM2NonManagedApplicationAction|TestCaseResourceActionCloudFormationAction


/// 
open class TestCaseResourceActionCloudFormationAction {
    CloudFormationAction: TestCaseCloudFormationAction
}

/// 
open class TestCaseResourceActionM2ManagedApplicationAction {
    M2ManagedApplicationAction: TestCaseM2ManagedApplicationAction
}

/// 
open class TestCaseResourceActionM2NonManagedApplicationAction {
    M2NonManagedApplicationAction: TestCaseM2NonManagedApplicationAction
}

/// 
open class TestCaseScript {
    ScriptLocation: String|Mapping
    Type: TestCaseScriptType
}

typealias TestCaseScriptType = String|Mapping


typealias TestCaseSourceDatabase = String|Mapping


/// 
open class TestCaseSourceDatabaseMetadata {
    CaptureTool: TestCaseCaptureTool
    Type: TestCaseSourceDatabase
}

/// 
open class TestCaseStep {
    Action: TestCaseStepAction
    Description: (String|Mapping)?
    Name: String(matches(Regex(#"^[A-Za-z][A-Za-z0-9_\-]{1,59}$"#)))|Mapping
}

typealias TestCaseStepAction = TestCaseStepActionResourceAction|TestCaseStepActionMainframeAction|TestCaseStepActionCompareAction


/// 
open class TestCaseStepActionCompareAction {
    CompareAction: TestCaseCompareAction
}

/// 
open class TestCaseStepActionMainframeAction {
    MainframeAction: TestCaseMainframeAction
}

/// 
open class TestCaseStepActionResourceAction {
    ResourceAction: TestCaseResourceAction
}

/// 
open class TestCaseTN3270 {
    ExportDataSetNames: (Listing<String|Mapping>)?
    Script: TestCaseScript
}

typealias TestCaseTagMap = Mapping<String, Any>


typealias TestCaseTargetDatabase = String|Mapping


/// 
open class TestCaseTargetDatabaseMetadata {
    CaptureTool: TestCaseCaptureTool
    Type: TestCaseTargetDatabase
}

/// 
open class TestCaseTestCaseLatestVersion {
    Status: TestCaseTestCaseLifecycle
    Version: Number|Mapping
}

typealias TestCaseTestCaseLifecycle = String|Mapping


/// Represents a Test Case that can be captured and executed
open class TestCase extends cloudformation.Resource {

    Type = "AWS::AppTest::TestCase"


    /// 
    hidden Description: (String|Mapping)?

    /// 
    hidden Name: String(matches(Regex(#"^[A-Za-z][A-Za-z0-9_\-]{1,59}$"#)))|Mapping

    /// 
    hidden Steps: Listing<TestCaseStep>

    /// 
    hidden Tags: (TestCaseTagMap)?

    Properties {
        ["Description"] = if (Description == null) null else Description
        ["Name"] = if (Name == null) null else Name
        ["Steps"] = if (Steps == null) null else Steps
        ["Tags"] = if (Tags == null) null else Tags
    }

}
