/// AWS::LookoutEquipment::InferenceScheduler
///
/// Generated by rain build --pkl-class AWS::LookoutEquipment::InferenceScheduler
module aws.lookoutequipment.inferencescheduler

import "../../cloudformation.pkl"

typealias InferenceSchedulerBucket = String|Mapping


/// Specifies configuration information for the input data for the inference, including timestamp format and delimiter.
open class InferenceSchedulerInputNameConfiguration {
    ComponentTimestampDelimiter: (String(matches(Regex(#"^(\-|\_|\s)?$"#)))|Mapping)?
    TimestampFormat: (String(matches(Regex(#"^EPOCH|yyyy-MM-dd-HH-mm-ss|yyyyMMddHHmmss$"#)))|Mapping)?
}

typealias InferenceSchedulerPrefix = String|Mapping


/// Specifies configuration information for the input data for the inference, including input data S3 location.
open class InferenceSchedulerS3InputConfiguration {
    Bucket: InferenceSchedulerBucket
    Prefix: (InferenceSchedulerPrefix)?
}

/// Specifies configuration information for the output results from the inference, including output S3 location.
open class InferenceSchedulerS3OutputConfiguration {
    Bucket: InferenceSchedulerBucket
    Prefix: (InferenceSchedulerPrefix)?
}

/// A tag is a key-value pair that can be added to a resource as metadata.
open class InferenceSchedulerTag {
    Key: String(matches(Regex(#"^(?!aws:)[a-zA-Z+-=._:/]+$"#)))|Mapping
    Value: String(matches(Regex(#"[\s\w+-=\.:/@]*"#)))|Mapping
}

/// Resource schema for LookoutEquipment InferenceScheduler.
open class InferenceScheduler extends cloudformation.Resource {

    Type = "AWS::LookoutEquipment::InferenceScheduler"


    /// A period of time (in minutes) by which inference on the data is delayed after the data starts.
    hidden DataDelayOffsetInMinutes: (Int|Mapping)?

    /// Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location.
    hidden DataInputConfiguration: Dynamic

    /// Specifies configuration information for the output results for the inference scheduler, including the S3 location for the output.
    hidden DataOutputConfiguration: Dynamic

    /// How often data is uploaded to the source S3 bucket for the input data.
    hidden DataUploadFrequency: InferenceSchedulerDataUploadFrequency|Mapping

    /// The name of the inference scheduler being created.
    hidden InferenceSchedulerName: (String(matches(Regex(#"^[0-9a-zA-Z_-]{1,200}$"#)))|Mapping)?

    /// The name of the previously trained ML model being used to create the inference scheduler.
    hidden ModelName: String(matches(Regex(#"^[0-9a-zA-Z_-]{1,200}$"#)))|Mapping

    /// The Amazon Resource Name (ARN) of a role with permission to access the data source being used for the inference.
    hidden RoleArn: String(matches(Regex(#"arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+"#)))|Mapping

    /// Provides the identifier of the AWS KMS customer master key (CMK) used to encrypt inference scheduler data by Amazon Lookout for Equipment.
    hidden ServerSideKmsKeyId: (String(matches(Regex(#"^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$"#)))|Mapping)?

    /// Any tags associated with the inference scheduler.
    hidden Tags: (Listing<InferenceSchedulerTag>)?

    Properties {
        ["DataDelayOffsetInMinutes"] = if (DataDelayOffsetInMinutes == null) null else DataDelayOffsetInMinutes
        ["DataInputConfiguration"] = if (DataInputConfiguration == null) null else DataInputConfiguration
        ["DataOutputConfiguration"] = if (DataOutputConfiguration == null) null else DataOutputConfiguration
        ["DataUploadFrequency"] = if (DataUploadFrequency == null) null else DataUploadFrequency
        ["InferenceSchedulerName"] = if (InferenceSchedulerName == null) null else InferenceSchedulerName
        ["ModelName"] = if (ModelName == null) null else ModelName
        ["RoleArn"] = if (RoleArn == null) null else RoleArn
        ["ServerSideKmsKeyId"] = if (ServerSideKmsKeyId == null) null else ServerSideKmsKeyId
        ["Tags"] = if (Tags == null) null else Tags
    }

}


typealias InferenceSchedulerDataUploadFrequency = "PT5M"|"PT10M"|"PT15M"|"PT30M"|"PT1H"
