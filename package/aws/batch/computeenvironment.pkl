/// AWS::Batch::ComputeEnvironment
///
/// Generated by rain build --pkl-class AWS::Batch::ComputeEnvironment
module aws.batch.computeenvironment

import "../../cloudformation.pkl"

typealias ComputeEnvironmentComputeResourcesTags = Mapping<String, Any>

/// 
open class ComputeEnvironmentComputeResources {
    AllocationStrategy: (String|Mapping)?
    BidPercentage: (Int|Mapping)?
    DesiredvCpus: (Int|Mapping)?
    Ec2Configuration: (Listing<ComputeEnvironmentEc2ConfigurationObject>)?
    Ec2KeyPair: (String|Mapping)?
    ImageId: (String|Mapping)?
    InstanceRole: (String|Mapping)?
    InstanceTypes: (Listing<String|Mapping>)?
    LaunchTemplate: (ComputeEnvironmentLaunchTemplateSpecification)?
    MaxvCpus: Int|Mapping
    MinvCpus: (Int|Mapping)?
    PlacementGroup: (String|Mapping)?
    SecurityGroupIds: (Listing<String|Mapping>)?
    SpotIamFleetRole: (String|Mapping)?
    Subnets: Listing<String|Mapping>
    Tags: (ComputeEnvironmentComputeResourcesTags)?
    Type: String|Mapping
    UpdateToLatestImageVersion: (Boolean|Mapping)?
}

/// 
open class ComputeEnvironmentEc2ConfigurationObject {
    ImageIdOverride: (String|Mapping)?
    ImageKubernetesVersion: (String|Mapping)?
    ImageType: String|Mapping
}

/// 
open class ComputeEnvironmentEksConfiguration {
    EksClusterArn: String|Mapping
    KubernetesNamespace: String|Mapping
}

/// 
open class ComputeEnvironmentLaunchTemplateSpecification {
    LaunchTemplateId: (String|Mapping)?
    LaunchTemplateName: (String|Mapping)?
    Overrides: (Listing<ComputeEnvironmentLaunchTemplateSpecificationOverride>)?
    Version: (String|Mapping)?
}

/// 
open class ComputeEnvironmentLaunchTemplateSpecificationOverride {
    LaunchTemplateId: (String|Mapping)?
    LaunchTemplateName: (String|Mapping)?
    TargetInstanceTypes: (Listing<String|Mapping>)?
    Version: (String|Mapping)?
}

/// 
open class ComputeEnvironmentUpdatePolicy {
    JobExecutionTimeoutMinutes: (Int|Mapping)?
    TerminateJobsOnUpdate: (Boolean|Mapping)?
}

/// Resource Type definition for AWS::Batch::ComputeEnvironment
open class ComputeEnvironment extends cloudformation.Resource {

    Type = "AWS::Batch::ComputeEnvironment"


    /// 
    hidden ComputeEnvironmentName: (String|Mapping)?

    /// 
    hidden ComputeResources: (ComputeEnvironmentComputeResources)?

    /// 
    hidden Context: (String|Mapping)?

    /// 
    hidden EksConfiguration: (ComputeEnvironmentEksConfiguration)?

    /// 
    hidden ReplaceComputeEnvironment: (Boolean|Mapping)?

    /// 
    hidden ServiceRole: (String|Mapping)?

    /// 
    hidden State: (String|Mapping)?

    /// A key-value pair to associate with a resource.
    hidden Tags: (ComputeEnvironmentComputeEnvironmentTags)?

    /// 
    hidden TypeProperty: String|Mapping

    /// 
    hidden UnmanagedvCpus: (Int|Mapping)?

    /// 
    hidden UpdatePolicyProperty: (ComputeEnvironmentUpdatePolicy)?

    Properties {
        ["ComputeEnvironmentName"] = if (ComputeEnvironmentName == null) null else ComputeEnvironmentName
        ["ComputeResources"] = if (ComputeResources == null) null else ComputeResources
        ["Context"] = if (Context == null) null else Context
        ["EksConfiguration"] = if (EksConfiguration == null) null else EksConfiguration
        ["ReplaceComputeEnvironment"] = if (ReplaceComputeEnvironment == null) null else ReplaceComputeEnvironment
        ["ServiceRole"] = if (ServiceRole == null) null else ServiceRole
        ["State"] = if (State == null) null else State
        ["Tags"] = if (Tags == null) null else Tags
        ["Type"] = if (TypeProperty == null) null else TypeProperty
        ["UnmanagedvCpus"] = if (UnmanagedvCpus == null) null else UnmanagedvCpus
        ["UpdatePolicy"] = if (UpdatePolicyProperty == null) null else UpdatePolicyProperty
    }

}


typealias ComputeEnvironmentComputeEnvironmentTags = Mapping<String, Any>
