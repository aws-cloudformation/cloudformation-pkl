/// AWS::QBusiness::DataSource
///
/// Generated by rain build --pkl-class AWS::QBusiness::DataSource
module aws.qbusiness.datasource

import "../../cloudformation.pkl"

typealias DataSourceAttributeValueOperator = String|Mapping


typealias DataSourceDataSourceStatus = String|Mapping


/// 
open class DataSourceDataSourceVpcConfiguration {
    SecurityGroupIds: Listing<String|Mapping>
    SubnetIds: Listing<String|Mapping>
}

/// 
open class DataSourceDocumentAttributeCondition {
    Key: String(matches(Regex(#"^[a-zA-Z0-9_][a-zA-Z0-9_-]*$"#)))|Mapping
    Operator: DataSourceDocumentEnrichmentConditionOperator
    Value: (DataSourceDocumentAttributeValue)?
}

/// 
open class DataSourceDocumentAttributeTarget {
    AttributeValueOperator: (DataSourceAttributeValueOperator)?
    Key: String(matches(Regex(#"^[a-zA-Z0-9_][a-zA-Z0-9_-]*$"#)))|Mapping
    Value: (DataSourceDocumentAttributeValue)?
}

typealias DataSourceDocumentAttributeValue = DataSourceDocumentAttributeValueStringValue|DataSourceDocumentAttributeValueStringListValue|DataSourceDocumentAttributeValueLongValue|DataSourceDocumentAttributeValueDateValue


/// 
open class DataSourceDocumentAttributeValueDateValue {
    DateValue: String|Mapping
}

/// 
open class DataSourceDocumentAttributeValueLongValue {
    LongValue: Number|Mapping
}

/// 
open class DataSourceDocumentAttributeValueStringListValue {
    StringListValue: Listing<String|Mapping>
}

/// 
open class DataSourceDocumentAttributeValueStringValue {
    StringValue: String|Mapping
}

typealias DataSourceDocumentContentOperator = String|Mapping


typealias DataSourceDocumentEnrichmentConditionOperator = String|Mapping


/// 
open class DataSourceDocumentEnrichmentConfiguration {
    InlineConfigurations: (Listing<DataSourceInlineDocumentEnrichmentConfiguration>)?
    PostExtractionHookConfiguration: (DataSourceHookConfiguration)?
    PreExtractionHookConfiguration: (DataSourceHookConfiguration)?
}

/// 
open class DataSourceHookConfiguration {
    InvocationCondition: (DataSourceDocumentAttributeCondition)?
    LambdaArn: (String(matches(Regex(#"^arn:aws[a-zA-Z-]*:lambda:[a-z-]*-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?$"#)))|Mapping)?
    RoleArn: (String(matches(Regex(#"^arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}$"#)))|Mapping)?
    S3BucketName: (String(matches(Regex(#"^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$"#)))|Mapping)?
}

/// 
open class DataSourceImageExtractionConfiguration {
    ImageExtractionStatus: DataSourceImageExtractionStatus
}

typealias DataSourceImageExtractionStatus = String|Mapping


/// 
open class DataSourceInlineDocumentEnrichmentConfiguration {
    Condition: (DataSourceDocumentAttributeCondition)?
    DocumentContentOperator: (DataSourceDocumentContentOperator)?
    Target: (DataSourceDocumentAttributeTarget)?
}

/// 
open class DataSourceMediaExtractionConfiguration {
    ImageExtractionConfiguration: (DataSourceImageExtractionConfiguration)?
}

/// 
open class DataSourceTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// Definition of AWS::QBusiness::DataSource Resource Type
open class DataSource extends cloudformation.Resource {

    Type = "AWS::QBusiness::DataSource"


    /// 
    hidden ApplicationId: String(matches(Regex(#"^[a-zA-Z0-9][a-zA-Z0-9-]{35}$"#)))|Mapping

    /// 
    hidden Description: (String(matches(Regex(#"^[\s\S]*$"#)))|Mapping)?

    /// 
    hidden DisplayName: String(matches(Regex(#"^[a-zA-Z0-9][a-zA-Z0-9_-]*$"#)))|Mapping

    /// 
    hidden DocumentEnrichmentConfiguration: (DataSourceDocumentEnrichmentConfiguration)?

    /// 
    hidden IndexId: String(matches(Regex(#"^[a-zA-Z0-9][a-zA-Z0-9-]{35}$"#)))|Mapping

    /// 
    hidden MediaExtractionConfiguration: (DataSourceMediaExtractionConfiguration)?

    /// 
    hidden RoleArn: (String(matches(Regex(#"^arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}$"#)))|Mapping)?

    /// 
    hidden SyncSchedule: (String(matches(Regex(#"^[\s\S]*$"#)))|Mapping)?

    /// 
    hidden Tags: (Listing<DataSourceTag>)?

    /// 
    hidden VpcConfiguration: (DataSourceDataSourceVpcConfiguration)?

    Properties {
        ["ApplicationId"] = if (ApplicationId == null) null else ApplicationId
        ["Description"] = if (Description == null) null else Description
        ["DisplayName"] = if (DisplayName == null) null else DisplayName
        ["DocumentEnrichmentConfiguration"] = if (DocumentEnrichmentConfiguration == null) null else DocumentEnrichmentConfiguration
        ["IndexId"] = if (IndexId == null) null else IndexId
        ["MediaExtractionConfiguration"] = if (MediaExtractionConfiguration == null) null else MediaExtractionConfiguration
        ["RoleArn"] = if (RoleArn == null) null else RoleArn
        ["SyncSchedule"] = if (SyncSchedule == null) null else SyncSchedule
        ["Tags"] = if (Tags == null) null else Tags
        ["VpcConfiguration"] = if (VpcConfiguration == null) null else VpcConfiguration
    }

}
