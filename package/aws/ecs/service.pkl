/// AWS::ECS::Service
///
/// Generated by rain build --pkl-class AWS::ECS::Service
module aws.ecs.service

import "../../cloudformation.pkl"

typealias AwsVpcConfigurationAssignPublicIp = "DISABLED"|"ENABLED"

/// An object representing the networking details for a task or service. For example ``awsVpcConfiguration={subnets=["subnet-12344321"],securityGroups=["sg-12344321"]}``.
open class ServiceAwsVpcConfiguration {
    AssignPublicIp: (AwsVpcConfigurationAssignPublicIp|Mapping)?
    SecurityGroups: (Listing<String|Mapping>)?
    Subnets: (Listing<String|Mapping>)?
}

/// The details of a capacity provider strategy. A capacity provider strategy can be set when using the ``RunTask`` or ``CreateService`` APIs or as the default capacity provider strategy for a cluster with the ``CreateCluster`` API.
///
///  Only capacity providers that are already associated with a cluster and have an ``ACTIVE`` or ``UPDATING`` status can be used in a capacity provider strategy. The ``PutClusterCapacityProviders`` API is used to associate a capacity provider with a cluster.
///  If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New Auto Scaling group capacity providers can be created with the ``CreateCapacityProvider`` API operation.
///  To use an FARGATElong capacity provider, specify either the ``FARGATE`` or ``FARGATE_SPOT`` capacity providers. The FARGATElong capacity providers are available to all accounts and only need to be associated with a cluster to be used in a capacity provider strategy.
open class ServiceCapacityProviderStrategyItem {
    Base: (Int|Mapping)?
    CapacityProvider: (String|Mapping)?
    Weight: (Int|Mapping)?
}

/// One of the methods which provide a way for you to quickly identify when a deployment has failed, and then to optionally roll back the failure to the last working deployment.
///
///  When the alarms are generated, Amazon ECS sets the service deployment to failed. Set the rollback parameter to have Amazon ECS to roll back your service to the last completed deployment after a failure.
///  You can only use the ``DeploymentAlarms`` method to detect failures when the ``DeploymentController`` is set to ``ECS`` (rolling update).
///  For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*.
open class ServiceDeploymentAlarms {
    AlarmNames: Listing<String|Mapping>
    Enable: Boolean|Mapping
    Rollback: Boolean|Mapping
}

/// The deployment circuit breaker can only be used for services using the rolling update (``ECS``) deployment type.
///
///   The *deployment circuit breaker* determines whether a service deployment will fail if the service can't reach a steady state. If it is turned on, a service deployment will transition to a failed state and stop launching new tasks. You can also configure Amazon ECS to roll back your service to the last completed deployment after a failure. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*.
///  For more information about API failure reasons, see [API failure reasons](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html) in the *Amazon Elastic Container Service Developer Guide*.
open class ServiceDeploymentCircuitBreaker {
    Enable: Boolean|Mapping
    Rollback: Boolean|Mapping
}

/// Optional deployment parameters that control how many tasks run during a deployment and the ordering of stopping and starting tasks.
open class ServiceDeploymentConfiguration {
    Alarms: (ServiceDeploymentAlarms)?
    DeploymentCircuitBreaker: (ServiceDeploymentCircuitBreaker)?
    MaximumPercent: (Int|Mapping)?
    MinimumHealthyPercent: (Int|Mapping)?
}

typealias DeploymentControllerType = "CODE_DEPLOY"|"ECS"|"EXTERNAL"

/// The deployment controller to use for the service.
open class ServiceDeploymentController {
    Type: (DeploymentControllerType|Mapping)?
}

typealias EBSTagSpecificationPropagateTags = "SERVICE"|"TASK_DEFINITION"

/// The tag specifications of an Amazon EBS volume.
open class ServiceEBSTagSpecification {
    PropagateTags: (EBSTagSpecificationPropagateTags|Mapping)?
    ResourceType: String|Mapping
    Tags: (Listing<ServiceTag>)?
}

/// The ``LoadBalancer`` property specifies details on a load balancer that is used with a service.
///
///  If the service is using the ``CODE_DEPLOY`` deployment controller, the service is required to use either an Application Load Balancer or Network Load Balancer. When you are creating an ACDlong deployment group, you specify two target groups (referred to as a ``targetGroupPair``). Each target group binds to a separate task set in the deployment. The load balancer can also have up to two listeners, a required listener for production traffic and an optional listener that allows you to test new revisions of the service before routing production traffic to it.
///  Services with tasks that use the ``awsvpc`` network mode (for example, those with the Fargate launch type) only support Application Load Balancers and Network Load Balancers. Classic Load Balancers are not supported. Also, when you create any target groups for these services, you must choose ``ip`` as the target type, not ``instance``. Tasks that use the ``awsvpc`` network mode are associated with an elastic network interface, not an Amazon EC2 instance.
open class ServiceLoadBalancer {
    ContainerName: (String|Mapping)?
    ContainerPort: (Int|Mapping)?
    LoadBalancerName: (String|Mapping)?
    TargetGroupArn: (String|Mapping)?
}

typealias ServiceLogConfigurationOptions = Mapping<String, Any>

/// The log configuration for the container. This parameter maps to ``LogConfig`` in the docker container create command and the ``--log-driver`` option to docker run.
///
///  By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition.
///  Understand the following when specifying a log configuration for your containers.
///   +  Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent.
///  For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
///  For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``,``syslog``, ``splunk``, and ``awsfirelens``.
///   +  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.
///   +  For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
///   +  For tasks that are on FARGATElong, because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.
open class ServiceLogConfiguration {
    LogDriver: (String|Mapping)?
    Options: (ServiceLogConfigurationOptions)?
    SecretOptions: (Listing<ServiceSecret>)?
}

/// The network configuration for a task or service.
open class ServiceNetworkConfiguration {
    AwsvpcConfiguration: (ServiceAwsVpcConfiguration)?
}

typealias PlacementConstraintType = "distinctInstance"|"memberOf"

/// An object representing a constraint on task placement. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide*.
///
///   If you're using the Fargate launch type, task placement constraints aren't supported.
open class ServicePlacementConstraint {
    Expression: (String|Mapping)?
    Type: PlacementConstraintType|Mapping
}

typealias PlacementStrategyType = "binpack"|"random"|"spread"

/// The task placement strategy for a task or service. For more information, see [Task placement strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html) in the *Amazon Elastic Container Service Developer Guide*.
open class ServicePlacementStrategy {
    Field: (String|Mapping)?
    Type: PlacementStrategyType|Mapping
}

/// An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
///
///   +  To inject sensitive data into your containers as environment variables, use the ``secrets`` container definition parameter.
///   +  To reference sensitive information in the log configuration of a container, use the ``secretOptions`` container definition parameter.
///   
///  For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
open class ServiceSecret {
    Name: String|Mapping
    ValueFrom: String|Mapping
}

/// Each alias ("endpoint") is a fully-qualified name and port number that other tasks ("clients") can use to connect to this service.
///
///  Each name and port mapping must be unique within the namespace.
///  Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
open class ServiceServiceConnectClientAlias {
    DnsName: (String|Mapping)?
    Port: Int|Mapping
}

/// The Service Connect configuration of your Amazon ECS service. The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace.
///
///  Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
open class ServiceServiceConnectConfiguration {
    Enabled: Boolean|Mapping
    LogConfiguration: (ServiceLogConfiguration)?
    Namespace: (String|Mapping)?
    Services: (Listing<ServiceServiceConnectService>)?
}

/// The Service Connect service object configuration. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
open class ServiceServiceConnectService {
    ClientAliases: (Listing<ServiceServiceConnectClientAlias>)?
    DiscoveryName: (String|Mapping)?
    IngressPortOverride: (Int|Mapping)?
    PortName: String|Mapping
    Timeout: (ServiceTimeoutConfiguration)?
    Tls: (ServiceServiceConnectTlsConfiguration)?
}

/// The certificate root authority that secures your service.
open class ServiceServiceConnectTlsCertificateAuthority {
    AwsPcaAuthorityArn: (String|Mapping)?
}

/// The key that encrypts and decrypts your resources for Service Connect TLS.
open class ServiceServiceConnectTlsConfiguration {
    IssuerCertificateAuthority: ServiceServiceConnectTlsCertificateAuthority
    KmsKey: (String|Mapping)?
    RoleArn: (String|Mapping)?
}

/// The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. These settings are used to create each Amazon EBS volume, with one volume created for each task in the service. For information about the supported launch types and operating systems, see [Supported operating systems and launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-volumes.html#ebs-volumes-configuration) in the*Amazon Elastic Container Service Developer Guide*.
///
///  Many of these parameters map 1:1 with the Amazon EBS ``CreateVolume`` API request parameters.
open class ServiceServiceManagedEBSVolumeConfiguration {
    Encrypted: (Boolean|Mapping)?
    FilesystemType: (String|Mapping)?
    Iops: (Int|Mapping)?
    KmsKeyId: (String|Mapping)?
    RoleArn: String|Mapping
    SizeInGiB: (Int|Mapping)?
    SnapshotId: (String|Mapping)?
    TagSpecifications: (Listing<ServiceEBSTagSpecification>)?
    Throughput: (Int|Mapping)?
    VolumeInitializationRate: (Int|Mapping)?
    VolumeType: (String|Mapping)?
}

/// The details for the service registry.
///
///  Each service may be associated with one service registry. Multiple service registries for each service are not supported.
///  When you add, update, or remove the service registries configuration, Amazon ECS starts a new deployment. New tasks are registered and deregistered to the updated service registry configuration.
open class ServiceServiceRegistry {
    ContainerName: (String|Mapping)?
    ContainerPort: (Int|Mapping)?
    Port: (Int|Mapping)?
    RegistryArn: (String|Mapping)?
}

/// The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume.
open class ServiceServiceVolumeConfiguration {
    ManagedEBSVolume: (ServiceServiceManagedEBSVolumeConfiguration)?
    Name: String|Mapping
}

/// The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value. You define them.
///
///  The following basic restrictions apply to tags:
///   +  Maximum number of tags per resource - 50
///   +  For each resource, each tag key must be unique, and each tag key can have only one value.
///   +  Maximum key length - 128 Unicode characters in UTF-8
///   +  Maximum value length - 256 Unicode characters in UTF-8
///   +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
///   +  Tag keys and values are case-sensitive.
///   +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
open class ServiceTag {
    Key: (String|Mapping)?
    Value: (String|Mapping)?
}

/// An object that represents the timeout configurations for Service Connect.
///
///   If ``idleTimeout`` is set to a time that is less than ``perRequestTimeout``, the connection will close when the ``idleTimeout`` is reached and not the ``perRequestTimeout``.
open class ServiceTimeoutConfiguration {
    IdleTimeoutSeconds: (Int|Mapping)?
    PerRequestTimeoutSeconds: (Int|Mapping)?
}

/// The VPC Lattice configuration for your service that holds the information for the target group(s) Amazon ECS tasks will be registered to.
open class ServiceVpcLatticeConfiguration {
    PortName: String|Mapping
    RoleArn: String|Mapping
    TargetGroupArn: String|Mapping
}

/// The ``AWS::ECS::Service`` resource creates an Amazon Elastic Container Service (Amazon ECS) service that runs and maintains the requested number of tasks and associated load balancers.
///
///   The stack update fails if you change any properties that require replacement and at least one ECS Service Connect ``ServiceConnectConfiguration`` property the is configured. This is because AWS CloudFormation creates the replacement service first, but each ``ServiceConnectService`` must have a name that is unique in the namespace.
///    Starting April 15, 2023, AWS; will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, ECS, or EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service.
open class Service extends cloudformation.Resource {

    Type = "AWS::ECS::Service"


    /// Indicates whether to use Availability Zone rebalancing for the service.
    ///
    ///  For more information, see [Balancing an Amazon ECS service across Availability Zones](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-rebalancing.html) in the *Amazon Elastic Container Service Developer Guide*.
    hidden AvailabilityZoneRebalancing: (ServiceAvailabilityZoneRebalancing|Mapping)?

    /// The capacity provider strategy to use for the service.
    ///
    ///  If a ``capacityProviderStrategy`` is specified, the ``launchType`` parameter must be omitted. If no ``capacityProviderStrategy`` or ``launchType`` is specified, the ``defaultCapacityProviderStrategy`` for the cluster is used.
    ///  A capacity provider strategy can contain a maximum of 20 capacity providers.
    hidden CapacityProviderStrategy: (Listing<ServiceCapacityProviderStrategyItem>)?

    /// The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on. If you do not specify a cluster, the default cluster is assumed.
    hidden Cluster: (String|Mapping)?

    /// Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.
    hidden DeploymentConfiguration: (ServiceDeploymentConfiguration)?

    /// The deployment controller to use for the service. If no deployment controller is specified, the default value of ``ECS`` is used.
    hidden DeploymentController: (ServiceDeploymentController)?

    /// The number of instantiations of the specified task definition to place and keep running in your service.
    ///
    ///  For new services, if a desired count is not specified, a default value of ``1`` is used. When using the ``DAEMON`` scheduling strategy, the desired count is not required.
    ///  For existing services, if a desired count is not specified, it is omitted from the operation.
    hidden DesiredCount: (Int|Mapping)?

    /// Specifies whether to turn on Amazon ECS managed tags for the tasks within the service. For more information, see [Tagging your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the *Amazon Elastic Container Service Developer Guide*.
    ///
    ///  When you use Amazon ECS managed tags, you need to set the ``propagateTags`` request parameter.
    hidden EnableECSManagedTags: (Boolean|Mapping)?

    /// Determines whether the execute command functionality is turned on for the service. If ``true``, the execute command functionality is turned on for all containers in tasks as part of the service.
    hidden EnableExecuteCommand: (Boolean|Mapping)?

    /// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing, VPC Lattice, and container health checks after a task has first started. If you don't specify a health check grace period value, the default value of ``0`` is used. If you don't use any of the health checks, then ``healthCheckGracePeriodSeconds`` is unused.
    ///
    ///  If your service's tasks take a while to start and respond to health checks, you can specify a health check grace period of up to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS service scheduler ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.
    hidden HealthCheckGracePeriodSeconds: (Int|Mapping)?

    /// The launch type on which to run your service. For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic Container Service Developer Guide*.
    hidden LaunchType: (ServiceLaunchType|Mapping)?

    /// A list of load balancer objects to associate with the service. If you specify the ``Role`` property, ``LoadBalancers`` must be specified as well. For information about the number of load balancers that you can specify per service, see [Service Load Balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the *Amazon Elastic Container Service Developer Guide*.
    hidden LoadBalancers: (Listing<ServiceLoadBalancer>)?

    /// The network configuration for the service. This parameter is required for task definitions that use the ``awsvpc`` network mode to receive their own elastic network interface, and it is not supported for other network modes. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide*.
    hidden NetworkConfiguration: (ServiceNetworkConfiguration)?

    /// An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.
    hidden PlacementConstraints: (Listing<ServicePlacementConstraint>)?

    /// The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules for each service.
    hidden PlacementStrategies: (Listing<ServicePlacementStrategy>)?

    /// The platform version that your tasks in the service are running on. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the ``LATEST`` platform version is used. For more information, see [platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide*.
    hidden PlatformVersion: (String|Mapping)?

    /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action.
    ///
    ///  You must set this to a value other than ``NONE`` when you use Cost Explorer. For more information, see [Amazon ECS usage reports](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/usage-reports.html) in the *Amazon Elastic Container Service Developer Guide*.
    ///  The default is ``NONE``.
    hidden PropagateTags: (ServicePropagateTags|Mapping)?

    /// The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is only permitted if you are using a load balancer with your service and your task definition doesn't use the ``awsvpc`` network mode. If you specify the ``role`` parameter, you must also specify a load balancer object with the ``loadBalancers`` parameter.
    ///
    ///   If your account has already created the Amazon ECS service-linked role, that role is used for your service unless you specify a role here. The service-linked role is required if your task definition uses the ``awsvpc`` network mode or if the service is configured to use service discovery, an external deployment controller, multiple target groups, or Elastic Inference accelerators in which case you don't specify a role here. For more information, see [Using service-linked roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html) in the *Amazon Elastic Container Service Developer Guide*.
    ///   If your specified role has a path other than ``/``, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path. For example, if a role with the name ``bar`` has a path of ``/foo/`` then you would specify ``/foo/bar`` as the role name. For more information, see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names) in the *IAM User Guide*.
    hidden Role: (String|Mapping)?

    /// The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
    ///
    ///  There are two service scheduler strategies available:
    ///   +   ``REPLICA``-The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is required if the service uses the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types.
    ///   +   ``DAEMON``-The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that don't meet the placement constraints. When you're using this strategy, you don't need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies.
    ///   Tasks using the Fargate launch type or the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types don't support the ``DAEMON`` scheduling strategy.
    hidden SchedulingStrategy: (ServiceSchedulingStrategy|Mapping)?

    /// The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace.
    ///
    ///  Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
    hidden ServiceConnectConfiguration: (ServiceServiceConnectConfiguration)?

    /// The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a Region or across multiple Regions.
    ///
    ///   The stack update fails if you change any properties that require replacement and the ``ServiceName`` is configured. This is because AWS CloudFormation creates the replacement service first, but each ``ServiceName`` must be unique in the cluster.
    hidden ServiceName: (String|Mapping)?

    /// The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
    ///
    ///   Each service may be associated with one service registry. Multiple service registries for each service isn't supported.
    hidden ServiceRegistries: (Listing<ServiceServiceRegistry>)?

    /// The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. When a service is deleted, the tags are deleted as well.
    ///
    ///  The following basic restrictions apply to tags:
    ///   +  Maximum number of tags per resource - 50
    ///   +  For each resource, each tag key must be unique, and each tag key can have only one value.
    ///   +  Maximum key length - 128 Unicode characters in UTF-8
    ///   +  Maximum value length - 256 Unicode characters in UTF-8
    ///   +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///   +  Tag keys and values are case-sensitive.
    ///   +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    hidden Tags: (Listing<ServiceTag>)?

    /// The ``family`` and ``revision`` (``family:revision``) or full ARN of the task definition to run in your service. If a ``revision`` isn't specified, the latest ``ACTIVE`` revision is used.
    ///
    ///  A task definition must be specified if the service uses either the ``ECS`` or ``CODE_DEPLOY`` deployment controllers.
    ///  For more information about deployment types, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html).
    hidden TaskDefinition: (String|Mapping)?

    /// The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume.
    hidden VolumeConfigurations: (Listing<ServiceServiceVolumeConfiguration>)?

    /// The VPC Lattice configuration for the service being created.
    hidden VpcLatticeConfigurations: (Listing<ServiceVpcLatticeConfiguration>)?

    Properties {
        ["AvailabilityZoneRebalancing"] = if (AvailabilityZoneRebalancing == null) null else AvailabilityZoneRebalancing
        ["CapacityProviderStrategy"] = if (CapacityProviderStrategy == null) null else CapacityProviderStrategy
        ["Cluster"] = if (Cluster == null) null else Cluster
        ["DeploymentConfiguration"] = if (DeploymentConfiguration == null) null else DeploymentConfiguration
        ["DeploymentController"] = if (DeploymentController == null) null else DeploymentController
        ["DesiredCount"] = if (DesiredCount == null) null else DesiredCount
        ["EnableECSManagedTags"] = if (EnableECSManagedTags == null) null else EnableECSManagedTags
        ["EnableExecuteCommand"] = if (EnableExecuteCommand == null) null else EnableExecuteCommand
        ["HealthCheckGracePeriodSeconds"] = if (HealthCheckGracePeriodSeconds == null) null else HealthCheckGracePeriodSeconds
        ["LaunchType"] = if (LaunchType == null) null else LaunchType
        ["LoadBalancers"] = if (LoadBalancers == null) null else LoadBalancers
        ["NetworkConfiguration"] = if (NetworkConfiguration == null) null else NetworkConfiguration
        ["PlacementConstraints"] = if (PlacementConstraints == null) null else PlacementConstraints
        ["PlacementStrategies"] = if (PlacementStrategies == null) null else PlacementStrategies
        ["PlatformVersion"] = if (PlatformVersion == null) null else PlatformVersion
        ["PropagateTags"] = if (PropagateTags == null) null else PropagateTags
        ["Role"] = if (Role == null) null else Role
        ["SchedulingStrategy"] = if (SchedulingStrategy == null) null else SchedulingStrategy
        ["ServiceConnectConfiguration"] = if (ServiceConnectConfiguration == null) null else ServiceConnectConfiguration
        ["ServiceName"] = if (ServiceName == null) null else ServiceName
        ["ServiceRegistries"] = if (ServiceRegistries == null) null else ServiceRegistries
        ["Tags"] = if (Tags == null) null else Tags
        ["TaskDefinition"] = if (TaskDefinition == null) null else TaskDefinition
        ["VolumeConfigurations"] = if (VolumeConfigurations == null) null else VolumeConfigurations
        ["VpcLatticeConfigurations"] = if (VpcLatticeConfigurations == null) null else VpcLatticeConfigurations
    }

}


typealias ServiceAvailabilityZoneRebalancing = "ENABLED"|"DISABLED"

typealias ServiceLaunchType = "EC2"|"FARGATE"|"EXTERNAL"

typealias ServicePropagateTags = "SERVICE"|"TASK_DEFINITION"

typealias ServiceSchedulingStrategy = "DAEMON"|"REPLICA"
