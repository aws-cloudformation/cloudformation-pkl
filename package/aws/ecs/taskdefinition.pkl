/// AWS::ECS::TaskDefinition
///
/// Generated by rain build --pkl-class AWS::ECS::TaskDefinition
module aws.ecs.taskdefinition

import "../../cloudformation.pkl"

typealias AuthorizationConfigIAM = "ENABLED"|"DISABLED"

/// The authorization configuration details for the Amazon EFS file system.
open class TaskDefinitionAuthorizationConfig {
    AccessPointId: (String|Mapping)?
    IAM: (AuthorizationConfigIAM|Mapping)?
}

typealias TaskDefinitionContainerDefinitionDockerLabels = Mapping<String, Any>

/// The ``ContainerDefinition`` property specifies a container definition. Container definitions are used in task definitions to describe the different containers that are launched as part of a task.
open class TaskDefinitionContainerDefinition {
    Command: (Listing<String|Mapping>)?
    Cpu: (Int|Mapping)?
    CredentialSpecs: (Listing<String|Mapping>)?
    DependsOn: (Listing<TaskDefinitionContainerDependency>)?
    DisableNetworking: (Boolean|Mapping)?
    DnsSearchDomains: (Listing<String|Mapping>)?
    DnsServers: (Listing<String|Mapping>)?
    DockerLabels: (TaskDefinitionContainerDefinitionDockerLabels)?
    DockerSecurityOptions: (Listing<String|Mapping>)?
    EntryPoint: (Listing<String|Mapping>)?
    Environment: (Listing<TaskDefinitionKeyValuePair>)?
    EnvironmentFiles: (Listing<TaskDefinitionEnvironmentFile>)?
    Essential: (Boolean|Mapping)?
    ExtraHosts: (Listing<TaskDefinitionHostEntry>)?
    FirelensConfiguration: (TaskDefinitionFirelensConfiguration)?
    HealthCheck: (TaskDefinitionHealthCheck)?
    Hostname: (String|Mapping)?
    Image: String|Mapping
    Interactive: (Boolean|Mapping)?
    Links: (Listing<String|Mapping>)?
    LinuxParameters: (TaskDefinitionLinuxParameters)?
    LogConfiguration: (TaskDefinitionLogConfiguration)?
    Memory: (Int|Mapping)?
    MemoryReservation: (Int|Mapping)?
    MountPoints: (Listing<TaskDefinitionMountPoint>)?
    Name: String|Mapping
    PortMappings: (Listing<TaskDefinitionPortMapping>)?
    Privileged: (Boolean|Mapping)?
    PseudoTerminal: (Boolean|Mapping)?
    ReadonlyRootFilesystem: (Boolean|Mapping)?
    RepositoryCredentials: (TaskDefinitionRepositoryCredentials)?
    ResourceRequirements: (Listing<TaskDefinitionResourceRequirement>)?
    Secrets: (Listing<TaskDefinitionSecret>)?
    StartTimeout: (Int|Mapping)?
    StopTimeout: (Int|Mapping)?
    SystemControls: (Listing<TaskDefinitionSystemControl>)?
    Ulimits: (Listing<TaskDefinitionUlimit>)?
    User: (String|Mapping)?
    VolumesFrom: (Listing<TaskDefinitionVolumeFrom>)?
    WorkingDirectory: (String|Mapping)?
}

/// The ``ContainerDependency`` property specifies the dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
///
///  Your Amazon ECS container instances require at least version 1.26.0 of the container agent to enable container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you are using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
///   For tasks using the Fargate launch type, this parameter requires that the task or service uses platform version 1.3.0 or later.
open class TaskDefinitionContainerDependency {
    Condition: (String|Mapping)?
    ContainerName: (String|Mapping)?
}

/// The ``Device`` property specifies an object representing a container instance host device.
open class TaskDefinitionDevice {
    ContainerPath: (String|Mapping)?
    HostPath: (String|Mapping)?
    Permissions: (Listing<String|Mapping>)?
}

typealias TaskDefinitionDockerVolumeConfigurationDriverOpts = Mapping<String, Any>

typealias TaskDefinitionDockerVolumeConfigurationLabels = Mapping<String, Any>

/// The ``DockerVolumeConfiguration`` property specifies a Docker volume configuration and is used when you use Docker volumes. Docker volumes are only supported when you are using the EC2 launch type. Windows containers only support the use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.
open class TaskDefinitionDockerVolumeConfiguration {
    Autoprovision: (Boolean|Mapping)?
    Driver: (String|Mapping)?
    DriverOpts: (TaskDefinitionDockerVolumeConfigurationDriverOpts)?
    Labels: (TaskDefinitionDockerVolumeConfigurationLabels)?
    Scope: (String|Mapping)?
}

typealias EFSVolumeConfigurationTransitEncryption = "ENABLED"|"DISABLED"

/// This parameter is specified when you're using an Amazon Elastic File System file system for task storage. For more information, see [Amazon EFS volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
open class TaskDefinitionEFSVolumeConfiguration {
    AuthorizationConfig: (TaskDefinitionAuthorizationConfig)?
    FilesystemId: String|Mapping
    RootDirectory: (String|Mapping)?
    TransitEncryption: (EFSVolumeConfigurationTransitEncryption|Mapping)?
    TransitEncryptionPort: (Int|Mapping)?
}

/// A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a ``.env`` file extension. Each line in an environment file should contain an environment variable in ``VARIABLE=VALUE`` format. Lines beginning with ``#`` are treated as comments and are ignored.
///
///  If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Use a file to pass environment variables to a container](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/use-environment-file.html) in the *Amazon Elastic Container Service Developer Guide*.
///  Environment variable files are objects in Amazon S3 and all Amazon S3 security considerations apply. 
///  You must use the following platforms for the Fargate launch type:
///   +  Linux platform version ``1.4.0`` or later.
///   +  Windows platform version ``1.0.0`` or later.
///   
///  Consider the following when using the Fargate launch type:
///   +  The file is handled like a native Docker env-file.
///   +  There is no support for shell escape handling.
///   +  The container entry point interperts the ``VARIABLE`` values.
open class TaskDefinitionEnvironmentFile {
    Type: (String|Mapping)?
    Value: (String|Mapping)?
}

/// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on FARGATElong. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon ECS Developer Guide;*.
///
///   For tasks using the Fargate launch type, the task requires the following platforms:
///   +  Linux platform version ``1.4.0`` or later.
///   +  Windows platform version ``1.0.0`` or later.
open class TaskDefinitionEphemeralStorage {
    SizeInGiB: (Int|Mapping)?
}

/// 
open class TaskDefinitionFSxAuthorizationConfig {
    CredentialsParameter: String|Mapping
    Domain: String|Mapping
}

/// This parameter is specified when you're using [Amazon FSx for Windows File Server](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html) file system for task storage.
///
///  For more information and the input format, see [Amazon FSx for Windows File Server volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
open class TaskDefinitionFSxWindowsFileServerVolumeConfiguration {
    AuthorizationConfig: (TaskDefinitionFSxAuthorizationConfig)?
    FileSystemId: String|Mapping
    RootDirectory: String|Mapping
}

typealias TaskDefinitionFirelensConfigurationOptions = Mapping<String, Any>

/// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
open class TaskDefinitionFirelensConfiguration {
    Options: (TaskDefinitionFirelensConfigurationOptions)?
    Type: (String|Mapping)?
}

/// The ``HealthCheck`` property specifies an object representing a container health check. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image (such as those specified in a parent image or from the image's Dockerfile). This configuration maps to the ``HEALTHCHECK`` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/).
///
///   The Amazon ECS container agent only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor Docker health checks that are embedded in a container image and not specified in the container definition. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image.
///   If a task is run manually, and not as part of a service, the task will continue its lifecycle regardless of its health status. For tasks that are part of a service, if the task reports as unhealthy then the task will be stopped and the service scheduler will replace it.
///  The following are notes about container health check support:
///   +  Container health checks require version 1.17.0 or greater of the Amazon ECS container agent. For more information, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html).
///   +  Container health checks are supported for Fargate tasks if you are using platform version 1.1.0 or greater. For more information, see [Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
///   +  Container health checks are not supported for tasks that are part of a service that is configured to use a Classic Load Balancer.
open class TaskDefinitionHealthCheck {
    Command: (Listing<String|Mapping>)?
    Interval: (Int|Mapping)?
    Retries: (Int|Mapping)?
    StartPeriod: (Int|Mapping)?
    Timeout: (Int|Mapping)?
}

/// The ``HostEntry`` property specifies a hostname and an IP address that are added to the ``/etc/hosts`` file of a container through the ``extraHosts`` parameter of its ``ContainerDefinition`` resource.
open class TaskDefinitionHostEntry {
    Hostname: (String|Mapping)?
    IpAddress: (String|Mapping)?
}

/// The ``HostVolumeProperties`` property specifies details on a container instance bind mount host volume.
open class TaskDefinitionHostVolumeProperties {
    SourcePath: (String|Mapping)?
}

/// Details on an Elastic Inference accelerator. For more information, see [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the *Amazon Elastic Container Service Developer Guide*.
open class TaskDefinitionInferenceAccelerator {
    DeviceName: (String|Mapping)?
    DeviceType: (String|Mapping)?
}

/// The Linux capabilities to add or remove from the default Docker configuration for a container defined in the task definition. For more information about the default capabilities and the non-default available capabilities, see [Runtime privilege and Linux capabilities](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities) in the *Docker run reference*. For more detailed information about these Linux capabilities, see the [capabilities(7)](https://docs.aws.amazon.com/http://man7.org/linux/man-pages/man7/capabilities.7.html) Linux manual page.
open class TaskDefinitionKernelCapabilities {
    Add: (Listing<String|Mapping>)?
    Drop: (Listing<String|Mapping>)?
}

/// A key-value pair object.
open class TaskDefinitionKeyValuePair {
    Name: (String|Mapping)?
    Value: (String|Mapping)?
}

/// The Linux-specific options that are applied to the container, such as Linux [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
open class TaskDefinitionLinuxParameters {
    Capabilities: (TaskDefinitionKernelCapabilities)?
    Devices: (Listing<TaskDefinitionDevice>)?
    InitProcessEnabled: (Boolean|Mapping)?
    MaxSwap: (Int|Mapping)?
    SharedMemorySize: (Int|Mapping)?
    Swappiness: (Int|Mapping)?
    Tmpfs: (Listing<TaskDefinitionTmpfs>)?
}

typealias TaskDefinitionLogConfigurationOptions = Mapping<String, Any>

/// The ``LogConfiguration`` property specifies log configuration options to send to a custom log driver for the container.
open class TaskDefinitionLogConfiguration {
    LogDriver: String|Mapping
    Options: (TaskDefinitionLogConfigurationOptions)?
    SecretOptions: (Listing<TaskDefinitionSecret>)?
}

/// The details for a volume mount point that's used in a container definition.
open class TaskDefinitionMountPoint {
    ContainerPath: (String|Mapping)?
    ReadOnly: (Boolean|Mapping)?
    SourceVolume: (String|Mapping)?
}

typealias PortMappingAppProtocol = "http"|"http2"|"grpc"

/// The ``PortMapping`` property specifies a port mapping. Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.
///
///  If you are using containers in a task with the ``awsvpc`` or ``host`` network mode, exposed ports should be specified using ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
///  After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the ``networkBindings`` section of [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) API responses.
open class TaskDefinitionPortMapping {
    AppProtocol: (PortMappingAppProtocol|Mapping)?
    ContainerPort: (Int|Mapping)?
    ContainerPortRange: (String|Mapping)?
    HostPort: (Int|Mapping)?
    Name: (String|Mapping)?
    Protocol: (String|Mapping)?
}

/// The configuration details for the App Mesh proxy.
///
///  For tasks that use the EC2 launch type, the container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the ``ecs-init`` package to use a proxy configuration. If your container instances are launched from the Amazon ECS optimized AMI version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
open class TaskDefinitionProxyConfiguration {
    ContainerName: String|Mapping
    ProxyConfigurationProperties: (Listing<TaskDefinitionKeyValuePair>)?
    Type: (String|Mapping)?
}

/// The repository credentials for private registry authentication.
open class TaskDefinitionRepositoryCredentials {
    CredentialsParameter: (String|Mapping)?
}

/// The type and amount of a resource to assign to a container. The supported resource types are GPUs and Elastic Inference accelerators. For more information, see [Working with GPUs on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html) or [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the *Amazon Elastic Container Service Developer Guide*
open class TaskDefinitionResourceRequirement {
    Type: String|Mapping
    Value: String|Mapping
}

/// Information about the platform for the Amazon ECS service or task.
///
///  For more information about ``RuntimePlatform``, see [RuntimePlatform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) in the *Amazon Elastic Container Service Developer Guide*.
open class TaskDefinitionRuntimePlatform {
    CpuArchitecture: (String|Mapping)?
    OperatingSystemFamily: (String|Mapping)?
}

/// An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
///
///   +  To inject sensitive data into your containers as environment variables, use the ``secrets`` container definition parameter.
///   +  To reference sensitive information in the log configuration of a container, use the ``secretOptions`` container definition parameter.
///   
///  For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
open class TaskDefinitionSecret {
    Name: String|Mapping
    ValueFrom: String|Mapping
}

/// A list of namespaced kernel parameters to set in the container. This parameter maps to ``Sysctls`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--sysctl`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For example, you can configure ``net.ipv4.tcp_keepalive_time`` setting to maintain longer lived connections.
///
///  We don't recommend that you specify network-related ``systemControls`` parameters for multiple containers in a single task that also uses either the ``awsvpc`` or ``host`` network mode. Doing this has the following disadvantages:
///   +  For tasks that use the ``awsvpc`` network mode including Fargate, if you set ``systemControls`` for any container, it applies to all containers in the task. If you set different ``systemControls`` for multiple containers in a single task, the container that's started last determines which ``systemControls`` take effect.
///   +  For tasks that use the ``host`` network mode, the network namespace ``systemControls`` aren't supported.
///   
///  If you're setting an IPC resource namespace to use for the containers in the task, the following conditions apply to your system controls. For more information, see [IPC mode](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_definition_ipcmode).
///   +  For tasks that use the ``host`` IPC mode, IPC namespace ``systemControls`` aren't supported.
///   +  For tasks that use the ``task`` IPC mode, IPC namespace ``systemControls`` values apply to all containers within a task.
///   
///   This parameter is not supported for Windows containers.
///    This parameter is only supported for tasks that are hosted on FARGATElong if the tasks are using platform version ``1.4.0`` or later (Linux). This isn't supported for Windows containers on Fargate.
open class TaskDefinitionSystemControl {
    Namespace: (String|Mapping)?
    Value: (String|Mapping)?
}

/// The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value. You define them.
///
///  The following basic restrictions apply to tags:
///   +  Maximum number of tags per resource - 50
///   +  For each resource, each tag key must be unique, and each tag key can have only one value.
///   +  Maximum key length - 128 Unicode characters in UTF-8
///   +  Maximum value length - 256 Unicode characters in UTF-8
///   +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
///   +  Tag keys and values are case-sensitive.
///   +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
open class TaskDefinitionTag {
    Key: (String|Mapping)?
    Value: (String|Mapping)?
}

/// The constraint on task placement in the task definition. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide*.
///
///   Task placement constraints aren't supported for tasks run on FARGATElong.
open class TaskDefinitionTaskDefinitionPlacementConstraint {
    Expression: (String|Mapping)?
    Type: String|Mapping
}

/// The container path, mount options, and size of the tmpfs mount.
open class TaskDefinitionTmpfs {
    ContainerPath: (String|Mapping)?
    MountOptions: (Listing<String|Mapping>)?
    Size: Int|Mapping
}

/// The ``ulimit`` settings to pass to the container.
///
///  Amazon ECS tasks hosted on FARGATElong use the default resource limit values set by the operating system with the exception of the ``nofile`` resource limit parameter which FARGATElong overrides. The ``nofile`` resource limit sets a restriction on the number of open files that a container can use. The default ``nofile`` soft limit is ``65535`` and the default hard limit is ``65535``.
///  You can specify the ``ulimit`` settings for a container in a task definition.
open class TaskDefinitionUlimit {
    HardLimit: Int|Mapping
    Name: String|Mapping
    SoftLimit: Int|Mapping
}

/// The data volume configuration for tasks launched using this task definition. Specifying a volume configuration in a task definition is optional. The volume configuration may contain multiple volumes but only one volume configured at launch is supported. Each volume defined in the volume configuration may only specify a ``name`` and one of either ``configuredAtLaunch``, ``dockerVolumeConfiguration``, ``efsVolumeConfiguration``, ``fsxWindowsFileServerVolumeConfiguration``, or ``host``. If an empty volume configuration is specified, by default Amazon ECS uses a host volume. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html).
open class TaskDefinitionVolume {
    ConfiguredAtLaunch: (Boolean|Mapping)?
    DockerVolumeConfiguration: (TaskDefinitionDockerVolumeConfiguration)?
    EFSVolumeConfiguration: (TaskDefinitionEFSVolumeConfiguration)?
    FSxWindowsFileServerVolumeConfiguration: (TaskDefinitionFSxWindowsFileServerVolumeConfiguration)?
    Host: (TaskDefinitionHostVolumeProperties)?
    Name: (String|Mapping)?
}

/// Details on a data volume from another container in the same task definition.
open class TaskDefinitionVolumeFrom {
    ReadOnly: (Boolean|Mapping)?
    SourceContainer: (String|Mapping)?
}

/// Registers a new task definition from the supplied ``family`` and ``containerDefinitions``. Optionally, you can add data volumes to your containers with the ``volumes`` parameter. For more information about task definition parameters and defaults, see [Amazon ECS Task Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the *Amazon Elastic Container Service Developer Guide*.
///
///  You can specify a role for your task with the ``taskRoleArn`` parameter. When you specify a role for a task, its containers can then use the latest versions of the CLI or SDKs to make API requests to the AWS services that are specified in the policy that's associated with the role. For more information, see [IAM Roles for Tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic Container Service Developer Guide*.
///  You can specify a Docker networking mode for the containers in your task definition with the ``networkMode`` parameter. The available network modes correspond to those described in [Network settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#/network-settings) in the Docker run reference. If you specify the ``awsvpc`` network mode, the task is allocated an elastic network interface, and you must specify a NetworkConfiguration when you create a service or run a task with the task definition. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide*.
///   In the following example or examples, the Authorization header contents (``AUTHPARAMS``) must be replaced with an AWS Signature Version 4 signature. For more information, see [Signature Version 4 Signing Process](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html) in the *General Reference*.
///  You only need to learn how to sign HTTP requests if you intend to create them manually. When you use the [](https://docs.aws.amazon.com/cli/) or one of the [SDKs](https://docs.aws.amazon.com/tools/) to make requests to AWS, these tools automatically sign the requests for you, with the access key that you specify when you configure the tools. When you use these tools, you don't have to sign requests yourself.
open class TaskDefinition extends cloudformation.Resource {

    Type = "AWS::ECS::TaskDefinition"


    /// A list of container definitions in JSON format that describe the different containers that make up your task. For more information about container definition parameters and defaults, see [Amazon ECS Task Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the *Amazon Elastic Container Service Developer Guide*.
    hidden ContainerDefinitions: (Listing<TaskDefinitionContainerDefinition>)?

    /// The number of ``cpu`` units used by the task. If you use the EC2 launch type, this field is optional. Any value can be used. If you use the Fargate launch type, this field is required. You must use one of the following values. The value that you choose determines your range of valid values for the ``memory`` parameter.
    ///
    ///  The CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate.
    ///   +  256 (.25 vCPU) - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)
    ///   +  512 (.5 vCPU) - Available ``memory`` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)
    ///   +  1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
    ///   +  2048 (2 vCPU) - Available ``memory`` values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
    ///   +  4096 (4 vCPU) - Available ``memory`` values: 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
    ///   +  8192 (8 vCPU) - Available ``memory`` values: 16 GB and 60 GB in 4 GB increments
    ///  This option requires Linux platform ``1.4.0`` or later.
    ///   +  16384 (16vCPU) - Available ``memory`` values: 32GB and 120 GB in 8 GB increments
    ///  This option requires Linux platform ``1.4.0`` or later.
    hidden Cpu: (String|Mapping)?

    /// The ephemeral storage settings to use for tasks run with the task definition.
    hidden EphemeralStorage: (TaskDefinitionEphemeralStorage)?

    /// The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent permission to make AWS API calls on your behalf. For informationabout the required IAM roles for Amazon ECS, see [IAM roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security-ecs-iam-role-overview.html) in the *Amazon Elastic Container Service Developer Guide*.
    hidden ExecutionRoleArn: (String|Mapping)?

    /// The name of a family that this task definition is registered to. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.
    ///
    ///  A family groups multiple versions of a task definition. Amazon ECS gives the first task definition that you registered to a family a revision number of 1. Amazon ECS gives sequential revision numbers to each task definition that you add.
    ///   To use revision numbers when you update a task definition, specify this property. If you don't specify a value, CFNlong generates a new task definition each time that you update it.
    hidden Family: (String|Mapping)?

    /// The Elastic Inference accelerators to use for the containers in the task.
    hidden InferenceAccelerators: (Listing<TaskDefinitionInferenceAccelerator>)?

    /// The IPC resource namespace to use for the containers in the task. The valid values are ``host``, ``task``, or ``none``. If ``host`` is specified, then all containers within the tasks that specified the ``host`` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance. If ``task`` is specified, all containers within the specified task share the same IPC resources. If ``none`` is specified, then IPC resources within the containers of a task are private and not shared with other containers in a task or on the container instance. If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the *Docker run reference*.
    ///
    ///  If the ``host`` IPC mode is used, be aware that there is a heightened risk of undesired IPC namespace expose. For more information, see [Docker security](https://docs.aws.amazon.com/https://docs.docker.com/engine/security/security/).
    ///  If you are setting namespaced kernel parameters using ``systemControls`` for the containers in the task, the following will apply to your IPC resource namespace. For more information, see [System Controls](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) in the *Amazon Elastic Container Service Developer Guide*.
    ///   +  For tasks that use the ``host`` IPC mode, IPC namespace related ``systemControls`` are not supported.
    ///   +  For tasks that use the ``task`` IPC mode, IPC namespace related ``systemControls`` will apply to all containers within a task.
    ///   
    ///   This parameter is not supported for Windows containers or tasks run on FARGATElong.
    hidden IpcMode: (String|Mapping)?

    /// The amount (in MiB) of memory used by the task.
    ///
    ///  If your tasks runs on Amazon EC2 instances, you must specify either a task-level memory value or a container-level memory value. This field is optional and any value can be used. If a task-level memory value is specified, the container-level memory value is optional. For more information regarding container-level memory and memory reservation, see [ContainerDefinition](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html).
    ///  If your tasks runs on FARGATElong, this field is required. You must use one of the following values. The value you choose determines your range of valid values for the ``cpu`` parameter.
    ///   +  512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available ``cpu`` values: 256 (.25 vCPU)
    ///   +  1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available ``cpu`` values: 512 (.5 vCPU)
    ///   +  2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available ``cpu`` values: 1024 (1 vCPU)
    ///   +  Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available ``cpu`` values: 2048 (2 vCPU)
    ///   +  Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available ``cpu`` values: 4096 (4 vCPU)
    ///   +  Between 16 GB and 60 GB in 4 GB increments - Available ``cpu`` values: 8192 (8 vCPU)
    ///  This option requires Linux platform ``1.4.0`` or later.
    ///   +  Between 32GB and 120 GB in 8 GB increments - Available ``cpu`` values: 16384 (16 vCPU)
    ///  This option requires Linux platform ``1.4.0`` or later.
    hidden Memory: (String|Mapping)?

    /// The Docker networking mode to use for the containers in the task. The valid values are ``none``, ``bridge``, ``awsvpc``, and ``host``. If no network mode is specified, the default is ``bridge``.
    ///
    ///  For Amazon ECS tasks on Fargate, the ``awsvpc`` network mode is required. For Amazon ECS tasks on Amazon EC2 Linux instances, any network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows instances, ``<default>`` or ``awsvpc`` can be used. If the network mode is set to ``none``, you cannot specify port mappings in your container definitions, and the tasks containers do not have external connectivity. The ``host`` and ``awsvpc`` network modes offer the highest networking performance for containers because they use the EC2 network stack instead of the virtualized network stack provided by the ``bridge`` mode.
    ///  With the ``host`` and ``awsvpc`` network modes, exposed container ports are mapped directly to the corresponding host port (for the ``host`` network mode) or the attached elastic network interface port (for the ``awsvpc`` network mode), so you cannot take advantage of dynamic host port mappings. 
    ///   When using the ``host`` network mode, you should not run containers using the root user (UID 0). It is considered best practice to use a non-root user.
    ///   If the network mode is ``awsvpc``, the task is allocated an elastic network interface, and you must specify a NetworkConfiguration value when you create a service or run a task with the task definition. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide*.
    ///  If the network mode is ``host``, you cannot run multiple instantiations of the same task on a single container instance when port mappings are used.
    ///  For more information, see [Network settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#network-settings) in the *Docker run reference*.
    hidden NetworkMode: (String|Mapping)?

    /// The process namespace to use for the containers in the task. The valid values are ``host`` or ``task``. On Fargate for Linux containers, the only valid value is ``task``. For example, monitoring sidecars might need ``pidMode`` to access information about other containers running in the same task.
    ///
    ///  If ``host`` is specified, all containers within the tasks that specified the ``host`` PID mode on the same container instance share the same process namespace with the host Amazon EC2 instance.
    ///  If ``task`` is specified, all containers within the specified task share the same process namespace.
    ///  If no value is specified, the default is a private namespace for each container. For more information, see [PID settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the *Docker run reference*.
    ///  If the ``host`` PID mode is used, there's a heightened risk of undesired process namespace exposure. For more information, see [Docker security](https://docs.aws.amazon.com/https://docs.docker.com/engine/security/security/).
    ///   This parameter is not supported for Windows containers.
    ///    This parameter is only supported for tasks that are hosted on FARGATElong if the tasks are using platform version ``1.4.0`` or later (Linux). This isn't supported for Windows containers on Fargate.
    hidden PidMode: (String|Mapping)?

    /// An array of placement constraint objects to use for tasks.
    ///
    ///   This parameter isn't supported for tasks run on FARGATElong.
    hidden PlacementConstraints: (Listing<TaskDefinitionTaskDefinitionPlacementConstraint>)?

    /// The configuration details for the App Mesh proxy.
    ///
    ///  Your Amazon ECS container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the ``ecs-init`` package to use a proxy configuration. If your container instances are launched from the Amazon ECS optimized AMI version ``20190301`` or later, they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
    hidden ProxyConfiguration: (TaskDefinitionProxyConfiguration)?

    /// The task launch types the task definition was validated against. The valid values are ``EC2``, ``FARGATE``, and ``EXTERNAL``. For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic Container Service Developer Guide*.
    hidden RequiresCompatibilities: (Listing<String|Mapping>)?

    /// The operating system that your tasks definitions run on. A platform family is specified only for tasks using the Fargate launch type.
    hidden RuntimePlatform: (TaskDefinitionRuntimePlatform)?

    /// The metadata that you apply to the task definition to help you categorize and organize them. Each tag consists of a key and an optional value. You define both of them.
    ///
    ///  The following basic restrictions apply to tags:
    ///   +  Maximum number of tags per resource - 50
    ///   +  For each resource, each tag key must be unique, and each tag key can have only one value.
    ///   +  Maximum key length - 128 Unicode characters in UTF-8
    ///   +  Maximum value length - 256 Unicode characters in UTF-8
    ///   +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///   +  Tag keys and values are case-sensitive.
    ///   +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
    hidden Tags: (Listing<TaskDefinitionTag>)?

    /// The short name or full Amazon Resource Name (ARN) of the IAMlong role that grants containers in the task permission to call AWS APIs on your behalf. For informationabout the required IAM roles for Amazon ECS, see [IAM roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security-ecs-iam-role-overview.html) in the *Amazon Elastic Container Service Developer Guide*.
    hidden TaskRoleArn: (String|Mapping)?

    /// The list of data volume definitions for the task. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
    ///
    ///   The ``host`` and ``sourcePath`` parameters aren't supported for tasks run on FARGATElong.
    hidden Volumes: (Listing<TaskDefinitionVolume>)?

    Properties {
        ["ContainerDefinitions"] = if (ContainerDefinitions == null) null else ContainerDefinitions
        ["Cpu"] = if (Cpu == null) null else Cpu
        ["EphemeralStorage"] = if (EphemeralStorage == null) null else EphemeralStorage
        ["ExecutionRoleArn"] = if (ExecutionRoleArn == null) null else ExecutionRoleArn
        ["Family"] = if (Family == null) null else Family
        ["InferenceAccelerators"] = if (InferenceAccelerators == null) null else InferenceAccelerators
        ["IpcMode"] = if (IpcMode == null) null else IpcMode
        ["Memory"] = if (Memory == null) null else Memory
        ["NetworkMode"] = if (NetworkMode == null) null else NetworkMode
        ["PidMode"] = if (PidMode == null) null else PidMode
        ["PlacementConstraints"] = if (PlacementConstraints == null) null else PlacementConstraints
        ["ProxyConfiguration"] = if (ProxyConfiguration == null) null else ProxyConfiguration
        ["RequiresCompatibilities"] = if (RequiresCompatibilities == null) null else RequiresCompatibilities
        ["RuntimePlatform"] = if (RuntimePlatform == null) null else RuntimePlatform
        ["Tags"] = if (Tags == null) null else Tags
        ["TaskRoleArn"] = if (TaskRoleArn == null) null else TaskRoleArn
        ["Volumes"] = if (Volumes == null) null else Volumes
    }

}
