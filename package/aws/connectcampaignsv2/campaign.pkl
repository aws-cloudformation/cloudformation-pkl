/// AWS::ConnectCampaignsV2::Campaign
///
/// Generated by rain build --pkl-class AWS::ConnectCampaignsV2::Campaign
module aws.connectcampaignsv2.campaign

import "../../cloudformation.pkl"

typealias CampaignAgentlessConfig = Dynamic


/// The configuration used for answering machine detection during outbound calls
open class CampaignAnswerMachineDetectionConfig {
    AwaitAnswerMachinePrompt: (Boolean|Mapping)?
    EnableAnswerMachineDetection: Boolean|Mapping
}

typealias CampaignArn = String|Mapping


typealias CampaignBandwidthAllocation = Number|Mapping


typealias CampaignCampaignName = String|Mapping


typealias CampaignCapacity = Number|Mapping


/// The possible types of channel subtype config parameters
open class CampaignChannelSubtypeConfig {
    Email: (CampaignEmailChannelSubtypeConfig)?
    Sms: (CampaignSmsChannelSubtypeConfig)?
    Telephony: (CampaignTelephonyChannelSubtypeConfig)?
}

/// Communication Limit
open class CampaignCommunicationLimit {
    Frequency: Int|Mapping
    MaxCountPerRecipient: Int|Mapping
    Unit: CampaignCommunicationLimitTimeUnit
}

typealias CampaignCommunicationLimitList = Listing<(CampaignCommunicationLimit)?>


typealias CampaignCommunicationLimitTimeUnit = String|Mapping


/// Communication limits
open class CampaignCommunicationLimits {
    CommunicationLimitList: (CampaignCommunicationLimitList)?
}

/// Communication limits config
open class CampaignCommunicationLimitsConfig {
    AllChannelsSubtypes: (CampaignCommunicationLimits)?
}

/// Campaign communication time config
open class CampaignCommunicationTimeConfig {
    Email: (CampaignTimeWindow)?
    LocalTimeZoneConfig: CampaignLocalTimeZoneConfig
    Sms: (CampaignTimeWindow)?
    Telephony: (CampaignTimeWindow)?
}

typealias CampaignContactFlowId = String|Mapping


/// Daily Hour
open class CampaignDailyHour {
    Key: (CampaignDayOfWeek)?
    Value: (CampaignTimeRangeList)?
}

typealias CampaignDailyHours = Listing<(CampaignDailyHour)?>


typealias CampaignDayOfWeek = String|Mapping


typealias CampaignEmailAddress = String|Mapping


/// Email Channel Subtype config
open class CampaignEmailChannelSubtypeConfig {
    Capacity: (CampaignCapacity)?
    DefaultOutboundConfig: CampaignEmailOutboundConfig
    OutboundMode: CampaignEmailOutboundMode
}

/// Default SMS outbound config
open class CampaignEmailOutboundConfig {
    ConnectSourceEmailAddress: CampaignEmailAddress
    SourceEmailAddressDisplayName: (CampaignSourceEmailAddressDisplayName)?
    WisdomTemplateArn: CampaignArn
}

/// Email Outbound Mode
open class CampaignEmailOutboundMode {
    AgentlessConfig: (CampaignAgentlessConfig)?
}

/// The event trigger of the campaign
open class CampaignEventTrigger {
    CustomerProfilesDomainArn: (CampaignArn)?
}

typealias CampaignInstanceId = String|Mapping


typealias CampaignIso8601Date = String|Mapping


typealias CampaignIso8601Duration = String|Mapping


typealias CampaignIso8601Time = String|Mapping


/// Local time zone config
open class CampaignLocalTimeZoneConfig {
    DefaultTimeZone: (CampaignTimeZone)?
    LocalTimeZoneDetection: (CampaignLocalTimeZoneDetection)?
}

typealias CampaignLocalTimeZoneDetection = Listing<(CampaignLocalTimeZoneDetectionType)?>


typealias CampaignLocalTimeZoneDetectionType = String|Mapping


/// Open Hours config
open class CampaignOpenHours {
    DailyHours: CampaignDailyHours
}

/// Predictive config
open class CampaignPredictiveConfig {
    BandwidthAllocation: CampaignBandwidthAllocation
}

/// Progressive config
open class CampaignProgressiveConfig {
    BandwidthAllocation: CampaignBandwidthAllocation
}

typealias CampaignQueueId = String|Mapping


/// Restricted period
open class CampaignRestrictedPeriod {
    EndDate: CampaignIso8601Date
    Name: (String|Mapping)?
    StartDate: CampaignIso8601Date
}

typealias CampaignRestrictedPeriodList = Listing<(CampaignRestrictedPeriod)?>


/// Restricted period config
open class CampaignRestrictedPeriods {
    RestrictedPeriodList: (CampaignRestrictedPeriodList)?
}

/// Campaign schedule
open class CampaignSchedule {
    EndTime: CampaignTimeStamp
    RefreshFrequency: (CampaignIso8601Duration)?
    StartTime: CampaignTimeStamp
}

/// SMS Channel Subtype config
open class CampaignSmsChannelSubtypeConfig {
    Capacity: (CampaignCapacity)?
    DefaultOutboundConfig: CampaignSmsOutboundConfig
    OutboundMode: CampaignSmsOutboundMode
}

/// Default SMS outbound config
open class CampaignSmsOutboundConfig {
    ConnectSourcePhoneNumberArn: CampaignArn
    WisdomTemplateArn: CampaignArn
}

/// SMS Outbound Mode
open class CampaignSmsOutboundMode {
    AgentlessConfig: (CampaignAgentlessConfig)?
}

/// The possible source of the campaign
open class CampaignSource {
    CustomerProfilesSegmentArn: (CampaignArn)?
    EventTrigger: (CampaignEventTrigger)?
}

typealias CampaignSourceEmailAddressDisplayName = String|Mapping


typealias CampaignSourcePhoneNumber = String|Mapping


/// 
open class CampaignTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// Telephony Channel Subtype config
open class CampaignTelephonyChannelSubtypeConfig {
    Capacity: (CampaignCapacity)?
    ConnectQueueId: (CampaignQueueId)?
    DefaultOutboundConfig: CampaignTelephonyOutboundConfig
    OutboundMode: CampaignTelephonyOutboundMode
}

/// Default Telephone Outbound config
open class CampaignTelephonyOutboundConfig {
    AnswerMachineDetectionConfig: (CampaignAnswerMachineDetectionConfig)?
    ConnectContactFlowId: CampaignContactFlowId
    ConnectSourcePhoneNumber: (CampaignSourcePhoneNumber)?
}

/// Telephony Outbound Mode
open class CampaignTelephonyOutboundMode {
    AgentlessConfig: (CampaignAgentlessConfig)?
    PredictiveConfig: (CampaignPredictiveConfig)?
    ProgressiveConfig: (CampaignProgressiveConfig)?
}

/// Time range in 24 hour format
open class CampaignTimeRange {
    EndTime: CampaignIso8601Time
    StartTime: CampaignIso8601Time
}

typealias CampaignTimeRangeList = Listing<(CampaignTimeRange)?>


typealias CampaignTimeStamp = String|Mapping


/// Time window config
open class CampaignTimeWindow {
    OpenHours: CampaignOpenHours
    RestrictedPeriods: (CampaignRestrictedPeriods)?
}

typealias CampaignTimeZone = String|Mapping


/// Definition of AWS::ConnectCampaignsV2::Campaign Resource Type
open class Campaign extends cloudformation.Resource {

    Type = "AWS::ConnectCampaignsV2::Campaign"


    /// 
    hidden ChannelSubtypeConfig: CampaignChannelSubtypeConfig

    /// 
    hidden CommunicationLimitsOverride: (CampaignCommunicationLimitsConfig)?

    /// 
    hidden CommunicationTimeConfig: (CampaignCommunicationTimeConfig)?

    /// 
    hidden ConnectCampaignFlowArn: (CampaignArn)?

    /// 
    hidden ConnectInstanceId: CampaignInstanceId

    /// 
    hidden Name: CampaignCampaignName

    /// 
    hidden Schedule: (CampaignSchedule)?

    /// 
    hidden Source: (CampaignSource)?

    /// One or more tags.
    hidden Tags: (Listing<CampaignTag>)?

    Properties {
        ["ChannelSubtypeConfig"] = if (ChannelSubtypeConfig == null) null else ChannelSubtypeConfig
        ["CommunicationLimitsOverride"] = if (CommunicationLimitsOverride == null) null else CommunicationLimitsOverride
        ["CommunicationTimeConfig"] = if (CommunicationTimeConfig == null) null else CommunicationTimeConfig
        ["ConnectCampaignFlowArn"] = if (ConnectCampaignFlowArn == null) null else ConnectCampaignFlowArn
        ["ConnectInstanceId"] = if (ConnectInstanceId == null) null else ConnectInstanceId
        ["Name"] = if (Name == null) null else Name
        ["Schedule"] = if (Schedule == null) null else Schedule
        ["Source"] = if (Source == null) null else Source
        ["Tags"] = if (Tags == null) null else Tags
    }

}
