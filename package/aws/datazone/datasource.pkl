/// AWS::DataZone::DataSource
///
/// Generated by rain build --pkl-class AWS::DataZone::DataSource
module aws.datazone.datasource

import "../../cloudformation.pkl"

typealias DataSourceAccountId = String|Mapping


typealias DataSourceDataAccessRole = String|Mapping


typealias DataSourceDataSourceConfigurationInput = DataSourceDataSourceConfigurationInputGlueRunConfiguration|DataSourceDataSourceConfigurationInputRedshiftRunConfiguration|DataSourceDataSourceConfigurationInputSageMakerRunConfiguration


/// 
open class DataSourceDataSourceConfigurationInputGlueRunConfiguration {
    GlueRunConfiguration: (DataSourceGlueRunConfigurationInput)?
}

/// 
open class DataSourceDataSourceConfigurationInputRedshiftRunConfiguration {
    RedshiftRunConfiguration: (DataSourceRedshiftRunConfigurationInput)?
}

/// 
open class DataSourceDataSourceConfigurationInputSageMakerRunConfiguration {
    SageMakerRunConfiguration: (DataSourceSageMakerRunConfigurationInput)?
}

typealias DataSourceDataSourceStatus = String|Mapping


typealias DataSourceEnableSetting = String|Mapping


/// The search filter expression.
open class DataSourceFilterExpression {
    Expression: String|Mapping
    Type: DataSourceFilterExpressionType
}

typealias DataSourceFilterExpressionType = String|Mapping


/// The details of a metadata form.
open class DataSourceFormInput {
    Content: (String|Mapping)?
    FormName: DataSourceFormName
    TypeIdentifier: (String(matches(Regex(#"^(?!\.)[\w\.]*\w$"#)))|Mapping)?
    TypeRevision: (DataSourceTypeRevision)?
}

typealias DataSourceFormName = String|Mapping


/// 
open class DataSourceGlueRunConfigurationInput {
    AutoImportDataQualityResult: (Boolean|Mapping)?
    DataAccessRole: (DataSourceDataAccessRole)?
    RelationalFilterConfigurations: Listing<DataSourceRelationalFilterConfiguration>
}

/// The recommendation to be updated as part of the UpdateDataSource action.
open class DataSourceRecommendationConfiguration {
    EnableBusinessNameGeneration: (Boolean|Mapping)?
}

/// The name of an Amazon Redshift cluster.
open class DataSourceRedshiftClusterStorage {
    ClusterName: String(matches(Regex(#"^[0-9a-z].[a-z0-9\-]*$"#)))|Mapping
}

/// The ARN of a secret manager for an Amazon Redshift cluster.
open class DataSourceRedshiftCredentialConfiguration {
    SecretManagerArn: String(matches(Regex(#"^arn:aws[^:]*:secretsmanager:[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]:\d{12}:secret:.*$"#)))|Mapping
}

/// The configuration details of the Amazon Redshift data source.
open class DataSourceRedshiftRunConfigurationInput {
    DataAccessRole: (DataSourceDataAccessRole)?
    RedshiftCredentialConfiguration: DataSourceRedshiftCredentialConfiguration
    RedshiftStorage: DataSourceRedshiftStorage
    RelationalFilterConfigurations: DataSourceRelationalFilterConfigurations
}

/// The details of the Amazon Redshift Serverless workgroup storage.
open class DataSourceRedshiftServerlessStorage {
    WorkgroupName: String(matches(Regex(#"^[a-z0-9-]+$"#)))|Mapping
}

typealias DataSourceRedshiftStorage = DataSourceRedshiftStorageRedshiftClusterSource|DataSourceRedshiftStorageRedshiftServerlessSource


/// The details of the Amazon Redshift cluster source.
open class DataSourceRedshiftStorageRedshiftClusterSource {
    RedshiftClusterSource: DataSourceRedshiftClusterStorage
}

/// The details of the Amazon Redshift Serverless workgroup source.
open class DataSourceRedshiftStorageRedshiftServerlessSource {
    RedshiftServerlessSource: DataSourceRedshiftServerlessStorage
}

typealias DataSourceRegion = String|Mapping


/// The relational filter configuration for the data source.
open class DataSourceRelationalFilterConfiguration {
    DatabaseName: String|Mapping
    FilterExpressions: (Listing<DataSourceFilterExpression>)?
    SchemaName: (String|Mapping)?
}

typealias DataSourceRelationalFilterConfigurations = Listing<(DataSourceRelationalFilterConfiguration)?>


/// The configuration details of the Amazon SageMaker data source.
open class DataSourceSageMakerRunConfigurationInput {
    TrackingAssets: DataSourceTrackingAssets
}

/// The schedule of the data source runs.
open class DataSourceScheduleConfiguration {
    Schedule: (String(matches(Regex(#"cron\((\b[0-5]?[0-9]\b) (\b2[0-3]\b|\b[0-1]?[0-9]\b) (.*){1,5} (.*){1,5} (.*){1,5} (.*){1,5}\)"#)))|Mapping)?
    Timezone: (DataSourceTimezone)?
}

typealias DataSourceTimezone = String|Mapping


typealias DataSourceTrackingAssets = Mapping<String, Any>


typealias DataSourceTypeRevision = String|Mapping


/// A data source is used to import technical metadata of assets (data) from the source databases or data warehouses into Amazon DataZone. 
open class DataSource extends cloudformation.Resource {

    Type = "AWS::DataZone::DataSource"


    /// The metadata forms that are to be attached to the assets that this data source works with.
    hidden AssetFormsInput: (Listing<DataSourceFormInput>)?

    /// Configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
    hidden Configuration: (DataSourceDataSourceConfigurationInput)?

    /// The description of the data source.
    hidden Description: (String|Mapping)?

    /// The ID of the Amazon DataZone domain where the data source is created.
    hidden DomainIdentifier: String(matches(Regex(#"^dzd[-_][a-zA-Z0-9_-]{1,36}$"#)))|Mapping

    /// Specifies whether the data source is enabled.
    hidden EnableSetting: (DataSourceEnableSetting)?

    /// The unique identifier of the Amazon DataZone environment to which the data source publishes assets.
    hidden EnvironmentIdentifier: String|Mapping

    /// The name of the data source.
    hidden Name: String|Mapping

    /// The identifier of the Amazon DataZone project in which you want to add the data source.
    hidden ProjectIdentifier: String|Mapping

    /// Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.
    hidden PublishOnImport: (Boolean|Mapping)?

    /// Specifies whether the business name generation is to be enabled for this data source.
    hidden Recommendation: (DataSourceRecommendationConfiguration)?

    /// The schedule of the data source runs.
    hidden Schedule: (DataSourceScheduleConfiguration)?

    /// The type of the data source.
    hidden TypeProperty: String|Mapping

    Properties {
        ["AssetFormsInput"] = if (AssetFormsInput == null) null else AssetFormsInput
        ["Configuration"] = if (Configuration == null) null else Configuration
        ["Description"] = if (Description == null) null else Description
        ["DomainIdentifier"] = if (DomainIdentifier == null) null else DomainIdentifier
        ["EnableSetting"] = if (EnableSetting == null) null else EnableSetting
        ["EnvironmentIdentifier"] = if (EnvironmentIdentifier == null) null else EnvironmentIdentifier
        ["Name"] = if (Name == null) null else Name
        ["ProjectIdentifier"] = if (ProjectIdentifier == null) null else ProjectIdentifier
        ["PublishOnImport"] = if (PublishOnImport == null) null else PublishOnImport
        ["Recommendation"] = if (Recommendation == null) null else Recommendation
        ["Schedule"] = if (Schedule == null) null else Schedule
        ["Type"] = if (TypeProperty == null) null else TypeProperty
    }

}
