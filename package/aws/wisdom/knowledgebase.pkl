/// AWS::Wisdom::KnowledgeBase
///
/// Generated by rain build --pkl-class AWS::Wisdom::KnowledgeBase
module aws.wisdom.knowledgebase

import "../../cloudformation.pkl"

/// 
open class KnowledgeBaseAppIntegrationsConfiguration {
    AppIntegrationArn: String(matches(Regex(#"^arn:[a-z-]+?:[a-z-]+?:[a-z0-9-]*?:([0-9]{12})?:[a-zA-Z0-9-:/]+$"#)))|Mapping
    ObjectFields: (Listing<String|Mapping>)?
}

/// 
open class KnowledgeBaseBedrockFoundationModelConfiguration {
    ModelArn: String(matches(Regex(#"^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}::foundation-model\/anthropic.claude-3-haiku-20240307-v1:0$"#)))|Mapping
    ParsingPrompt: (Dynamic)?
}

/// 
open class KnowledgeBaseFixedSizeChunkingConfiguration {
    MaxTokens: Number|Mapping
    OverlapPercentage: Number|Mapping
}

/// 
open class KnowledgeBaseHierarchicalChunkingConfiguration {
    LevelConfigurations: Listing<KnowledgeBaseHierarchicalChunkingLevelConfiguration>
    OverlapTokens: Number|Mapping
}

/// 
open class KnowledgeBaseHierarchicalChunkingLevelConfiguration {
    MaxTokens: Number|Mapping
}

typealias KnowledgeBaseKnowledgeBaseType = String|Mapping


typealias KnowledgeBaseManagedSourceConfiguration = KnowledgeBaseManagedSourceConfiguration0


/// 
open class KnowledgeBaseManagedSourceConfiguration0 {
    WebCrawlerConfiguration: KnowledgeBaseWebCrawlerConfiguration
}

/// 
open class KnowledgeBaseRenderingConfiguration {
    TemplateUri: (String|Mapping)?
}

/// 
open class KnowledgeBaseSeedUrl {
    Url: (String(matches(Regex(#"^https?://[A-Za-z0-9][^\s]*$"#)))|Mapping)?
}

/// 
open class KnowledgeBaseSemanticChunkingConfiguration {
    BreakpointPercentileThreshold: Number|Mapping
    BufferSize: Number|Mapping
    MaxTokens: Number|Mapping
}

/// 
open class KnowledgeBaseServerSideEncryptionConfiguration {
    KmsKeyId: (String|Mapping)?
}

typealias KnowledgeBaseSourceConfiguration = KnowledgeBaseSourceConfigurationAppIntegrationsConfiguration|KnowledgeBaseSourceConfigurationManagedSourceConfiguration


/// 
open class KnowledgeBaseSourceConfigurationAppIntegrationsConfiguration {
    AppIntegrations: KnowledgeBaseAppIntegrationsConfiguration
}

/// 
open class KnowledgeBaseSourceConfigurationManagedSourceConfiguration {
    ManagedSourceConfiguration: KnowledgeBaseManagedSourceConfiguration
}

/// 
open class KnowledgeBaseTag {
    Key: String(matches(Regex(#"^(?!aws:)[a-zA-Z+-=._:/]+$"#)))|Mapping
    Value: String|Mapping
}

typealias KnowledgeBaseUrlFilterList = Listing<(KnowledgeBaseUrlFilterPattern)?>


typealias KnowledgeBaseUrlFilterPattern = String|Mapping


/// 
open class KnowledgeBaseVectorIngestionConfiguration {
    ChunkingConfiguration: (Dynamic)?
    ParsingConfiguration: (Dynamic)?
}

typealias WebCrawlerConfigurationScope = "HOST_ONLY"|"SUBDOMAINS"

/// 
open class KnowledgeBaseWebCrawlerConfiguration {
    CrawlerLimits: (Dynamic)?
    ExclusionFilters: (KnowledgeBaseUrlFilterList)?
    InclusionFilters: (KnowledgeBaseUrlFilterList)?
    Scope: (WebCrawlerConfigurationScope|Mapping)?
    UrlConfiguration: Dynamic
}

/// Definition of AWS::Wisdom::KnowledgeBase Resource Type
open class KnowledgeBase extends cloudformation.Resource {

    Type = "AWS::Wisdom::KnowledgeBase"


    /// 
    hidden Description: (String|Mapping)?

    /// 
    hidden KnowledgeBaseType: KnowledgeBaseKnowledgeBaseType

    /// 
    hidden Name: String|Mapping

    /// 
    hidden RenderingConfiguration: (KnowledgeBaseRenderingConfiguration)?

    /// 
    hidden ServerSideEncryptionConfiguration: (KnowledgeBaseServerSideEncryptionConfiguration)?

    /// 
    hidden SourceConfiguration: (KnowledgeBaseSourceConfiguration)?

    /// 
    hidden Tags: (Listing<KnowledgeBaseTag>)?

    /// 
    hidden VectorIngestionConfiguration: (KnowledgeBaseVectorIngestionConfiguration)?

    Properties {
        ["Description"] = if (Description == null) null else Description
        ["KnowledgeBaseType"] = if (KnowledgeBaseType == null) null else KnowledgeBaseType
        ["Name"] = if (Name == null) null else Name
        ["RenderingConfiguration"] = if (RenderingConfiguration == null) null else RenderingConfiguration
        ["ServerSideEncryptionConfiguration"] = if (ServerSideEncryptionConfiguration == null) null else ServerSideEncryptionConfiguration
        ["SourceConfiguration"] = if (SourceConfiguration == null) null else SourceConfiguration
        ["Tags"] = if (Tags == null) null else Tags
        ["VectorIngestionConfiguration"] = if (VectorIngestionConfiguration == null) null else VectorIngestionConfiguration
    }

}
