/// AWS::DataSync::LocationHDFS
///
/// Generated by rain build --pkl-class AWS::DataSync::LocationHDFS
module aws.datasync.locationhdfs

import "../../cloudformation.pkl"

/// HDFS Name Node IP and port information.
open class LocationHDFSNameNode {
    Hostname: String(matches(Regex(#"^(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9])$"#)))|Mapping
    Port: Int|Mapping
}

typealias QopConfigurationDataTransferProtection = "AUTHENTICATION"|"INTEGRITY"|"PRIVACY"|"DISABLED"

typealias QopConfigurationRpcProtection = "AUTHENTICATION"|"INTEGRITY"|"PRIVACY"|"DISABLED"

/// Configuration information for RPC Protection and Data Transfer Protection. These parameters can be set to AUTHENTICATION, INTEGRITY, or PRIVACY. The default value is PRIVACY.
open class LocationHDFSQopConfiguration {
    DataTransferProtection: (QopConfigurationDataTransferProtection|Mapping)?
    RpcProtection: (QopConfigurationRpcProtection|Mapping)?
}

/// A key-value pair to associate with a resource.
open class LocationHDFSTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// Resource schema for AWS::DataSync::LocationHDFS.
open class LocationHDFS extends cloudformation.Resource {

    Type = "AWS::DataSync::LocationHDFS"


    /// ARN(s) of the agent(s) to use for an HDFS location.
    hidden AgentArns: Listing<String|Mapping>

    /// The authentication mode used to determine identity of user.
    hidden AuthenticationType: LocationHDFSAuthenticationType|Mapping

    /// Size of chunks (blocks) in bytes that the data is divided into when stored in the HDFS cluster.
    hidden BlockSize: (Int|Mapping)?

    /// The Base64 string representation of the Keytab file.
    hidden KerberosKeytab: (String|Mapping)?

    /// The string representation of the Krb5Conf file, or the presigned URL to access the Krb5.conf file within an S3 bucket.
    hidden KerberosKrb5Conf: (String|Mapping)?

    /// The unique identity, or principal, to which Kerberos can assign tickets.
    hidden KerberosPrincipal: (String(matches(Regex(#"^.+$"#)))|Mapping)?

    /// The identifier for the Key Management Server where the encryption keys that encrypt data inside HDFS clusters are stored.
    hidden KmsKeyProviderUri: (String(matches(Regex(#"^kms:\/\/http[s]?@(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9])(;(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9]))*:[0-9]{1,5}\/kms$"#)))|Mapping)?

    /// An array of Name Node(s) of the HDFS location.
    hidden NameNodes: Listing<LocationHDFSNameNode>

    /// 
    hidden QopConfiguration: (LocationHDFSQopConfiguration)?

    /// Number of copies of each block that exists inside the HDFS cluster.
    hidden ReplicationFactor: (Int|Mapping)?

    /// The user name that has read and write permissions on the specified HDFS cluster.
    hidden SimpleUser: (String(matches(Regex(#"^[_.A-Za-z0-9][-_.A-Za-z0-9]*$"#)))|Mapping)?

    /// The subdirectory in HDFS that is used to read data from the HDFS source location or write data to the HDFS destination.
    hidden Subdirectory: (String(matches(Regex(#"^[a-zA-Z0-9_\-\+\./\(\)\$\p{Zs}]+$"#)))|Mapping)?

    /// An array of key-value pairs to apply to this resource.
    hidden Tags: (Listing<LocationHDFSTag>)?

    Properties {
        ["AgentArns"] = if (AgentArns == null) null else AgentArns
        ["AuthenticationType"] = if (AuthenticationType == null) null else AuthenticationType
        ["BlockSize"] = if (BlockSize == null) null else BlockSize
        ["KerberosKeytab"] = if (KerberosKeytab == null) null else KerberosKeytab
        ["KerberosKrb5Conf"] = if (KerberosKrb5Conf == null) null else KerberosKrb5Conf
        ["KerberosPrincipal"] = if (KerberosPrincipal == null) null else KerberosPrincipal
        ["KmsKeyProviderUri"] = if (KmsKeyProviderUri == null) null else KmsKeyProviderUri
        ["NameNodes"] = if (NameNodes == null) null else NameNodes
        ["QopConfiguration"] = if (QopConfiguration == null) null else QopConfiguration
        ["ReplicationFactor"] = if (ReplicationFactor == null) null else ReplicationFactor
        ["SimpleUser"] = if (SimpleUser == null) null else SimpleUser
        ["Subdirectory"] = if (Subdirectory == null) null else Subdirectory
        ["Tags"] = if (Tags == null) null else Tags
    }

}


typealias LocationHDFSAuthenticationType = "SIMPLE"|"KERBEROS"
