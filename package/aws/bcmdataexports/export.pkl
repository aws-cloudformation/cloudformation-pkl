/// AWS::BCMDataExports::Export
///
/// Generated by rain build --pkl-class AWS::BCMDataExports::Export
module aws.bcmdataexports.export

import "../../cloudformation.pkl"

typealias ExportCompressionOption = String|Mapping


/// 
open class ExportDataQuery {
    QueryStatement: String(matches(Regex(#"^[\S\s]*$"#)))|Mapping
    TableConfigurations: (ExportTableConfigurations)?
}

/// 
open class ExportDestinationConfigurations {
    S3Destination: ExportS3Destination
}

/// 
open class ExportExport {
    DataQuery: ExportDataQuery
    Description: (String(matches(Regex(#"^[\S\s]*$"#)))|Mapping)?
    DestinationConfigurations: ExportDestinationConfigurations
    ExportArn: (String(matches(Regex(#"^arn:aws[-a-z0-9]*:[-a-z0-9]+:[-a-z0-9]*:[0-9]{12}:[-a-zA-Z0-9/:_]+$"#)))|Mapping)?
    Name: String(matches(Regex(#"^[0-9A-Za-z\-_]+$"#)))|Mapping
    RefreshCadence: ExportRefreshCadence
}

typealias ExportFormatOption = String|Mapping


typealias ExportFrequencyOption = String|Mapping


typealias ExportOverwriteOption = String|Mapping


/// 
open class ExportRefreshCadence {
    Frequency: ExportFrequencyOption
}

/// 
open class ExportResourceTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// 
open class ExportS3Destination {
    S3Bucket: String(matches(Regex(#"^[\S\s]*$"#)))|Mapping
    S3OutputConfigurations: ExportS3OutputConfigurations
    S3Prefix: String(matches(Regex(#"^[\S\s]*$"#)))|Mapping
    S3Region: String(matches(Regex(#"^[\S\s]*$"#)))|Mapping
}

/// 
open class ExportS3OutputConfigurations {
    Compression: ExportCompressionOption
    Format: ExportFormatOption
    OutputType: ExportS3OutputType
    Overwrite: ExportOverwriteOption
}

typealias ExportS3OutputType = String|Mapping


typealias ExportTableConfigurations = Mapping<String, Any>


typealias ExportTableProperties = Mapping<String, Any>


/// Definition of AWS::BCMDataExports::Export Resource Type
open class Export extends cloudformation.Resource {

    Type = "AWS::BCMDataExports::Export"


    /// 
    hidden Export: ExportExport

    /// 
    hidden Tags: (Listing<ExportResourceTag>)?

    Properties {
        ["Export"] = if (Export == null) null else Export
        ["Tags"] = if (Tags == null) null else Tags
    }

}
