/// AWS::MediaLive::Cluster
///
/// Generated by rain build --pkl-class AWS::MediaLive::Cluster
module aws.medialive.cluster

import "../../cloudformation.pkl"

/// On premises settings which will have the interface network mappings and default Output logical interface
open class ClusterClusterNetworkSettings {
    DefaultRoute: (String|Mapping)?
    InterfaceMappings: (Listing<ClusterInterfaceMapping>)?
}

typealias ClusterClusterState = String|Mapping


typealias ClusterClusterType = String|Mapping


/// Network mappings for the cluster
open class ClusterInterfaceMapping {
    LogicalInterfaceName: (String|Mapping)?
    NetworkId: (String|Mapping)?
}

/// Network mappings for the cluster
open class ClusterInterfaceNetworkMapping {
    LogicalInterfaceName: (String|Mapping)?
    NetworkId: (String|Mapping)?
}

/// A key-value pair to associate with a resource.
open class ClusterTags {
    Key: (String|Mapping)?
    Value: (String|Mapping)?
}

/// Definition of AWS::MediaLive::Cluster Resource Type
open class Cluster extends cloudformation.Resource {

    Type = "AWS::MediaLive::Cluster"


    /// 
    hidden ClusterType: (ClusterClusterType)?

    /// The IAM role your nodes will use.
    hidden InstanceRoleArn: (String(matches(Regex(#"^arn:.+:iam:.+:role/.+$"#)))|Mapping)?

    /// The user-specified name of the Cluster to be created.
    hidden Name: (String|Mapping)?

    /// 
    hidden NetworkSettings: (ClusterClusterNetworkSettings)?

    /// A collection of key-value pairs.
    hidden Tags: (Listing<ClusterTags>)?

    Properties {
        ["ClusterType"] = if (ClusterType == null) null else ClusterType
        ["InstanceRoleArn"] = if (InstanceRoleArn == null) null else InstanceRoleArn
        ["Name"] = if (Name == null) null else Name
        ["NetworkSettings"] = if (NetworkSettings == null) null else NetworkSettings
        ["Tags"] = if (Tags == null) null else Tags
    }

}
