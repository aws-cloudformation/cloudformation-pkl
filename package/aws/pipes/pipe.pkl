/// AWS::Pipes::Pipe
///
/// Generated by rain build --pkl-class AWS::Pipes::Pipe
module aws.pipes.pipe

import "../../cloudformation.pkl"

typealias PipeAssignPublicIp = String|Mapping


/// 
open class PipeAwsVpcConfiguration {
    AssignPublicIp: (PipeAssignPublicIp)?
    SecurityGroups: (Listing<String|Mapping>)?
    Subnets: Listing<String|Mapping>
}

/// 
open class PipeBatchArrayProperties {
    Size: (Int|Mapping)?
}

/// 
open class PipeBatchContainerOverrides {
    Command: (Listing<String|Mapping>)?
    Environment: (Listing<PipeBatchEnvironmentVariable>)?
    InstanceType: (String|Mapping)?
    ResourceRequirements: (Listing<PipeBatchResourceRequirement>)?
}

/// 
open class PipeBatchEnvironmentVariable {
    Name: (String|Mapping)?
    Value: (String|Mapping)?
}

/// 
open class PipeBatchJobDependency {
    JobId: (String|Mapping)?
    Type: (PipeBatchJobDependencyType)?
}

typealias PipeBatchJobDependencyType = String|Mapping


typealias PipeBatchParametersMap = Mapping<String, Any>


/// 
open class PipeBatchResourceRequirement {
    Type: PipeBatchResourceRequirementType
    Value: String|Mapping
}

typealias PipeBatchResourceRequirementType = String|Mapping


/// 
open class PipeBatchRetryStrategy {
    Attempts: (Int|Mapping)?
}

/// 
open class PipeCapacityProviderStrategyItem {
    Base: (Int|Mapping)?
    CapacityProvider: String|Mapping
    Weight: (Int|Mapping)?
}

/// 
open class PipeCloudwatchLogsLogDestination {
    LogGroupArn: (String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:logs:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):log-group:.+)$"#)))|Mapping)?
}

/// 
open class PipeDeadLetterConfig {
    Arn: (String(matches(Regex(#"^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$"#)))|Mapping)?
}

typealias PipeDynamoDBStreamStartPosition = String|Mapping


/// 
open class PipeEcsContainerOverride {
    Command: (Listing<String|Mapping>)?
    Cpu: (Int|Mapping)?
    Environment: (Listing<PipeEcsEnvironmentVariable>)?
    EnvironmentFiles: (Listing<PipeEcsEnvironmentFile>)?
    Memory: (Int|Mapping)?
    MemoryReservation: (Int|Mapping)?
    Name: (String|Mapping)?
    ResourceRequirements: (Listing<PipeEcsResourceRequirement>)?
}

/// 
open class PipeEcsEnvironmentFile {
    Type: PipeEcsEnvironmentFileType
    Value: String|Mapping
}

typealias PipeEcsEnvironmentFileType = String|Mapping


/// 
open class PipeEcsEnvironmentVariable {
    Name: (String|Mapping)?
    Value: (String|Mapping)?
}

/// 
open class PipeEcsEphemeralStorage {
    SizeInGiB: Int|Mapping
}

/// 
open class PipeEcsInferenceAcceleratorOverride {
    DeviceName: (String|Mapping)?
    DeviceType: (String|Mapping)?
}

/// 
open class PipeEcsResourceRequirement {
    Type: PipeEcsResourceRequirementType
    Value: String|Mapping
}

typealias PipeEcsResourceRequirementType = String|Mapping


/// 
open class PipeEcsTaskOverride {
    ContainerOverrides: (Listing<PipeEcsContainerOverride>)?
    Cpu: (String|Mapping)?
    EphemeralStorage: (PipeEcsEphemeralStorage)?
    ExecutionRoleArn: (String(matches(Regex(#"^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)|(\$(\.[\w/_-]+(\[(\d+|\*)\])*)*)$"#)))|Mapping)?
    InferenceAcceleratorOverrides: (Listing<PipeEcsInferenceAcceleratorOverride>)?
    Memory: (String|Mapping)?
    TaskRoleArn: (String(matches(Regex(#"^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)|(\$(\.[\w/_-]+(\[(\d+|\*)\])*)*)$"#)))|Mapping)?
}

/// 
open class PipeFilter {
    Pattern: (String|Mapping)?
}

/// 
open class PipeFilterCriteria {
    Filters: (Listing<PipeFilter>)?
}

/// 
open class PipeFirehoseLogDestination {
    DeliveryStreamArn: (String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:firehose:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):deliverystream/.+)$"#)))|Mapping)?
}

typealias PipeHeaderParametersMap = Mapping<String, Any>


typealias PipeIncludeExecutionDataOption = String|Mapping


typealias PipeKinesisStreamStartPosition = String|Mapping


typealias PipeLaunchType = String|Mapping


typealias PipeLogLevel = String|Mapping


typealias PipeMQBrokerAccessCredentials = PipeMQBrokerAccessCredentialsBasicAuth


/// 
open class PipeMQBrokerAccessCredentialsBasicAuth {
    BasicAuth: String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):secret:.+)$"#)))|Mapping
}

typealias PipeMSKAccessCredentials = PipeMSKAccessCredentialsSaslScram512Auth|PipeMSKAccessCredentialsClientCertificateTlsAuth


/// 
open class PipeMSKAccessCredentialsClientCertificateTlsAuth {
    ClientCertificateTlsAuth: String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):secret:.+)$"#)))|Mapping
}

/// 
open class PipeMSKAccessCredentialsSaslScram512Auth {
    SaslScram512Auth: String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):secret:.+)$"#)))|Mapping
}

typealias PipeMSKStartPosition = String|Mapping


/// 
open class PipeNetworkConfiguration {
    AwsvpcConfiguration: (PipeAwsVpcConfiguration)?
}

typealias PipeOnPartialBatchItemFailureStreams = String|Mapping


/// 
open class PipePipeEnrichmentHttpParameters {
    HeaderParameters: (PipeHeaderParametersMap)?
    PathParameterValues: (Listing<String|Mapping>)?
    QueryStringParameters: (PipeQueryStringParametersMap)?
}

/// 
open class PipePipeEnrichmentParameters {
    HttpParameters: (PipePipeEnrichmentHttpParameters)?
    InputTemplate: (String|Mapping)?
}

/// 
open class PipePipeLogConfiguration {
    CloudwatchLogsLogDestination: (PipeCloudwatchLogsLogDestination)?
    FirehoseLogDestination: (PipeFirehoseLogDestination)?
    IncludeExecutionData: (Listing<PipeIncludeExecutionDataOption>)?
    Level: (PipeLogLevel)?
    S3LogDestination: (PipeS3LogDestination)?
}

/// 
open class PipePipeSourceActiveMQBrokerParameters {
    BatchSize: (Int|Mapping)?
    Credentials: PipeMQBrokerAccessCredentials
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
    QueueName: String(matches(Regex(#"^[\s\S]*$"#)))|Mapping
}

/// 
open class PipePipeSourceDynamoDBStreamParameters {
    BatchSize: (Int|Mapping)?
    DeadLetterConfig: (PipeDeadLetterConfig)?
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
    MaximumRecordAgeInSeconds: (Int|Mapping)?
    MaximumRetryAttempts: (Int|Mapping)?
    OnPartialBatchItemFailure: (PipeOnPartialBatchItemFailureStreams)?
    ParallelizationFactor: (Int|Mapping)?
    StartingPosition: PipeDynamoDBStreamStartPosition
}

/// 
open class PipePipeSourceKinesisStreamParameters {
    BatchSize: (Int|Mapping)?
    DeadLetterConfig: (PipeDeadLetterConfig)?
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
    MaximumRecordAgeInSeconds: (Int|Mapping)?
    MaximumRetryAttempts: (Int|Mapping)?
    OnPartialBatchItemFailure: (PipeOnPartialBatchItemFailureStreams)?
    ParallelizationFactor: (Int|Mapping)?
    StartingPosition: PipeKinesisStreamStartPosition
    StartingPositionTimestamp: (String|Mapping)?
}

/// 
open class PipePipeSourceManagedStreamingKafkaParameters {
    BatchSize: (Int|Mapping)?
    ConsumerGroupID: (String(matches(Regex(#"^[a-zA-Z0-9-\/*:_+=.@-]*$"#)))|Mapping)?
    Credentials: (PipeMSKAccessCredentials)?
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
    StartingPosition: (PipeMSKStartPosition)?
    TopicName: String(matches(Regex(#"^[^.]([a-zA-Z0-9\-_.]+)$"#)))|Mapping
}

/// 
open class PipePipeSourceParameters {
    ActiveMQBrokerParameters: (PipePipeSourceActiveMQBrokerParameters)?
    DynamoDBStreamParameters: (PipePipeSourceDynamoDBStreamParameters)?
    FilterCriteria: (PipeFilterCriteria)?
    KinesisStreamParameters: (PipePipeSourceKinesisStreamParameters)?
    ManagedStreamingKafkaParameters: (PipePipeSourceManagedStreamingKafkaParameters)?
    RabbitMQBrokerParameters: (PipePipeSourceRabbitMQBrokerParameters)?
    SelfManagedKafkaParameters: (PipePipeSourceSelfManagedKafkaParameters)?
    SqsQueueParameters: (PipePipeSourceSqsQueueParameters)?
}

/// 
open class PipePipeSourceRabbitMQBrokerParameters {
    BatchSize: (Int|Mapping)?
    Credentials: PipeMQBrokerAccessCredentials
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
    QueueName: String(matches(Regex(#"^[\s\S]*$"#)))|Mapping
    VirtualHost: (String(matches(Regex(#"^[a-zA-Z0-9-\/*:_+=.@-]*$"#)))|Mapping)?
}

/// 
open class PipePipeSourceSelfManagedKafkaParameters {
    AdditionalBootstrapServers: (Listing<String|Mapping>)?
    BatchSize: (Int|Mapping)?
    ConsumerGroupID: (String(matches(Regex(#"^[a-zA-Z0-9-\/*:_+=.@-]*$"#)))|Mapping)?
    Credentials: (PipeSelfManagedKafkaAccessConfigurationCredentials)?
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
    ServerRootCaCertificate: (String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):secret:.+)$"#)))|Mapping)?
    StartingPosition: (PipeSelfManagedKafkaStartPosition)?
    TopicName: String(matches(Regex(#"^[^.]([a-zA-Z0-9\-_.]+)$"#)))|Mapping
    Vpc: (PipeSelfManagedKafkaAccessConfigurationVpc)?
}

/// 
open class PipePipeSourceSqsQueueParameters {
    BatchSize: (Int|Mapping)?
    MaximumBatchingWindowInSeconds: (Int|Mapping)?
}

typealias PipePipeState = String|Mapping


/// 
open class PipePipeTargetBatchJobParameters {
    ArrayProperties: (PipeBatchArrayProperties)?
    ContainerOverrides: (PipeBatchContainerOverrides)?
    DependsOn: (Listing<PipeBatchJobDependency>)?
    JobDefinition: String|Mapping
    JobName: String|Mapping
    Parameters: (PipeBatchParametersMap)?
    RetryStrategy: (PipeBatchRetryStrategy)?
}

/// 
open class PipePipeTargetCloudWatchLogsParameters {
    LogStreamName: (String|Mapping)?
    Timestamp: (String(matches(Regex(#"^\$(\.[\w_-]+(\[(\d+|\*)\])*)*$"#)))|Mapping)?
}

/// 
open class PipePipeTargetEcsTaskParameters {
    CapacityProviderStrategy: (Listing<PipeCapacityProviderStrategyItem>)?
    EnableECSManagedTags: (Boolean|Mapping)?
    EnableExecuteCommand: (Boolean|Mapping)?
    Group: (String|Mapping)?
    LaunchType: (PipeLaunchType)?
    NetworkConfiguration: (PipeNetworkConfiguration)?
    Overrides: (PipeEcsTaskOverride)?
    PlacementConstraints: (Listing<PipePlacementConstraint>)?
    PlacementStrategy: (Listing<PipePlacementStrategy>)?
    PlatformVersion: (String|Mapping)?
    PropagateTags: (PipePropagateTags)?
    ReferenceId: (String|Mapping)?
    Tags: (Listing<PipeTag>)?
    TaskCount: (Int|Mapping)?
    TaskDefinitionArn: String(matches(Regex(#"^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)|(\$(\.[\w/_-]+(\[(\d+|\*)\])*)*)$"#)))|Mapping
}

/// 
open class PipePipeTargetEventBridgeEventBusParameters {
    DetailType: (String|Mapping)?
    EndpointId: (String(matches(Regex(#"^[A-Za-z0-9\-]+[\.][A-Za-z0-9\-]+$"#)))|Mapping)?
    Resources: (Listing<String|Mapping>)?
    Source: (String(matches(Regex(#"(?=[/\.\-_A-Za-z0-9]+)((?!aws\.).*)|(\$(\.[\w/_-]+(\[(\d+|\*)\])*)*)"#)))|Mapping)?
    Time: (String(matches(Regex(#"^\$(\.[\w/_-]+(\[(\d+|\*)\])*)*$"#)))|Mapping)?
}

/// 
open class PipePipeTargetHttpParameters {
    HeaderParameters: (PipeHeaderParametersMap)?
    PathParameterValues: (Listing<String|Mapping>)?
    QueryStringParameters: (PipeQueryStringParametersMap)?
}

typealias PipePipeTargetInvocationType = String|Mapping


/// 
open class PipePipeTargetKinesisStreamParameters {
    PartitionKey: String|Mapping
}

/// 
open class PipePipeTargetLambdaFunctionParameters {
    InvocationType: (PipePipeTargetInvocationType)?
}

/// 
open class PipePipeTargetParameters {
    BatchJobParameters: (PipePipeTargetBatchJobParameters)?
    CloudWatchLogsParameters: (PipePipeTargetCloudWatchLogsParameters)?
    EcsTaskParameters: (PipePipeTargetEcsTaskParameters)?
    EventBridgeEventBusParameters: (PipePipeTargetEventBridgeEventBusParameters)?
    HttpParameters: (PipePipeTargetHttpParameters)?
    InputTemplate: (String|Mapping)?
    KinesisStreamParameters: (PipePipeTargetKinesisStreamParameters)?
    LambdaFunctionParameters: (PipePipeTargetLambdaFunctionParameters)?
    RedshiftDataParameters: (PipePipeTargetRedshiftDataParameters)?
    SageMakerPipelineParameters: (PipePipeTargetSageMakerPipelineParameters)?
    SqsQueueParameters: (PipePipeTargetSqsQueueParameters)?
    StepFunctionStateMachineParameters: (PipePipeTargetStateMachineParameters)?
}

/// 
open class PipePipeTargetRedshiftDataParameters {
    Database: String|Mapping
    DbUser: (String|Mapping)?
    SecretManagerArn: (String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):secret:.+)|(\$(\.[\w/_-]+(\[(\d+|\*)\])*)*)$"#)))|Mapping)?
    Sqls: Listing<String|Mapping>
    StatementName: (String|Mapping)?
    WithEvent: (Boolean|Mapping)?
}

/// 
open class PipePipeTargetSageMakerPipelineParameters {
    PipelineParameterList: (Listing<PipeSageMakerPipelineParameter>)?
}

/// 
open class PipePipeTargetSqsQueueParameters {
    MessageDeduplicationId: (String|Mapping)?
    MessageGroupId: (String|Mapping)?
}

/// 
open class PipePipeTargetStateMachineParameters {
    InvocationType: (PipePipeTargetInvocationType)?
}

/// 
open class PipePlacementConstraint {
    Expression: (String|Mapping)?
    Type: (PipePlacementConstraintType)?
}

typealias PipePlacementConstraintType = String|Mapping


/// 
open class PipePlacementStrategy {
    Field: (String|Mapping)?
    Type: (PipePlacementStrategyType)?
}

typealias PipePlacementStrategyType = String|Mapping


typealias PipePropagateTags = String|Mapping


typealias PipeQueryStringParametersMap = Mapping<String, Any>


typealias PipeRequestedPipeState = String|Mapping


/// 
open class PipeS3LogDestination {
    BucketName: (String|Mapping)?
    BucketOwner: (String|Mapping)?
    OutputFormat: (PipeS3OutputFormat)?
    Prefix: (String|Mapping)?
}

typealias PipeS3OutputFormat = String|Mapping


/// 
open class PipeSageMakerPipelineParameter {
    Name: String(matches(Regex(#"^[a-zA-Z0-9](-*[a-zA-Z0-9])*|(\$(\.[\w/_-]+(\[(\d+|\*)\])*)*)$"#)))|Mapping
    Value: String|Mapping
}

typealias PipeSelfManagedKafkaAccessConfigurationCredentials = PipeSelfManagedKafkaAccessConfigurationCredentialsBasicAuth|PipeSelfManagedKafkaAccessConfigurationCredentialsSaslScram512Auth|PipeSelfManagedKafkaAccessConfigurationCredentialsSaslScram256Auth|PipeSelfManagedKafkaAccessConfigurationCredentialsClientCertificateTlsAuth


/// 
open class PipeSelfManagedKafkaAccessConfigurationCredentialsBasicAuth {
    BasicAuth: String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):secret:.+)$"#)))|Mapping
}

/// 
open class PipeSelfManagedKafkaAccessConfigurationCredentialsClientCertificateTlsAuth {
    ClientCertificateTlsAuth: String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):secret:.+)$"#)))|Mapping
}

/// 
open class PipeSelfManagedKafkaAccessConfigurationCredentialsSaslScram256Auth {
    SaslScram256Auth: String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):secret:.+)$"#)))|Mapping
}

/// 
open class PipeSelfManagedKafkaAccessConfigurationCredentialsSaslScram512Auth {
    SaslScram512Auth: String(matches(Regex(#"^(^arn:aws([a-z]|\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}):(\d{12}):secret:.+)$"#)))|Mapping
}

/// 
open class PipeSelfManagedKafkaAccessConfigurationVpc {
    SecurityGroup: (Listing<String|Mapping>)?
    Subnets: (Listing<String|Mapping>)?
}

typealias PipeSelfManagedKafkaStartPosition = String|Mapping


/// 
open class PipeTag {
    Key: String|Mapping
    Value: String|Mapping
}

typealias PipeTagMap = Mapping<String, Any>


/// Definition of AWS::Pipes::Pipe Resource Type
open class Pipe extends cloudformation.Resource {

    Type = "AWS::Pipes::Pipe"


    /// 
    hidden Description: (String(matches(Regex(#"^.*$"#)))|Mapping)?

    /// 
    hidden DesiredState: (PipeRequestedPipeState)?

    /// 
    hidden Enrichment: (String(matches(Regex(#"^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$"#)))|Mapping)?

    /// 
    hidden EnrichmentParameters: (PipePipeEnrichmentParameters)?

    /// 
    hidden LogConfiguration: (PipePipeLogConfiguration)?

    /// 
    hidden Name: (String(matches(Regex(#"^[\.\-_A-Za-z0-9]+$"#)))|Mapping)?

    /// 
    hidden RoleArn: String(matches(Regex(#"^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z0-9+=,.@\-_/]+$"#)))|Mapping

    /// 
    hidden Source: String(matches(Regex(#"^smk://(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]):[0-9]{1,5}|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$"#)))|Mapping

    /// 
    hidden SourceParameters: (PipePipeSourceParameters)?

    /// 
    hidden Tags: (PipeTagMap)?

    /// 
    hidden Target: String(matches(Regex(#"^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-]+):([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:(.+)$"#)))|Mapping

    /// 
    hidden TargetParameters: (PipePipeTargetParameters)?

    Properties {
        ["Description"] = if (Description == null) null else Description
        ["DesiredState"] = if (DesiredState == null) null else DesiredState
        ["Enrichment"] = if (Enrichment == null) null else Enrichment
        ["EnrichmentParameters"] = if (EnrichmentParameters == null) null else EnrichmentParameters
        ["LogConfiguration"] = if (LogConfiguration == null) null else LogConfiguration
        ["Name"] = if (Name == null) null else Name
        ["RoleArn"] = if (RoleArn == null) null else RoleArn
        ["Source"] = if (Source == null) null else Source
        ["SourceParameters"] = if (SourceParameters == null) null else SourceParameters
        ["Tags"] = if (Tags == null) null else Tags
        ["Target"] = if (Target == null) null else Target
        ["TargetParameters"] = if (TargetParameters == null) null else TargetParameters
    }

}
