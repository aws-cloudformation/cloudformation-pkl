/// AWS::EC2::NetworkInsightsPath
///
/// Generated by rain build --pkl-class AWS::EC2::NetworkInsightsPath
module aws.ec2.networkinsightspath

import "../../cloudformation.pkl"

/// 
open class NetworkInsightsPathFilterPortRange {
    FromPort: (Int|Mapping)?
    ToPort: (Int|Mapping)?
}

typealias NetworkInsightsPathIpAddress = String|Mapping


/// 
open class NetworkInsightsPathPathFilter {
    DestinationAddress: (NetworkInsightsPathIpAddress)?
    DestinationPortRange: (NetworkInsightsPathFilterPortRange)?
    SourceAddress: (NetworkInsightsPathIpAddress)?
    SourcePortRange: (NetworkInsightsPathFilterPortRange)?
}

typealias NetworkInsightsPathPort = Int|Mapping


typealias NetworkInsightsPathProtocol = String|Mapping


/// 
open class NetworkInsightsPathTag {
    Key: String|Mapping
    Value: (String|Mapping)?
}

typealias NetworkInsightsPathTags = Listing<(NetworkInsightsPathTag)?>


/// Resource schema for AWS::EC2::NetworkInsightsPath
open class NetworkInsightsPath extends cloudformation.Resource {

    Type = "AWS::EC2::NetworkInsightsPath"


    /// 
    hidden Destination: (String|Mapping)?

    /// 
    hidden DestinationIp: (NetworkInsightsPathIpAddress)?

    /// 
    hidden DestinationPort: (NetworkInsightsPathPort)?

    /// 
    hidden FilterAtDestination: (NetworkInsightsPathPathFilter)?

    /// 
    hidden FilterAtSource: (NetworkInsightsPathPathFilter)?

    /// 
    hidden Protocol: NetworkInsightsPathProtocol

    /// 
    hidden Source: String|Mapping

    /// 
    hidden SourceIp: (NetworkInsightsPathIpAddress)?

    /// 
    hidden Tags: (Listing<NetworkInsightsPathTag>)?

    Properties {
        ["Destination"] = if (Destination == null) null else Destination
        ["DestinationIp"] = if (DestinationIp == null) null else DestinationIp
        ["DestinationPort"] = if (DestinationPort == null) null else DestinationPort
        ["FilterAtDestination"] = if (FilterAtDestination == null) null else FilterAtDestination
        ["FilterAtSource"] = if (FilterAtSource == null) null else FilterAtSource
        ["Protocol"] = if (Protocol == null) null else Protocol
        ["Source"] = if (Source == null) null else Source
        ["SourceIp"] = if (SourceIp == null) null else SourceIp
        ["Tags"] = if (Tags == null) null else Tags
    }

}
