/// AWS::EC2::EC2Fleet
///
/// Generated by rain build --pkl-class AWS::EC2::EC2Fleet
module aws.ec2.ec2fleet

import "../../cloudformation.pkl"

/// 
open class EC2FleetAcceleratorCountRequest {
    Max: (Int|Mapping)?
    Min: (Int|Mapping)?
}

/// 
open class EC2FleetAcceleratorTotalMemoryMiBRequest {
    Max: (Int|Mapping)?
    Min: (Int|Mapping)?
}

/// 
open class EC2FleetBaselineEbsBandwidthMbpsRequest {
    Max: (Int|Mapping)?
    Min: (Int|Mapping)?
}

typealias CapacityRebalanceReplacementStrategy = "launch"|"launch-before-terminate"

/// 
open class EC2FleetCapacityRebalance {
    ReplacementStrategy: (CapacityRebalanceReplacementStrategy|Mapping)?
    TerminationDelay: (Int|Mapping)?
}

typealias CapacityReservationOptionsRequestUsageStrategy = "use-capacity-reservations-first"

/// 
open class EC2FleetCapacityReservationOptionsRequest {
    UsageStrategy: (CapacityReservationOptionsRequestUsageStrategy|Mapping)?
}

/// 
open class EC2FleetFleetLaunchTemplateConfigRequest {
    LaunchTemplateSpecification: (EC2FleetFleetLaunchTemplateSpecificationRequest)?
    Overrides: (Listing<EC2FleetFleetLaunchTemplateOverridesRequest>)?
}

/// 
open class EC2FleetFleetLaunchTemplateOverridesRequest {
    AvailabilityZone: (String|Mapping)?
    InstanceRequirements: (EC2FleetInstanceRequirementsRequest)?
    InstanceType: (String|Mapping)?
    MaxPrice: (String|Mapping)?
    Placement: (EC2FleetPlacement)?
    Priority: (Number|Mapping)?
    SubnetId: (String|Mapping)?
    WeightedCapacity: (Number|Mapping)?
}

/// 
open class EC2FleetFleetLaunchTemplateSpecificationRequest {
    LaunchTemplateId: (String|Mapping)?
    LaunchTemplateName: (String(matches(Regex(#"[a-zA-Z0-9\(\)\.\-/_]+"#)))|Mapping)?
    Version: String|Mapping
}

typealias InstanceRequirementsRequestAcceleratorManufacturers = "amazon-web-services"|"amd"|"habana"|"nvidia"|"xilinx"

typealias InstanceRequirementsRequestAcceleratorNames = "a10g"|"a100"|"h100"|"inferentia"|"k520"|"k80"|"m60"|"radeon-pro-v520"|"t4"|"t4g"|"vu9p"|"v100"

typealias InstanceRequirementsRequestAcceleratorTypes = "gpu"|"fpga"|"inference"

typealias InstanceRequirementsRequestBareMetal = "included"|"required"|"excluded"

typealias InstanceRequirementsRequestBurstablePerformance = "included"|"required"|"excluded"

typealias InstanceRequirementsRequestCpuManufacturers = "intel"|"amd"|"amazon-web-services"

typealias InstanceRequirementsRequestInstanceGenerations = "current"|"previous"

typealias InstanceRequirementsRequestLocalStorage = "included"|"required"|"excluded"

typealias InstanceRequirementsRequestLocalStorageTypes = "hdd"|"ssd"

/// 
open class EC2FleetInstanceRequirementsRequest {
    AcceleratorCount: (EC2FleetAcceleratorCountRequest)?
    AcceleratorManufacturers: (Listing<InstanceRequirementsRequestAcceleratorManufacturers|Mapping>)?
    AcceleratorNames: (Listing<InstanceRequirementsRequestAcceleratorNames|Mapping>)?
    AcceleratorTotalMemoryMiB: (EC2FleetAcceleratorTotalMemoryMiBRequest)?
    AcceleratorTypes: (Listing<InstanceRequirementsRequestAcceleratorTypes|Mapping>)?
    AllowedInstanceTypes: (Listing<String|Mapping>)?
    BareMetal: (InstanceRequirementsRequestBareMetal|Mapping)?
    BaselineEbsBandwidthMbps: (EC2FleetBaselineEbsBandwidthMbpsRequest)?
    BurstablePerformance: (InstanceRequirementsRequestBurstablePerformance|Mapping)?
    CpuManufacturers: (Listing<InstanceRequirementsRequestCpuManufacturers|Mapping>)?
    ExcludedInstanceTypes: (Listing<String|Mapping>)?
    InstanceGenerations: (Listing<InstanceRequirementsRequestInstanceGenerations|Mapping>)?
    LocalStorage: (InstanceRequirementsRequestLocalStorage|Mapping)?
    LocalStorageTypes: (Listing<InstanceRequirementsRequestLocalStorageTypes|Mapping>)?
    MaxSpotPriceAsPercentageOfOptimalOnDemandPrice: (Int|Mapping)?
    MemoryGiBPerVCpu: (EC2FleetMemoryGiBPerVCpuRequest)?
    MemoryMiB: (EC2FleetMemoryMiBRequest)?
    NetworkBandwidthGbps: (EC2FleetNetworkBandwidthGbpsRequest)?
    NetworkInterfaceCount: (EC2FleetNetworkInterfaceCountRequest)?
    OnDemandMaxPricePercentageOverLowestPrice: (Int|Mapping)?
    RequireHibernateSupport: (Boolean|Mapping)?
    SpotMaxPricePercentageOverLowestPrice: (Int|Mapping)?
    TotalLocalStorageGB: (EC2FleetTotalLocalStorageGBRequest)?
    VCpuCount: (EC2FleetVCpuCountRangeRequest)?
}

/// 
open class EC2FleetMaintenanceStrategies {
    CapacityRebalance: (EC2FleetCapacityRebalance)?
}

/// 
open class EC2FleetMemoryGiBPerVCpuRequest {
    Max: (Number|Mapping)?
    Min: (Number|Mapping)?
}

/// 
open class EC2FleetMemoryMiBRequest {
    Max: (Int|Mapping)?
    Min: (Int|Mapping)?
}

/// 
open class EC2FleetNetworkBandwidthGbpsRequest {
    Max: (Number|Mapping)?
    Min: (Number|Mapping)?
}

/// 
open class EC2FleetNetworkInterfaceCountRequest {
    Max: (Int|Mapping)?
    Min: (Int|Mapping)?
}

/// 
open class EC2FleetOnDemandOptionsRequest {
    AllocationStrategy: (String|Mapping)?
    CapacityReservationOptions: (EC2FleetCapacityReservationOptionsRequest)?
    MaxTotalPrice: (String|Mapping)?
    MinTargetCapacity: (Int|Mapping)?
    SingleAvailabilityZone: (Boolean|Mapping)?
    SingleInstanceType: (Boolean|Mapping)?
}

/// 
open class EC2FleetPlacement {
    Affinity: (String|Mapping)?
    AvailabilityZone: (String|Mapping)?
    GroupName: (String|Mapping)?
    HostId: (String|Mapping)?
    HostResourceGroupArn: (String|Mapping)?
    PartitionNumber: (Int|Mapping)?
    SpreadDomain: (String|Mapping)?
    Tenancy: (String|Mapping)?
}

typealias SpotOptionsRequestAllocationStrategy = "lowest-price"|"lowestPrice"|"diversified"|"capacityOptimized"|"capacity-optimized"|"capacityOptimizedPrioritized"|"capacity-optimized-prioritized"|"priceCapacityOptimized"|"price-capacity-optimized"

typealias SpotOptionsRequestInstanceInterruptionBehavior = "hibernate"|"stop"|"terminate"

/// 
open class EC2FleetSpotOptionsRequest {
    AllocationStrategy: (SpotOptionsRequestAllocationStrategy|Mapping)?
    InstanceInterruptionBehavior: (SpotOptionsRequestInstanceInterruptionBehavior|Mapping)?
    InstancePoolsToUseCount: (Int|Mapping)?
    MaintenanceStrategies: (EC2FleetMaintenanceStrategies)?
    MaxTotalPrice: (String|Mapping)?
    MinTargetCapacity: (Int|Mapping)?
    SingleAvailabilityZone: (Boolean|Mapping)?
    SingleInstanceType: (Boolean|Mapping)?
}

/// 
open class EC2FleetTag {
    Key: String|Mapping
    Value: String|Mapping
}

typealias TagSpecificationResourceType = "client-vpn-endpoint"|"customer-gateway"|"dedicated-host"|"dhcp-options"|"egress-only-internet-gateway"|"elastic-gpu"|"elastic-ip"|"export-image-task"|"export-instance-task"|"fleet"|"fpga-image"|"host-reservation"|"image"|"import-image-task"|"import-snapshot-task"|"instance"|"internet-gateway"|"key-pair"|"launch-template"|"local-gateway-route-table-vpc-association"|"natgateway"|"network-acl"|"network-insights-analysis"|"network-insights-path"|"network-interface"|"placement-group"|"reserved-instances"|"route-table"|"security-group"|"snapshot"|"spot-fleet-request"|"spot-instances-request"|"subnet"|"traffic-mirror-filter"|"traffic-mirror-session"|"traffic-mirror-target"|"transit-gateway"|"transit-gateway-attachment"|"transit-gateway-connect-peer"|"transit-gateway-multicast-domain"|"transit-gateway-route-table"|"volume"|"vpc"|"vpc-flow-log"|"vpc-peering-connection"|"vpn-connection"|"vpn-gateway"

/// 
open class EC2FleetTagSpecification {
    ResourceType: (TagSpecificationResourceType|Mapping)?
    Tags: (Listing<EC2FleetTag>)?
}

typealias TargetCapacitySpecificationRequestDefaultTargetCapacityType = "on-demand"|"spot"

typealias TargetCapacitySpecificationRequestTargetCapacityUnitType = "vcpu"|"memory-mib"|"units"

/// 
open class EC2FleetTargetCapacitySpecificationRequest {
    DefaultTargetCapacityType: (TargetCapacitySpecificationRequestDefaultTargetCapacityType|Mapping)?
    OnDemandTargetCapacity: (Int|Mapping)?
    SpotTargetCapacity: (Int|Mapping)?
    TargetCapacityUnitType: (TargetCapacitySpecificationRequestTargetCapacityUnitType|Mapping)?
    TotalTargetCapacity: Int|Mapping
}

/// 
open class EC2FleetTotalLocalStorageGBRequest {
    Max: (Number|Mapping)?
    Min: (Number|Mapping)?
}

/// 
open class EC2FleetVCpuCountRangeRequest {
    Max: (Int|Mapping)?
    Min: (Int|Mapping)?
}

/// Resource Type definition for AWS::EC2::EC2Fleet
open class EC2Fleet extends cloudformation.Resource {

    Type = "AWS::EC2::EC2Fleet"


    /// 
    hidden Context: (String|Mapping)?

    /// 
    hidden ExcessCapacityTerminationPolicy: (EC2FleetExcessCapacityTerminationPolicy|Mapping)?

    /// 
    hidden LaunchTemplateConfigs: Listing<EC2FleetFleetLaunchTemplateConfigRequest>

    /// 
    hidden OnDemandOptions: (EC2FleetOnDemandOptionsRequest)?

    /// 
    hidden ReplaceUnhealthyInstances: (Boolean|Mapping)?

    /// 
    hidden SpotOptions: (EC2FleetSpotOptionsRequest)?

    /// 
    hidden TagSpecifications: (Listing<EC2FleetTagSpecification>)?

    /// 
    hidden TargetCapacitySpecification: EC2FleetTargetCapacitySpecificationRequest

    /// 
    hidden TerminateInstancesWithExpiration: (Boolean|Mapping)?

    /// 
    hidden TypeProperty: (EC2FleetType|Mapping)?

    /// 
    hidden ValidFrom: (String|Mapping)?

    /// 
    hidden ValidUntil: (String|Mapping)?

    Properties {
        ["Context"] = if (Context == null) null else Context
        ["ExcessCapacityTerminationPolicy"] = if (ExcessCapacityTerminationPolicy == null) null else ExcessCapacityTerminationPolicy
        ["LaunchTemplateConfigs"] = if (LaunchTemplateConfigs == null) null else LaunchTemplateConfigs
        ["OnDemandOptions"] = if (OnDemandOptions == null) null else OnDemandOptions
        ["ReplaceUnhealthyInstances"] = if (ReplaceUnhealthyInstances == null) null else ReplaceUnhealthyInstances
        ["SpotOptions"] = if (SpotOptions == null) null else SpotOptions
        ["TagSpecifications"] = if (TagSpecifications == null) null else TagSpecifications
        ["TargetCapacitySpecification"] = if (TargetCapacitySpecification == null) null else TargetCapacitySpecification
        ["TerminateInstancesWithExpiration"] = if (TerminateInstancesWithExpiration == null) null else TerminateInstancesWithExpiration
        ["Type"] = if (TypeProperty == null) null else TypeProperty
        ["ValidFrom"] = if (ValidFrom == null) null else ValidFrom
        ["ValidUntil"] = if (ValidUntil == null) null else ValidUntil
    }

}


typealias EC2FleetExcessCapacityTerminationPolicy = "termination"|"no-termination"

typealias EC2FleetType = "maintain"|"request"|"instant"
