/// AWS::EC2::Subnet
///
/// Generated by rain build --pkl-class AWS::EC2::Subnet
module aws.ec2.subnet

import "../../cloudformation.pkl"

/// Specifies a tag. For more information, see [Add tags to a resource](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#cloudformation-add-tag-specifications).
open class SubnetTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// Specifies a subnet for the specified VPC.
///
///  For an IPv4 only subnet, specify an IPv4 CIDR block. If the VPC has an IPv6 CIDR block, you can create an IPv6 only subnet or a dual stack subnet instead. For an IPv6 only subnet, specify an IPv6 CIDR block. For a dual stack subnet, specify both an IPv4 CIDR block and an IPv6 CIDR block.
///  For more information, see [Subnets for your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html) in the *Amazon VPC User Guide*.
open class Subnet extends cloudformation.Resource {

    Type = "AWS::EC2::Subnet"


    /// Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
    ///
    ///  If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
    hidden AssignIpv6AddressOnCreation: (Boolean|Mapping)?

    /// The Availability Zone of the subnet.
    ///
    ///  If you update this property, you must also update the ``CidrBlock`` property.
    hidden AvailabilityZone: (String|Mapping)?

    /// The AZ ID of the subnet.
    hidden AvailabilityZoneId: (String|Mapping)?

    /// The IPv4 CIDR block assigned to the subnet.
    ///
    ///  If you update this property, we create a new subnet, and then delete the existing one.
    hidden CidrBlock: (String|Mapping)?

    /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64) in the *User Guide*.
    hidden EnableDns64: (Boolean|Mapping)?

    /// Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network interfaces in this subnet are the secondary network interface (eth1).
    hidden EnableLniAtDeviceIndex: (Int|Mapping)?

    /// An IPv4 IPAM pool ID for the subnet.
    hidden Ipv4IpamPoolId: (String|Mapping)?

    /// An IPv4 netmask length for the subnet.
    hidden Ipv4NetmaskLength: (Int|Mapping)?

    /// The IPv6 CIDR block.
    ///
    ///  If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
    hidden Ipv6CidrBlock: (String|Mapping)?

    /// The IPv6 network ranges for the subnet, in CIDR notation.
    hidden Ipv6CidrBlocks: (Listing<String|Mapping>)?

    /// An IPv6 IPAM pool ID for the subnet.
    hidden Ipv6IpamPoolId: (String|Mapping)?

    /// Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
    hidden Ipv6Native: (Boolean|Mapping)?

    /// An IPv6 netmask length for the subnet.
    hidden Ipv6NetmaskLength: (Int|Mapping)?

    /// Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``.
    ///
    ///   AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
    hidden MapPublicIpOnLaunch: (Boolean|Mapping)?

    /// The Amazon Resource Name (ARN) of the Outpost.
    hidden OutpostArn: (String|Mapping)?

    /// The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
    ///
    ///  Available options:
    ///   +  EnableResourceNameDnsAAAARecord (true | false)
    ///   +  EnableResourceNameDnsARecord (true | false)
    ///   +  HostnameType (ip-name | resource-name)
    hidden PrivateDnsNameOptionsOnLaunch: (Dynamic)?

    /// Any tags assigned to the subnet.
    hidden Tags: (Listing<SubnetTag>)?

    /// The ID of the VPC the subnet is in.
    ///
    ///  If you update this property, you must also update the ``CidrBlock`` property.
    hidden VpcId: String|Mapping

    Properties {
        ["AssignIpv6AddressOnCreation"] = if (AssignIpv6AddressOnCreation == null) null else AssignIpv6AddressOnCreation
        ["AvailabilityZone"] = if (AvailabilityZone == null) null else AvailabilityZone
        ["AvailabilityZoneId"] = if (AvailabilityZoneId == null) null else AvailabilityZoneId
        ["CidrBlock"] = if (CidrBlock == null) null else CidrBlock
        ["EnableDns64"] = if (EnableDns64 == null) null else EnableDns64
        ["EnableLniAtDeviceIndex"] = if (EnableLniAtDeviceIndex == null) null else EnableLniAtDeviceIndex
        ["Ipv4IpamPoolId"] = if (Ipv4IpamPoolId == null) null else Ipv4IpamPoolId
        ["Ipv4NetmaskLength"] = if (Ipv4NetmaskLength == null) null else Ipv4NetmaskLength
        ["Ipv6CidrBlock"] = if (Ipv6CidrBlock == null) null else Ipv6CidrBlock
        ["Ipv6CidrBlocks"] = if (Ipv6CidrBlocks == null) null else Ipv6CidrBlocks
        ["Ipv6IpamPoolId"] = if (Ipv6IpamPoolId == null) null else Ipv6IpamPoolId
        ["Ipv6Native"] = if (Ipv6Native == null) null else Ipv6Native
        ["Ipv6NetmaskLength"] = if (Ipv6NetmaskLength == null) null else Ipv6NetmaskLength
        ["MapPublicIpOnLaunch"] = if (MapPublicIpOnLaunch == null) null else MapPublicIpOnLaunch
        ["OutpostArn"] = if (OutpostArn == null) null else OutpostArn
        ["PrivateDnsNameOptionsOnLaunch"] = if (PrivateDnsNameOptionsOnLaunch == null) null else PrivateDnsNameOptionsOnLaunch
        ["Tags"] = if (Tags == null) null else Tags
        ["VpcId"] = if (VpcId == null) null else VpcId
    }

}
