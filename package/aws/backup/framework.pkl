/// AWS::Backup::Framework
///
/// Generated by rain build --pkl-class AWS::Backup::Framework
module aws.backup.framework

import "../../cloudformation.pkl"

/// 
open class FrameworkControlInputParameter {
    ParameterName: String|Mapping
    ParameterValue: String|Mapping
}

/// 
open class FrameworkFrameworkControl {
    ControlInputParameters: (Listing<FrameworkControlInputParameter>)?
    ControlName: String|Mapping
    ControlScope: (Dynamic)?
}

/// A key-value pair to associate with a resource.
open class FrameworkTag {
    Key: (String|Mapping)?
    Value: (String|Mapping)?
}

/// Contains detailed information about a framework. Frameworks contain controls, which evaluate and report on your backup events and resources. Frameworks generate daily compliance results.
open class Framework extends cloudformation.Resource {

    Type = "AWS::Backup::Framework"


    /// Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
    hidden FrameworkControls: Listing<FrameworkFrameworkControl>

    /// An optional description of the framework with a maximum 1,024 characters.
    hidden FrameworkDescription: (String|Mapping)?

    /// The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
    hidden FrameworkName: (String(matches(Regex(#"[a-zA-Z][_a-zA-Z0-9]*"#)))|Mapping)?

    /// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
    hidden FrameworkTags: (Listing<FrameworkTag>)?

    Properties {
        ["FrameworkControls"] = if (FrameworkControls == null) null else FrameworkControls
        ["FrameworkDescription"] = if (FrameworkDescription == null) null else FrameworkDescription
        ["FrameworkName"] = if (FrameworkName == null) null else FrameworkName
        ["FrameworkTags"] = if (FrameworkTags == null) null else FrameworkTags
    }

}
