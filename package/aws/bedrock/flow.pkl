/// AWS::Bedrock::Flow
///
/// Generated by rain build --pkl-class AWS::Bedrock::Flow
module aws.bedrock.flow

import "../../cloudformation.pkl"

/// Agent flow node configuration
open class FlowAgentFlowNodeConfiguration {
    AgentAliasArn: String(matches(Regex(#"^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:agent-alias/[0-9a-zA-Z]{10}/[0-9a-zA-Z]{10}$"#)))|Mapping
}

typealias FlowCollectorFlowNodeConfiguration = Dynamic


/// Condition flow node configuration
open class FlowConditionFlowNodeConfiguration {
    Conditions: Listing<FlowFlowCondition>
}

typealias FlowDefinitionSubstitutions = Mapping<String, Any>


/// Condition branch for a condition node
open class FlowFlowCondition {
    Expression: (String|Mapping)?
    Name: String(matches(Regex(#"^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$"#)))|Mapping
}

/// Conditional connection configuration
open class FlowFlowConditionalConnectionConfiguration {
    Condition: String(matches(Regex(#"^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$"#)))|Mapping
}

/// Flow connection
open class FlowFlowConnection {
    Configuration: (FlowFlowConnectionConfiguration)?
    Name: String(matches(Regex(#"^[a-zA-Z]([_]?[0-9a-zA-Z]){1,100}$"#)))|Mapping
    Source: String(matches(Regex(#"^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$"#)))|Mapping
    Target: String(matches(Regex(#"^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$"#)))|Mapping
    Type: FlowFlowConnectionType
}

typealias FlowFlowConnectionConfiguration = FlowFlowConnectionConfigurationData|FlowFlowConnectionConfigurationConditional


/// 
open class FlowFlowConnectionConfigurationConditional {
    Conditional: FlowFlowConditionalConnectionConfiguration
}

/// 
open class FlowFlowConnectionConfigurationData {
    Data: FlowFlowDataConnectionConfiguration
}

typealias FlowFlowConnectionType = String|Mapping


/// Data connection configuration
open class FlowFlowDataConnectionConfiguration {
    SourceOutput: String(matches(Regex(#"^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$"#)))|Mapping
    TargetInput: String(matches(Regex(#"^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$"#)))|Mapping
}

/// Flow definition
open class FlowFlowDefinition {
    Connections: (Listing<FlowFlowConnection>)?
    Nodes: (Listing<FlowFlowNode>)?
}

/// Internal mixin for flow node
open class FlowFlowNode {
    Configuration: (FlowFlowNodeConfiguration)?
    Inputs: (Listing<FlowFlowNodeInput>)?
    Name: String(matches(Regex(#"^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$"#)))|Mapping
    Outputs: (Listing<FlowFlowNodeOutput>)?
    Type: FlowFlowNodeType
}

typealias FlowFlowNodeConfiguration = FlowFlowNodeConfigurationInput|FlowFlowNodeConfigurationOutput|FlowFlowNodeConfigurationKnowledgeBase|FlowFlowNodeConfigurationCondition|FlowFlowNodeConfigurationLex|FlowFlowNodeConfigurationPrompt|FlowFlowNodeConfigurationLambdaFunction|FlowFlowNodeConfigurationAgent|FlowFlowNodeConfigurationStorage|FlowFlowNodeConfigurationIterator|FlowFlowNodeConfigurationCollector|FlowFlowNodeConfigurationRetrieval


/// 
open class FlowFlowNodeConfigurationAgent {
    Agent: FlowAgentFlowNodeConfiguration
}

/// 
open class FlowFlowNodeConfigurationCollector {
    Collector: FlowCollectorFlowNodeConfiguration
}

/// 
open class FlowFlowNodeConfigurationCondition {
    Condition: FlowConditionFlowNodeConfiguration
}

/// 
open class FlowFlowNodeConfigurationInput {
    Input: FlowInputFlowNodeConfiguration
}

/// 
open class FlowFlowNodeConfigurationIterator {
    Iterator: FlowIteratorFlowNodeConfiguration
}

/// 
open class FlowFlowNodeConfigurationKnowledgeBase {
    KnowledgeBase: FlowKnowledgeBaseFlowNodeConfiguration
}

/// 
open class FlowFlowNodeConfigurationLambdaFunction {
    LambdaFunction: FlowLambdaFunctionFlowNodeConfiguration
}

/// 
open class FlowFlowNodeConfigurationLex {
    Lex: FlowLexFlowNodeConfiguration
}

/// 
open class FlowFlowNodeConfigurationOutput {
    Output: FlowOutputFlowNodeConfiguration
}

/// 
open class FlowFlowNodeConfigurationPrompt {
    Prompt: FlowPromptFlowNodeConfiguration
}

/// 
open class FlowFlowNodeConfigurationRetrieval {
    Retrieval: FlowRetrievalFlowNodeConfiguration
}

/// 
open class FlowFlowNodeConfigurationStorage {
    Storage: FlowStorageFlowNodeConfiguration
}

typealias FlowFlowNodeIODataType = String|Mapping


/// Input to a node in a flow
open class FlowFlowNodeInput {
    Expression: String|Mapping
    Name: String(matches(Regex(#"^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$"#)))|Mapping
    Type: FlowFlowNodeIODataType
}

/// Output of a node in a flow
open class FlowFlowNodeOutput {
    Name: String(matches(Regex(#"^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$"#)))|Mapping
    Type: FlowFlowNodeIODataType
}

typealias FlowFlowNodeType = String|Mapping


typealias FlowFlowStatus = String|Mapping


/// Validation for Flow
open class FlowFlowValidation {
    Message: String|Mapping
}

typealias FlowFlowValidations = Listing<(FlowFlowValidation)?>


/// Configuration for a guardrail
open class FlowGuardrailConfiguration {
    GuardrailIdentifier: (String(matches(Regex(#"^(([a-z0-9]+)|(arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:guardrail/[a-z0-9]+))$"#)))|Mapping)?
    GuardrailVersion: (String(matches(Regex(#"^(([0-9]{1,8})|(DRAFT))$"#)))|Mapping)?
}

typealias FlowInputFlowNodeConfiguration = Dynamic


typealias FlowIteratorFlowNodeConfiguration = Dynamic


/// Knowledge base flow node configuration
open class FlowKnowledgeBaseFlowNodeConfiguration {
    GuardrailConfiguration: (FlowGuardrailConfiguration)?
    KnowledgeBaseId: String(matches(Regex(#"^[0-9a-zA-Z]+$"#)))|Mapping
    ModelId: (String(matches(Regex(#"^(arn:aws(-[^:]{1,12})?:(bedrock|sagemaker):[a-z0-9-]{1,20}:([0-9]{12})?:([a-z-]+/)?)?([a-zA-Z0-9.-]{1,63}){0,2}(([:][a-z0-9-]{1,63}){0,2})?(/[a-z0-9]{1,12})?$"#)))|Mapping)?
}

/// Lambda function flow node configuration
open class FlowLambdaFunctionFlowNodeConfiguration {
    LambdaArn: String(matches(Regex(#"^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_\.]+(:(\$LATEST|[a-zA-Z0-9-_]+))?$"#)))|Mapping
}

/// Lex flow node configuration
open class FlowLexFlowNodeConfiguration {
    BotAliasArn: String(matches(Regex(#"^arn:aws(|-us-gov):lex:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:bot-alias/[0-9a-zA-Z]+/[0-9a-zA-Z]+$"#)))|Mapping
    LocaleId: String|Mapping
}

typealias FlowOutputFlowNodeConfiguration = Dynamic


/// Prompt flow node configuration
open class FlowPromptFlowNodeConfiguration {
    GuardrailConfiguration: (FlowGuardrailConfiguration)?
    SourceConfiguration: FlowPromptFlowNodeSourceConfiguration
}

/// Inline prompt configuration for prompt node
open class FlowPromptFlowNodeInlineConfiguration {
    InferenceConfiguration: (FlowPromptInferenceConfiguration)?
    ModelId: String(matches(Regex(#"^(arn:aws(-[^:]{1,12})?:(bedrock|sagemaker):[a-z0-9-]{1,20}:([0-9]{12})?:([a-z-]+/)?)?([a-zA-Z0-9.-]{1,63}){0,2}(([:][a-z0-9-]{1,63}){0,2})?(/[a-z0-9]{1,12})?$"#)))|Mapping
    TemplateConfiguration: FlowPromptTemplateConfiguration
    TemplateType: FlowPromptTemplateType
}

/// Resource prompt configuration for prompt node
open class FlowPromptFlowNodeResourceConfiguration {
    PromptArn: String(matches(Regex(#"^(arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:prompt/[0-9a-zA-Z]{10}(?::[0-9]{1,5})?)$"#)))|Mapping
}

typealias FlowPromptFlowNodeSourceConfiguration = FlowPromptFlowNodeSourceConfigurationResource|FlowPromptFlowNodeSourceConfigurationInline


/// 
open class FlowPromptFlowNodeSourceConfigurationInline {
    Inline: FlowPromptFlowNodeInlineConfiguration
}

/// 
open class FlowPromptFlowNodeSourceConfigurationResource {
    Resource: FlowPromptFlowNodeResourceConfiguration
}

typealias FlowPromptInferenceConfiguration = FlowPromptInferenceConfigurationText


/// 
open class FlowPromptInferenceConfigurationText {
    Text: FlowPromptModelInferenceConfiguration
}

/// Input variable
open class FlowPromptInputVariable {
    Name: (String(matches(Regex(#"^([0-9a-zA-Z][_-]?){1,100}$"#)))|Mapping)?
}

/// Prompt model inference configuration
open class FlowPromptModelInferenceConfiguration {
    MaxTokens: (Number|Mapping)?
    StopSequences: (Listing<String|Mapping>)?
    Temperature: (Number|Mapping)?
    TopP: (Number|Mapping)?
}

typealias FlowPromptTemplateConfiguration = FlowPromptTemplateConfigurationText


/// 
open class FlowPromptTemplateConfigurationText {
    Text: FlowTextPromptTemplateConfiguration
}

typealias FlowPromptTemplateType = String|Mapping


/// Retrieval flow node configuration
open class FlowRetrievalFlowNodeConfiguration {
    ServiceConfiguration: FlowRetrievalFlowNodeServiceConfiguration
}

/// s3 Retrieval configuration for Retrieval node
open class FlowRetrievalFlowNodeS3Configuration {
    BucketName: String(matches(Regex(#"^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$"#)))|Mapping
}

typealias FlowRetrievalFlowNodeServiceConfiguration = FlowRetrievalFlowNodeServiceConfigurationS3


/// 
open class FlowRetrievalFlowNodeServiceConfigurationS3 {
    S3: (FlowRetrievalFlowNodeS3Configuration)?
}

/// A bucket, key and optional version pointing to an S3 object containing a UTF-8 encoded JSON string Definition with the same schema as the Definition property of this resource
open class FlowS3Location {
    Bucket: String(matches(Regex(#"^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$"#)))|Mapping
    Key: String|Mapping
    Version: (String|Mapping)?
}

/// Storage flow node configuration
open class FlowStorageFlowNodeConfiguration {
    ServiceConfiguration: FlowStorageFlowNodeServiceConfiguration
}

/// s3 storage configuration for storage node
open class FlowStorageFlowNodeS3Configuration {
    BucketName: String(matches(Regex(#"^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$"#)))|Mapping
}

typealias FlowStorageFlowNodeServiceConfiguration = FlowStorageFlowNodeServiceConfigurationS3


/// 
open class FlowStorageFlowNodeServiceConfigurationS3 {
    S3: (FlowStorageFlowNodeS3Configuration)?
}

typealias FlowTagsMap = Mapping<String, Any>


/// Configuration for text prompt template
open class FlowTextPromptTemplateConfiguration {
    InputVariables: (Listing<FlowPromptInputVariable>)?
    Text: String|Mapping
}

/// Definition of AWS::Bedrock::Flow Resource Type
open class Flow extends cloudformation.Resource {

    Type = "AWS::Bedrock::Flow"


    /// A KMS key ARN
    hidden CustomerEncryptionKeyArn: (String(matches(Regex(#"^arn:aws(|-cn|-us-gov):kms:[a-zA-Z0-9-]*:[0-9]{12}:key/[a-zA-Z0-9-]{36}$"#)))|Mapping)?

    /// 
    hidden Definition: (FlowFlowDefinition)?

    /// 
    hidden DefinitionS3Location: (FlowS3Location)?

    /// A JSON string containing a Definition with the same schema as the Definition property of this resource
    hidden DefinitionString: (String|Mapping)?

    /// 
    hidden DefinitionSubstitutions: (FlowDefinitionSubstitutions)?

    /// Description of the flow
    hidden Description: (String|Mapping)?

    /// ARN of a IAM role
    hidden ExecutionRoleArn: String(matches(Regex(#"^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/(service-role/)?.+$"#)))|Mapping

    /// Name for the flow
    hidden Name: String(matches(Regex(#"^([0-9a-zA-Z][_-]?){1,100}$"#)))|Mapping

    /// 
    hidden Tags: (FlowTagsMap)?

    /// 
    hidden TestAliasTags: (FlowTagsMap)?

    Properties {
        ["CustomerEncryptionKeyArn"] = if (CustomerEncryptionKeyArn == null) null else CustomerEncryptionKeyArn
        ["Definition"] = if (Definition == null) null else Definition
        ["DefinitionS3Location"] = if (DefinitionS3Location == null) null else DefinitionS3Location
        ["DefinitionString"] = if (DefinitionString == null) null else DefinitionString
        ["DefinitionSubstitutions"] = if (DefinitionSubstitutions == null) null else DefinitionSubstitutions
        ["Description"] = if (Description == null) null else Description
        ["ExecutionRoleArn"] = if (ExecutionRoleArn == null) null else ExecutionRoleArn
        ["Name"] = if (Name == null) null else Name
        ["Tags"] = if (Tags == null) null else Tags
        ["TestAliasTags"] = if (TestAliasTags == null) null else TestAliasTags
    }

}
