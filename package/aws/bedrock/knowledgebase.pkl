/// AWS::Bedrock::KnowledgeBase
///
/// Generated by rain build --pkl-class AWS::Bedrock::KnowledgeBase
module aws.bedrock.knowledgebase

import "../../cloudformation.pkl"

/// Contains details about the embeddings model used for the knowledge base.
open class KnowledgeBaseKnowledgeBaseConfiguration {
    Type: KnowledgeBaseKnowledgeBaseType
    VectorKnowledgeBaseConfiguration: KnowledgeBaseVectorKnowledgeBaseConfiguration
}

typealias KnowledgeBaseKnowledgeBaseStatus = String|Mapping


typealias KnowledgeBaseKnowledgeBaseStorageType = String|Mapping


typealias KnowledgeBaseKnowledgeBaseType = String|Mapping


/// Contains the storage configuration of the knowledge base in Amazon OpenSearch Service.
open class KnowledgeBaseOpenSearchServerlessConfiguration {
    CollectionArn: String(matches(Regex(#"^arn:aws:aoss:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:collection/[a-z0-9-]{3,32}$"#)))|Mapping
    FieldMapping: KnowledgeBaseOpenSearchServerlessFieldMapping
    VectorIndexName: String(matches(Regex(#"^.*$"#)))|Mapping
}

/// A mapping of Bedrock Knowledge Base fields to OpenSearch Serverless field names
open class KnowledgeBaseOpenSearchServerlessFieldMapping {
    MetadataField: String(matches(Regex(#"^.*$"#)))|Mapping
    TextField: String(matches(Regex(#"^.*$"#)))|Mapping
    VectorField: String(matches(Regex(#"^.*$"#)))|Mapping
}

/// Contains the storage configuration of the knowledge base in Pinecone.
open class KnowledgeBasePineconeConfiguration {
    ConnectionString: String(matches(Regex(#"^.*$"#)))|Mapping
    CredentialsSecretArn: String(matches(Regex(#"^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$"#)))|Mapping
    FieldMapping: KnowledgeBasePineconeFieldMapping
    Namespace: (String(matches(Regex(#"^.*$"#)))|Mapping)?
}

/// Contains the names of the fields to which to map information about the vector store.
open class KnowledgeBasePineconeFieldMapping {
    MetadataField: String(matches(Regex(#"^.*$"#)))|Mapping
    TextField: String(matches(Regex(#"^.*$"#)))|Mapping
}

/// Contains details about the storage configuration of the knowledge base in Amazon RDS. For more information, see Create a vector index in Amazon RDS.
open class KnowledgeBaseRdsConfiguration {
    CredentialsSecretArn: String(matches(Regex(#"^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$"#)))|Mapping
    DatabaseName: String(matches(Regex(#"^[a-zA-Z0-9_\-]+$"#)))|Mapping
    FieldMapping: KnowledgeBaseRdsFieldMapping
    ResourceArn: String(matches(Regex(#"^arn:aws(|-cn|-us-gov):rds:[a-zA-Z0-9-]*:[0-9]{12}:cluster:[a-zA-Z0-9-]{1,63}$"#)))|Mapping
    TableName: String(matches(Regex(#"^[a-zA-Z0-9_\.\-]+$"#)))|Mapping
}

/// Contains the names of the fields to which to map information about the vector store.
open class KnowledgeBaseRdsFieldMapping {
    MetadataField: String(matches(Regex(#"^[a-zA-Z0-9_\-]+$"#)))|Mapping
    PrimaryKeyField: String(matches(Regex(#"^[a-zA-Z0-9_\-]+$"#)))|Mapping
    TextField: String(matches(Regex(#"^[a-zA-Z0-9_\-]+$"#)))|Mapping
    VectorField: String(matches(Regex(#"^[a-zA-Z0-9_\-]+$"#)))|Mapping
}

/// Contains the storage configuration of the knowledge base in Redis Enterprise Cloud.
open class KnowledgeBaseRedisEnterpriseCloudConfiguration {
    CredentialsSecretArn: String(matches(Regex(#"^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$"#)))|Mapping
    Endpoint: String(matches(Regex(#"^.*$"#)))|Mapping
    FieldMapping: KnowledgeBaseRedisEnterpriseCloudFieldMapping
    VectorIndexName: String(matches(Regex(#"^.*$"#)))|Mapping
}

/// Contains the names of the fields to which to map information about the vector store.
open class KnowledgeBaseRedisEnterpriseCloudFieldMapping {
    MetadataField: String(matches(Regex(#"^.*$"#)))|Mapping
    TextField: String(matches(Regex(#"^.*$"#)))|Mapping
    VectorField: String(matches(Regex(#"^.*$"#)))|Mapping
}

/// The vector store service in which the knowledge base is stored.
open class KnowledgeBaseStorageConfiguration {
    OpensearchServerlessConfiguration: (KnowledgeBaseOpenSearchServerlessConfiguration)?
    PineconeConfiguration: (KnowledgeBasePineconeConfiguration)?
    RdsConfiguration: (KnowledgeBaseRdsConfiguration)?
    Type: KnowledgeBaseKnowledgeBaseStorageType
}

typealias KnowledgeBaseTagsMap = Mapping<String, Any>


/// Contains details about the model used to create vector embeddings for the knowledge base.
open class KnowledgeBaseVectorKnowledgeBaseConfiguration {
    EmbeddingModelArn: String(matches(Regex(#"^(arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:(([0-9]{12}:custom-model/[a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}/[a-z0-9]{12})|(:foundation-model/[a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}([.:]?[a-z0-9-]{1,63}))|([0-9]{12}:provisioned-model/[a-z0-9]{12})))|([a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}([.:]?[a-z0-9-]{1,63}))|(([0-9a-zA-Z][_-]?)+)$"#)))|Mapping
}

/// Definition of AWS::Bedrock::KnowledgeBase Resource Type
open class KnowledgeBase extends cloudformation.Resource {

    Type = "AWS::Bedrock::KnowledgeBase"


    /// Description of the Resource.
    hidden Description: (String|Mapping)?

    /// 
    hidden KnowledgeBaseConfiguration: KnowledgeBaseKnowledgeBaseConfiguration

    /// The name of the knowledge base.
    hidden Name: String(matches(Regex(#"^([0-9a-zA-Z][_-]?){1,100}$"#)))|Mapping

    /// The ARN of the IAM role with permissions to invoke API operations on the knowledge base. The ARN must begin with AmazonBedrockExecutionRoleForKnowledgeBase_
    hidden RoleArn: String(matches(Regex(#"^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/.+$"#)))|Mapping

    /// 
    hidden StorageConfiguration: KnowledgeBaseStorageConfiguration

    /// 
    hidden Tags: (KnowledgeBaseTagsMap)?

    Properties {
        ["Description"] = if (Description == null) null else Description
        ["KnowledgeBaseConfiguration"] = if (KnowledgeBaseConfiguration == null) null else KnowledgeBaseConfiguration
        ["Name"] = if (Name == null) null else Name
        ["RoleArn"] = if (RoleArn == null) null else RoleArn
        ["StorageConfiguration"] = if (StorageConfiguration == null) null else StorageConfiguration
        ["Tags"] = if (Tags == null) null else Tags
    }

}
