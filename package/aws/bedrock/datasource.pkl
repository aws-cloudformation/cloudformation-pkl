/// AWS::Bedrock::DataSource
///
/// Generated by rain build --pkl-class AWS::Bedrock::DataSource
module aws.bedrock.datasource

import "../../cloudformation.pkl"

/// Details about how to chunk the documents in the data source. A chunk refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried.
open class DataSourceChunkingConfiguration {
    ChunkingStrategy: DataSourceChunkingStrategy
    FixedSizeChunkingConfiguration: (DataSourceFixedSizeChunkingConfiguration)?
}

typealias DataSourceChunkingStrategy = String|Mapping


/// Specifies a raw data source location to ingest.
open class DataSourceDataSourceConfiguration {
    S3Configuration: DataSourceS3DataSourceConfiguration
    Type: DataSourceDataSourceType
}

typealias DataSourceDataSourceStatus = String|Mapping


typealias DataSourceDataSourceType = String|Mapping


/// Configurations for when you choose fixed-size chunking. If you set the chunkingStrategy as NONE, exclude this field.
open class DataSourceFixedSizeChunkingConfiguration {
    MaxTokens: Int|Mapping
    OverlapPercentage: Int|Mapping
}

/// Contains information about the S3 configuration of the data source.
open class DataSourceS3DataSourceConfiguration {
    BucketArn: String(matches(Regex(#"^arn:aws(|-cn|-us-gov):s3:::[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]$"#)))|Mapping
    InclusionPrefixes: (Listing<String|Mapping>)?
}

/// Contains details about the server-side encryption for the data source.
open class DataSourceServerSideEncryptionConfiguration {
    KmsKeyArn: (String(matches(Regex(#"^arn:aws(|-cn|-us-gov):kms:[a-zA-Z0-9-]*:[0-9]{12}:key/[a-zA-Z0-9-]{36}$"#)))|Mapping)?
}

/// Details about how to chunk the documents in the data source. A chunk refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried.
open class DataSourceVectorIngestionConfiguration {
    ChunkingConfiguration: (DataSourceChunkingConfiguration)?
}

/// Definition of AWS::Bedrock::DataSource Resource Type
open class DataSource extends cloudformation.Resource {

    Type = "AWS::Bedrock::DataSource"


    /// 
    hidden DataSourceConfiguration: DataSourceDataSourceConfiguration

    /// Description of the Resource.
    hidden Description: (String|Mapping)?

    /// The unique identifier of the knowledge base to which to add the data source.
    hidden KnowledgeBaseId: String(matches(Regex(#"^[0-9a-zA-Z]{10}$"#)))|Mapping

    /// The name of the data source.
    hidden Name: String(matches(Regex(#"^([0-9a-zA-Z][_-]?){1,100}$"#)))|Mapping

    /// 
    hidden ServerSideEncryptionConfiguration: (DataSourceServerSideEncryptionConfiguration)?

    /// 
    hidden VectorIngestionConfiguration: (DataSourceVectorIngestionConfiguration)?

    Properties {
        ["DataSourceConfiguration"] = if (DataSourceConfiguration == null) null else DataSourceConfiguration
        ["Description"] = if (Description == null) null else Description
        ["KnowledgeBaseId"] = if (KnowledgeBaseId == null) null else KnowledgeBaseId
        ["Name"] = if (Name == null) null else Name
        ["ServerSideEncryptionConfiguration"] = if (ServerSideEncryptionConfiguration == null) null else ServerSideEncryptionConfiguration
        ["VectorIngestionConfiguration"] = if (VectorIngestionConfiguration == null) null else VectorIngestionConfiguration
    }

}
