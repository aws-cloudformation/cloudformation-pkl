/// AWS::Bedrock::DataSource
///
/// Generated by rain build --pkl-class AWS::Bedrock::DataSource
module aws.bedrock.datasource

import "../../cloudformation.pkl"

/// Settings for a foundation model used to parse documents for a data source.
open class DataSourceBedrockFoundationModelConfiguration {
    ModelArn: String(matches(Regex(#"^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}::foundation-model/([a-z0-9-]{1,63}[.]{1}[a-z0-9-]{1,63}([.]?[a-z0-9-]{1,63})([:][a-z0-9-]{1,63}){0,2})|(arn:aws(|-us-gov|-cn|-iso|-iso-b):bedrock:(|[0-9a-z-]{1,20}):(|[0-9]{12}):(inference-profile|application-inference-profile)/[a-zA-Z0-9-:.]+)$"#)))|Mapping
    ParsingPrompt: (DataSourceParsingPrompt)?
}

/// Details about how to chunk the documents in the data source. A chunk refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried.
open class DataSourceChunkingConfiguration {
    ChunkingStrategy: DataSourceChunkingStrategy
    FixedSizeChunkingConfiguration: (DataSourceFixedSizeChunkingConfiguration)?
    HierarchicalChunkingConfiguration: (DataSourceHierarchicalChunkingConfiguration)?
    SemanticChunkingConfiguration: (DataSourceSemanticChunkingConfiguration)?
}

typealias DataSourceChunkingStrategy = String|Mapping


/// The configuration of the Confluence content. For example, configuring specific types of Confluence content.
open class DataSourceConfluenceCrawlerConfiguration {
    FilterConfiguration: (DataSourceCrawlFilterConfiguration)?
}

/// The configuration information to connect to Confluence as your data source.
open class DataSourceConfluenceDataSourceConfiguration {
    CrawlerConfiguration: (DataSourceConfluenceCrawlerConfiguration)?
    SourceConfiguration: DataSourceConfluenceSourceConfiguration
}

typealias ConfluenceSourceConfigurationAuthType = "BASIC"|"OAUTH2_CLIENT_CREDENTIALS"

typealias ConfluenceSourceConfigurationHostType = "SAAS"

/// The endpoint information to connect to your Confluence data source.
open class DataSourceConfluenceSourceConfiguration {
    AuthType: ConfluenceSourceConfigurationAuthType|Mapping
    CredentialsSecretArn: String(matches(Regex(#"^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$"#)))|Mapping
    HostType: ConfluenceSourceConfigurationHostType|Mapping
    HostUrl: String(matches(Regex(#"^https://[A-Za-z0-9][^\s]*$"#)))|Mapping
}

typealias CrawlFilterConfigurationType = "PATTERN"

/// The type of filtering that you want to apply to certain objects or content of the data source. For example, the PATTERN type is regular expression patterns you can apply to filter your content.
open class DataSourceCrawlFilterConfiguration {
    PatternObjectFilter: (DataSourcePatternObjectFilterConfiguration)?
    Type: CrawlFilterConfigurationType|Mapping
}

/// Settings for customizing steps in the data source content ingestion pipeline.
open class DataSourceCustomTransformationConfiguration {
    IntermediateStorage: DataSourceIntermediateStorage
    Transformations: Listing<DataSourceTransformation>
}

typealias DataSourceDataDeletionPolicy = String|Mapping


/// Specifies a raw data source location to ingest.
open class DataSourceDataSourceConfiguration {
    ConfluenceConfiguration: (DataSourceConfluenceDataSourceConfiguration)?
    S3Configuration: (DataSourceS3DataSourceConfiguration)?
    SalesforceConfiguration: (DataSourceSalesforceDataSourceConfiguration)?
    SharePointConfiguration: (DataSourceSharePointDataSourceConfiguration)?
    Type: DataSourceDataSourceType
    WebConfiguration: (DataSourceWebDataSourceConfiguration)?
}

typealias DataSourceDataSourceStatus = String|Mapping


typealias DataSourceDataSourceType = String|Mapping


typealias DataSourceFilterList = Listing<(String|Mapping)?>


/// Configurations for when you choose fixed-size chunking. If you set the chunkingStrategy as NONE, exclude this field.
open class DataSourceFixedSizeChunkingConfiguration {
    MaxTokens: Int|Mapping
    OverlapPercentage: Int|Mapping
}

/// Configurations for when you choose hierarchical chunking. If you set the chunkingStrategy as NONE, exclude this field.
open class DataSourceHierarchicalChunkingConfiguration {
    LevelConfigurations: Listing<DataSourceHierarchicalChunkingLevelConfiguration>
    OverlapTokens: Int|Mapping
}

/// Token settings for a layer in a hierarchical chunking configuration.
open class DataSourceHierarchicalChunkingLevelConfiguration {
    MaxTokens: Int|Mapping
}

/// A location for storing content from data sources temporarily as it is processed by custom components in the ingestion pipeline.
open class DataSourceIntermediateStorage {
    S3Location: DataSourceS3Location
}

/// Settings for parsing document contents
open class DataSourceParsingConfiguration {
    BedrockFoundationModelConfiguration: (DataSourceBedrockFoundationModelConfiguration)?
    ParsingStrategy: DataSourceParsingStrategy
}

/// Instructions for interpreting the contents of a document.
open class DataSourceParsingPrompt {
    ParsingPromptText: String|Mapping
}

typealias DataSourceParsingStrategy = String|Mapping


/// The specific filters applied to your data source content. You can filter out or include certain content.
open class DataSourcePatternObjectFilter {
    ExclusionFilters: (DataSourceFilterList)?
    InclusionFilters: (DataSourceFilterList)?
    ObjectType: String|Mapping
}

/// The configuration of specific filters applied to your data source content. You can filter out or include certain content.
open class DataSourcePatternObjectFilterConfiguration {
    Filters: DataSourcePatternObjectFilterList
}

typealias DataSourcePatternObjectFilterList = Listing<(DataSourcePatternObjectFilter)?>


/// The configuration information to connect to Amazon S3 as your data source.
open class DataSourceS3DataSourceConfiguration {
    BucketArn: String(matches(Regex(#"^arn:aws(|-cn|-us-gov):s3:::[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]$"#)))|Mapping
    BucketOwnerAccountId: (String(matches(Regex(#"^[0-9]{12}$"#)))|Mapping)?
    InclusionPrefixes: (Listing<String|Mapping>)?
}

/// An Amazon S3 location.
open class DataSourceS3Location {
    URI: String(matches(Regex(#"^s3://.{1,128}$"#)))|Mapping
}

/// The configuration of filtering the Salesforce content. For example, configuring regular expression patterns to include or exclude certain content.
open class DataSourceSalesforceCrawlerConfiguration {
    FilterConfiguration: (DataSourceCrawlFilterConfiguration)?
}

/// The configuration information to connect to Salesforce as your data source.
open class DataSourceSalesforceDataSourceConfiguration {
    CrawlerConfiguration: (DataSourceSalesforceCrawlerConfiguration)?
    SourceConfiguration: DataSourceSalesforceSourceConfiguration
}

typealias SalesforceSourceConfigurationAuthType = "OAUTH2_CLIENT_CREDENTIALS"

/// The endpoint information to connect to your Salesforce data source.
open class DataSourceSalesforceSourceConfiguration {
    AuthType: SalesforceSourceConfigurationAuthType|Mapping
    CredentialsSecretArn: String(matches(Regex(#"^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$"#)))|Mapping
    HostUrl: String(matches(Regex(#"^https://[A-Za-z0-9][^\s]*$"#)))|Mapping
}

/// A seed url object.
open class DataSourceSeedUrl {
    Url: String(matches(Regex(#"^https?://[A-Za-z0-9][^\s]*$"#)))|Mapping
}

typealias DataSourceSeedUrls = Listing<(DataSourceSeedUrl)?>


/// Configurations for when you choose semantic chunking. If you set the chunkingStrategy as NONE, exclude this field.
open class DataSourceSemanticChunkingConfiguration {
    BreakpointPercentileThreshold: Int|Mapping
    BufferSize: Int|Mapping
    MaxTokens: Int|Mapping
}

/// Contains details about the server-side encryption for the data source.
open class DataSourceServerSideEncryptionConfiguration {
    KmsKeyArn: (String(matches(Regex(#"^arn:aws(|-cn|-us-gov):kms:[a-zA-Z0-9-]*:[0-9]{12}:key/[a-zA-Z0-9-]{36}$"#)))|Mapping)?
}

/// The configuration of the SharePoint content. For example, configuring specific types of SharePoint content.
open class DataSourceSharePointCrawlerConfiguration {
    FilterConfiguration: (DataSourceCrawlFilterConfiguration)?
}

/// The configuration information to connect to SharePoint as your data source.
open class DataSourceSharePointDataSourceConfiguration {
    CrawlerConfiguration: (DataSourceSharePointCrawlerConfiguration)?
    SourceConfiguration: DataSourceSharePointSourceConfiguration
}

typealias SharePointSourceConfigurationAuthType = "OAUTH2_CLIENT_CREDENTIALS"

typealias SharePointSourceConfigurationHostType = "ONLINE"

/// The endpoint information to connect to your SharePoint data source.
open class DataSourceSharePointSourceConfiguration {
    AuthType: SharePointSourceConfigurationAuthType|Mapping
    CredentialsSecretArn: String(matches(Regex(#"^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$"#)))|Mapping
    Domain: String|Mapping
    HostType: SharePointSourceConfigurationHostType|Mapping
    SiteUrls: Listing<String|Mapping>
    TenantId: (String(matches(Regex(#"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"#)))|Mapping)?
}

typealias TransformationStepToApply = "POST_CHUNKING"

/// A Lambda function that processes documents.
open class DataSourceTransformation {
    StepToApply: TransformationStepToApply|Mapping
    TransformationFunction: DataSourceTransformationFunction
}

/// A Lambda function that processes documents.
open class DataSourceTransformationFunction {
    TransformationLambdaConfiguration: DataSourceTransformationLambdaConfiguration
}

/// A Lambda function that processes documents.
open class DataSourceTransformationLambdaConfiguration {
    LambdaArn: String(matches(Regex(#"^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_\.]+(:(\$LATEST|[a-zA-Z0-9-_]+))?$"#)))|Mapping
}

/// A url configuration.
open class DataSourceUrlConfiguration {
    SeedUrls: DataSourceSeedUrls
}

/// Details about how to chunk the documents in the data source. A chunk refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried.
open class DataSourceVectorIngestionConfiguration {
    ChunkingConfiguration: (DataSourceChunkingConfiguration)?
    CustomTransformationConfiguration: (DataSourceCustomTransformationConfiguration)?
    ParsingConfiguration: (DataSourceParsingConfiguration)?
}

/// Configuration for the web crawler.
open class DataSourceWebCrawlerConfiguration {
    CrawlerLimits: (DataSourceWebCrawlerLimits)?
    ExclusionFilters: (DataSourceFilterList)?
    InclusionFilters: (DataSourceFilterList)?
    Scope: (DataSourceWebScopeType)?
}

/// Limit settings for the web crawler.
open class DataSourceWebCrawlerLimits {
    RateLimit: (Int|Mapping)?
}

/// Configures a web data source location.
open class DataSourceWebDataSourceConfiguration {
    CrawlerConfiguration: (DataSourceWebCrawlerConfiguration)?
    SourceConfiguration: DataSourceWebSourceConfiguration
}

typealias DataSourceWebScopeType = String|Mapping


/// A web source configuration.
open class DataSourceWebSourceConfiguration {
    UrlConfiguration: DataSourceUrlConfiguration
}

/// Definition of AWS::Bedrock::DataSource Resource Type
open class DataSource extends cloudformation.Resource {

    Type = "AWS::Bedrock::DataSource"


    /// 
    hidden DataDeletionPolicy: (DataSourceDataDeletionPolicy)?

    /// 
    hidden DataSourceConfiguration: DataSourceDataSourceConfiguration

    /// Description of the Resource.
    hidden Description: (String|Mapping)?

    /// The unique identifier of the knowledge base to which to add the data source.
    hidden KnowledgeBaseId: String(matches(Regex(#"^[0-9a-zA-Z]{10}$"#)))|Mapping

    /// The name of the data source.
    hidden Name: String(matches(Regex(#"^([0-9a-zA-Z][_-]?){1,100}$"#)))|Mapping

    /// 
    hidden ServerSideEncryptionConfiguration: (DataSourceServerSideEncryptionConfiguration)?

    /// 
    hidden VectorIngestionConfiguration: (DataSourceVectorIngestionConfiguration)?

    Properties {
        ["DataDeletionPolicy"] = if (DataDeletionPolicy == null) null else DataDeletionPolicy
        ["DataSourceConfiguration"] = if (DataSourceConfiguration == null) null else DataSourceConfiguration
        ["Description"] = if (Description == null) null else Description
        ["KnowledgeBaseId"] = if (KnowledgeBaseId == null) null else KnowledgeBaseId
        ["Name"] = if (Name == null) null else Name
        ["ServerSideEncryptionConfiguration"] = if (ServerSideEncryptionConfiguration == null) null else ServerSideEncryptionConfiguration
        ["VectorIngestionConfiguration"] = if (VectorIngestionConfiguration == null) null else VectorIngestionConfiguration
    }

}
