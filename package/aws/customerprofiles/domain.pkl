/// AWS::CustomerProfiles::Domain
///
/// Generated by rain build --pkl-class AWS::CustomerProfiles::Domain
module aws.customerprofiles.domain

import "../../cloudformation.pkl"

typealias AttributeTypesSelectorAttributeMatchingModel = "ONE_TO_ONE"|"MANY_TO_MANY"

/// Configures information about the AttributeTypesSelector where the rule-based identity resolution uses to match profiles.
open class DomainAttributeTypesSelector {
    Address: (Listing<String|Mapping>)?
    AttributeMatchingModel: AttributeTypesSelectorAttributeMatchingModel|Mapping
    EmailAddress: (Listing<String|Mapping>)?
    PhoneNumber: (Listing<String|Mapping>)?
}

/// Configuration information about the auto-merging process.
open class DomainAutoMerging {
    ConflictResolution: (DomainConflictResolution)?
    Consolidation: (DomainConsolidation)?
    Enabled: Boolean|Mapping
    MinAllowedConfidenceScoreForMerging: (Number|Mapping)?
}

typealias ConflictResolutionConflictResolvingModel = "RECENCY"|"SOURCE"

/// How the auto-merging process should resolve conflicts between different profiles. For example, if Profile A and Profile B have the same FirstName and LastName (and that is the matching criteria), which EmailAddress should be used? 
open class DomainConflictResolution {
    ConflictResolvingModel: ConflictResolutionConflictResolvingModel|Mapping
    SourceName: (String|Mapping)?
}

/// A list of matching attributes that represent matching criteria. If two profiles meet at least one of the requirements in the matching attributes list, they will be merged.
open class DomainConsolidation {
    MatchingAttributesList: Listing<DomainMatchingAttributes>
}

/// Usage-specific statistics about the domain.
open class DomainDomainStats {
    MeteringProfileCount: (Number|Mapping)?
    ObjectCount: (Number|Mapping)?
    ProfileCount: (Number|Mapping)?
    TotalSize: (Number|Mapping)?
}

/// Configuration information for exporting Identity Resolution results, for example, to an S3 bucket.
open class DomainExportingConfig {
    S3Exporting: (DomainS3ExportingConfig)?
}

typealias JobScheduleDayOfTheWeek = "SUNDAY"|"MONDAY"|"TUESDAY"|"WEDNESDAY"|"THURSDAY"|"FRIDAY"|"SATURDAY"

/// The day and time when do you want to start the Identity Resolution Job every week.
open class DomainJobSchedule {
    DayOfTheWeek: JobScheduleDayOfTheWeek|Mapping
    Time: String(matches(Regex(#"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"#)))|Mapping
}

/// The process of matching duplicate profiles. If Matching = true, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. After the Identity Resolution Job completes, use the GetMatches API to return and review the results. Or, if you have configured ExportingConfig in the MatchingRequest, you can download the results from S3.
open class DomainMatching {
    AutoMerging: (DomainAutoMerging)?
    Enabled: Boolean|Mapping
    ExportingConfig: (DomainExportingConfig)?
    JobSchedule: (DomainJobSchedule)?
}

typealias DomainMatchingAttributes = Listing<(String|Mapping)?>


/// Specifies how does the rule-based matching process should match profiles.
open class DomainMatchingRule {
    Rule: DomainMatchingRuleAttributeList
}

typealias DomainMatchingRuleAttributeList = Listing<(String|Mapping)?>


typealias RuleBasedMatchingStatus = "PENDING"|"IN_PROGRESS"|"ACTIVE"

/// The process of matching duplicate profiles using the Rule-Based matching. If RuleBasedMatching = true, Amazon Connect Customer Profiles will start to match and merge your profiles according to your configuration in the RuleBasedMatchingRequest. You can use the ListRuleBasedMatches and GetSimilarProfiles API to return and review the results. Also, if you have configured ExportingConfig in the RuleBasedMatchingRequest, you can download the results from S3.
open class DomainRuleBasedMatching {
    AttributeTypesSelector: (DomainAttributeTypesSelector)?
    ConflictResolution: (DomainConflictResolution)?
    Enabled: Boolean|Mapping
    ExportingConfig: (DomainExportingConfig)?
    MatchingRules: (Listing<DomainMatchingRule>)?
    MaxAllowedRuleLevelForMatching: (Int|Mapping)?
    MaxAllowedRuleLevelForMerging: (Int|Mapping)?
    Status: (RuleBasedMatchingStatus|Mapping)?
}

/// The S3 location where Identity Resolution Jobs write result files.
open class DomainS3ExportingConfig {
    S3BucketName: String(matches(Regex(#"^[a-z0-9.-]+$"#)))|Mapping
    S3KeyName: (String(matches(Regex(#".*"#)))|Mapping)?
}

/// 
open class DomainTag {
    Key: String(matches(Regex(#"^(?!aws:)[a-zA-Z+-=._:/]+$"#)))|Mapping
    Value: String|Mapping
}

/// A domain defined for 3rd party data source in Profile Service
open class Domain extends cloudformation.Resource {

    Type = "AWS::CustomerProfiles::Domain"


    /// The URL of the SQS dead letter queue
    hidden DeadLetterQueueUrl: (String|Mapping)?

    /// The default encryption key
    hidden DefaultEncryptionKey: (String|Mapping)?

    /// The default number of days until the data within the domain expires.
    hidden DefaultExpirationDays: Int|Mapping

    /// The unique name of the domain.
    hidden DomainName: String(matches(Regex(#"^[a-zA-Z0-9_-]+$"#)))|Mapping

    /// 
    hidden Matching: (DomainMatching)?

    /// 
    hidden RuleBasedMatching: (DomainRuleBasedMatching)?

    /// The tags (keys and values) associated with the domain
    hidden Tags: (Listing<DomainTag>)?

    Properties {
        ["DeadLetterQueueUrl"] = if (DeadLetterQueueUrl == null) null else DeadLetterQueueUrl
        ["DefaultEncryptionKey"] = if (DefaultEncryptionKey == null) null else DefaultEncryptionKey
        ["DefaultExpirationDays"] = if (DefaultExpirationDays == null) null else DefaultExpirationDays
        ["DomainName"] = if (DomainName == null) null else DomainName
        ["Matching"] = if (Matching == null) null else Matching
        ["RuleBasedMatching"] = if (RuleBasedMatching == null) null else RuleBasedMatching
        ["Tags"] = if (Tags == null) null else Tags
    }

}
