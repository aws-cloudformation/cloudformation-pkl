/// AWS::DynamoDB::Table
///
/// Generated by rain build --pkl-class AWS::DynamoDB::Table
module aws.dynamodb.table

import "../../cloudformation.pkl"

/// Represents an attribute for describing the schema for the table and indexes.
open class TableAttributeDefinition {
    AttributeName: String|Mapping
    AttributeType: String|Mapping
}

/// The settings used to enable or disable CloudWatch Contributor Insights.
open class TableContributorInsightsSpecification {
    Enabled: Boolean|Mapping
}

/// The options for imported source files in CSV format. The values are Delimiter and HeaderList.
open class TableCsv {
    Delimiter: (String|Mapping)?
    HeaderList: (Listing<String|Mapping>)?
}

/// 
open class TableDeprecatedHashKeyElement {
    AttributeName: String|Mapping
    AttributeType: String|Mapping
}

/// 
open class TableDeprecatedKeySchema {
    HashKeyElement: TableDeprecatedHashKeyElement
}

/// Represents the properties of a global secondary index.
open class TableGlobalSecondaryIndex {
    ContributorInsightsSpecification: (TableContributorInsightsSpecification)?
    IndexName: String|Mapping
    KeySchema: Listing<TableKeySchema>
    OnDemandThroughput: (TableOnDemandThroughput)?
    Projection: TableProjection
    ProvisionedThroughput: (TableProvisionedThroughput)?
    WarmThroughput: (TableWarmThroughput)?
}

/// Specifies the properties of data being imported from the S3 bucket source to the table.
open class TableImportSourceSpecification {
    InputCompressionType: (String|Mapping)?
    InputFormat: String|Mapping
    InputFormatOptions: (TableInputFormatOptions)?
    S3BucketSource: TableS3BucketSource
}

/// The format options for the data that was imported into the target table. There is one value, CsvOption.
open class TableInputFormatOptions {
    Csv: (TableCsv)?
}

/// Represents *a single element* of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.
///
///  A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A composite primary key would require one ``KeySchemaElement`` for the partition key, and another ``KeySchemaElement`` for the sort key.
///  A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.
open class TableKeySchema {
    AttributeName: String|Mapping
    KeyType: String|Mapping
}

typealias KinesisStreamSpecificationApproximateCreationDateTimePrecision = "MICROSECOND"|"MILLISECOND"

/// The Kinesis Data Streams configuration for the specified table.
open class TableKinesisStreamSpecification {
    ApproximateCreationDateTimePrecision: (KinesisStreamSpecificationApproximateCreationDateTimePrecision|Mapping)?
    StreamArn: String|Mapping
}

/// Represents the properties of a local secondary index. A local secondary index can only be created when its parent table is created.
open class TableLocalSecondaryIndex {
    IndexName: String|Mapping
    KeySchema: Listing<TableKeySchema>
    Projection: TableProjection
}

/// Sets the maximum number of read and write units for the specified on-demand table. If you use this property, you must specify ``MaxReadRequestUnits``, ``MaxWriteRequestUnits``, or both.
open class TableOnDemandThroughput {
    MaxReadRequestUnits: (Int|Mapping)?
    MaxWriteRequestUnits: (Int|Mapping)?
}

/// The settings used to enable point in time recovery.
open class TablePointInTimeRecoverySpecification {
    PointInTimeRecoveryEnabled: (Boolean|Mapping)?
}

/// Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
open class TableProjection {
    NonKeyAttributes: (Listing<String|Mapping>)?
    ProjectionType: (String|Mapping)?
}

/// Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Table ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
open class TableProvisionedThroughput {
    ReadCapacityUnits: Int|Mapping
    WriteCapacityUnits: Int|Mapping
}

/// Creates or updates a resource-based policy document that contains the permissions for DDB resources, such as a table, its indexes, and stream. Resource-based policies let you define access permissions by specifying who has access to each resource, and the actions they are allowed to perform on each resource.
///
///  In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
///  While defining resource-based policies in your CFNshort templates, the following considerations apply:
///   +  The maximum size supported for a resource-based policy document in JSON format is 20 KB. DDB counts whitespaces when calculating the size of a policy against this limit. 
///   +  Resource-based policies don't support [drift detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html#). If you update a policy outside of the CFNshort stack template, you'll need to update the CFNshort stack with the changes.
///   +  Resource-based policies don't support out-of-band changes. If you add, update, or delete a policy outside of the CFNshort template, the change won't be overwritten if there are no changes to the policy within the template.
///  For example, say that your template contains a resource-based policy, which you later update outside of the template. If you don't make any changes to the policy in the template, the updated policy in DDB won’t be synced with the policy in the template.
///  Conversely, say that your template doesn’t contain a resource-based policy, but you add a policy outside of the template. This policy won’t be removed from DDB as long as you don’t add it to the template. When you add a policy to the template and update the stack, the existing policy in DDB will be updated to match the one defined in the template.
///   
///  For a full list of all considerations, see [Resource-based policy considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
open class TableResourcePolicy {
    PolicyDocument: Dynamic
}

/// The S3 bucket that is being imported from.
open class TableS3BucketSource {
    S3Bucket: String|Mapping
    S3BucketOwner: (String|Mapping)?
    S3KeyPrefix: (String|Mapping)?
}

/// Represents the settings used to enable server-side encryption.
open class TableSSESpecification {
    KMSMasterKeyId: (String|Mapping)?
    SSEEnabled: Boolean|Mapping
    SSEType: (String|Mapping)?
}

/// Represents the DynamoDB Streams configuration for a table in DynamoDB.
open class TableStreamSpecification {
    ResourcePolicy: (TableResourcePolicy)?
    StreamViewType: String|Mapping
}

/// Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB table. 
///
///   AWS-assigned tag names and values are automatically assigned the ``aws:`` prefix, which the user cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned tag names have the prefix ``user:`` in the Cost Allocation Report. You cannot backdate the application of a tag.
///  For an overview on tagging DynamoDB resources, see [Tagging for DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html) in the *Amazon DynamoDB Developer Guide*.
open class TableTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// Represents the settings used to enable or disable Time to Live (TTL) for the specified table.
open class TableTimeToLiveSpecification {
    AttributeName: (String|Mapping)?
    Enabled: Boolean|Mapping
}

/// Provides visibility into the number of read and write operations your table or secondary index can instantaneously support. The settings can be modified using the ``UpdateTable`` operation to meet the throughput requirements of an upcoming peak event.
open class TableWarmThroughput {
    ReadUnitsPerSecond: (Int|Mapping)?
    WriteUnitsPerSecond: (Int|Mapping)?
}

/// The ``AWS::DynamoDB::Table`` resource creates a DDB table. For more information, see [CreateTable](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_CreateTable.html) in the *API Reference*.
///
///  You should be aware of the following behaviors when working with DDB tables:
///   +   CFNlong typically creates DDB tables in parallel. However, if your template includes multiple DDB tables with indexes, you must declare dependencies so that the tables are created sequentially. DDBlong limits the number of tables with secondary indexes that are in the creating state. If you create multiple tables with indexes at the same time, DDB returns an error and the stack operation fails. For an example, see [DynamoDB Table with a DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html#aws-resource-dynamodb-table--examples--DynamoDB_Table_with_a_DependsOn_Attribute).
///   
///    Our guidance is to use the latest schema documented for your CFNlong templates. This schema supports the provisioning of all table settings below. When using this schema in your CFNlong templates, please ensure that your Identity and Access Management (IAM) policies are updated with appropriate permissions to allow for the authorization of these setting changes.
open class Table extends cloudformation.Resource {

    Type = "AWS::DynamoDB::Table"


    /// A list of attributes that describe the key schema for the table and indexes.
    ///
    ///  This property is required to create a DDB table.
    ///  Update requires: [Some interruptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-some-interrupt). Replacement if you edit an existing AttributeDefinition.
    hidden AttributeDefinitions: (Listing<TableAttributeDefinition>)?

    /// Specify how you are charged for read and write throughput and how you manage capacity.
    ///
    ///  Valid values include:
    ///   +   ``PROVISIONED`` - We recommend using ``PROVISIONED`` for predictable workloads. ``PROVISIONED`` sets the billing mode to [Provisioned Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).
    ///   +   ``PAY_PER_REQUEST`` - We recommend using ``PAY_PER_REQUEST`` for unpredictable workloads. ``PAY_PER_REQUEST`` sets the billing mode to [On-Demand Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).
    ///   
    ///  If not specified, the default is ``PROVISIONED``.
    hidden BillingMode: (String|Mapping)?

    /// The settings used to enable or disable CloudWatch Contributor Insights for the specified table.
    hidden ContributorInsightsSpecification: (TableContributorInsightsSpecification)?

    /// Determines if a table is protected from deletion. When enabled, the table cannot be deleted by any user or process. This setting is disabled by default. For more information, see [Using deletion protection](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#WorkingWithTables.Basics.DeletionProtection) in the *Developer Guide*.
    hidden DeletionProtectionEnabled: (Boolean|Mapping)?

    /// Global secondary indexes to be created on the table. You can create up to 20 global secondary indexes.
    ///
    ///   If you update a table to include a new global secondary index, CFNlong initiates the index creation and then proceeds with the stack update. CFNlong doesn't wait for the index to complete creation because the backfilling phase can take a long time, depending on the size of the table. You can't use the index or update the table until the index's status is ``ACTIVE``. You can track its status by using the DynamoDB [DescribeTable](https://docs.aws.amazon.com/cli/latest/reference/dynamodb/describe-table.html) command.
    ///  If you add or delete an index during an update, we recommend that you don't update any other resources. If your stack fails to update and is rolled back while adding a new index, you must manually delete the index. 
    ///  Updates are not supported. The following are exceptions:
    ///   +  If you update either the contributor insights specification or the provisioned throughput values of global secondary indexes, you can update the table without interruption.
    ///   +  You can delete or add one global secondary index without interruption. If you do both in the same update (for example, by changing the index's logical ID), the update fails.
    hidden GlobalSecondaryIndexes: (Listing<TableGlobalSecondaryIndex>)?

    /// Specifies the properties of data being imported from the S3 bucket source to the" table.
    ///
    ///   If you specify the ``ImportSourceSpecification`` property, and also specify either the ``StreamSpecification``, the ``TableClass`` property, the ``DeletionProtectionEnabled`` property, or the ``WarmThroughput`` property, the IAM entity creating/updating stack must have ``UpdateTable`` permission.
    hidden ImportSourceSpecification: (TableImportSourceSpecification)?

    /// 
    hidden KeySchema: Listing<TableKeySchema>

    /// The Kinesis Data Streams configuration for the specified table.
    hidden KinesisStreamSpecification: (TableKinesisStreamSpecification)?

    /// Local secondary indexes to be created on the table. You can create up to 5 local secondary indexes. Each index is scoped to a given hash key value. The size of each hash key can be up to 10 gigabytes.
    hidden LocalSecondaryIndexes: (Listing<TableLocalSecondaryIndex>)?

    /// Sets the maximum number of read and write units for the specified on-demand table. If you use this property, you must specify ``MaxReadRequestUnits``, ``MaxWriteRequestUnits``, or both.
    hidden OnDemandThroughput: (TableOnDemandThroughput)?

    /// The settings used to enable point in time recovery.
    hidden PointInTimeRecoverySpecification: (TablePointInTimeRecoverySpecification)?

    /// Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Amazon DynamoDB Table ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html). 
    ///
    ///  If you set ``BillingMode`` as ``PROVISIONED``, you must specify this property. If you set ``BillingMode`` as ``PAY_PER_REQUEST``, you cannot specify this property.
    hidden ProvisionedThroughput: (TableProvisionedThroughput)?

    /// A resource-based policy document that contains permissions to add to the specified table. In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
    ///
    ///  When you attach a resource-based policy while creating a table, the policy creation is *strongly consistent*. For information about the considerations that you should keep in mind while attaching a resource-based policy, see [Resource-based policy considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
    hidden ResourcePolicy: (TableResourcePolicy)?

    /// Specifies the settings to enable server-side encryption.
    hidden SSESpecification: (TableSSESpecification)?

    /// The settings for the DDB table stream, which capture changes to items stored in the table.
    hidden StreamSpecification: (TableStreamSpecification)?

    /// The table class of the new table. Valid values are ``STANDARD`` and ``STANDARD_INFREQUENT_ACCESS``.
    hidden TableClass: (String|Mapping)?

    /// A name for the table. If you don't specify a name, CFNlong generates a unique physical ID and uses that ID for the table name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
    ///
    ///   If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
    hidden TableName: (String|Mapping)?

    /// An array of key-value pairs to apply to this resource.
    ///
    ///  For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
    hidden Tags: (Listing<TableTag>)?

    /// Specifies the Time to Live (TTL) settings for the table.
    ///
    ///   For detailed information about the limits in DynamoDB, see [Limits in Amazon DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
    hidden TimeToLiveSpecification: (TableTimeToLiveSpecification)?

    /// Represents the warm throughput (in read units per second and write units per second) for creating a table.
    hidden WarmThroughput: (TableWarmThroughput)?

    Properties {
        ["AttributeDefinitions"] = if (AttributeDefinitions == null) null else AttributeDefinitions
        ["BillingMode"] = if (BillingMode == null) null else BillingMode
        ["ContributorInsightsSpecification"] = if (ContributorInsightsSpecification == null) null else ContributorInsightsSpecification
        ["DeletionProtectionEnabled"] = if (DeletionProtectionEnabled == null) null else DeletionProtectionEnabled
        ["GlobalSecondaryIndexes"] = if (GlobalSecondaryIndexes == null) null else GlobalSecondaryIndexes
        ["ImportSourceSpecification"] = if (ImportSourceSpecification == null) null else ImportSourceSpecification
        ["KeySchema"] = if (KeySchema == null) null else KeySchema
        ["KinesisStreamSpecification"] = if (KinesisStreamSpecification == null) null else KinesisStreamSpecification
        ["LocalSecondaryIndexes"] = if (LocalSecondaryIndexes == null) null else LocalSecondaryIndexes
        ["OnDemandThroughput"] = if (OnDemandThroughput == null) null else OnDemandThroughput
        ["PointInTimeRecoverySpecification"] = if (PointInTimeRecoverySpecification == null) null else PointInTimeRecoverySpecification
        ["ProvisionedThroughput"] = if (ProvisionedThroughput == null) null else ProvisionedThroughput
        ["ResourcePolicy"] = if (ResourcePolicy == null) null else ResourcePolicy
        ["SSESpecification"] = if (SSESpecification == null) null else SSESpecification
        ["StreamSpecification"] = if (StreamSpecification == null) null else StreamSpecification
        ["TableClass"] = if (TableClass == null) null else TableClass
        ["TableName"] = if (TableName == null) null else TableName
        ["Tags"] = if (Tags == null) null else Tags
        ["TimeToLiveSpecification"] = if (TimeToLiveSpecification == null) null else TimeToLiveSpecification
        ["WarmThroughput"] = if (WarmThroughput == null) null else WarmThroughput
    }

}
