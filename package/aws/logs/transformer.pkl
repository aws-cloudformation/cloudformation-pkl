/// AWS::Logs::Transformer
///
/// Generated by rain build --pkl-class AWS::Logs::Transformer
module aws.logs.transformer

import "../../cloudformation.pkl"

/// 
open class TransformerAddKeyEntry {
    Key: TransformerNonEmptyAndMaxLengthString
    OverwriteIfExists: (Boolean|Mapping)?
    Value: String|Mapping
}

typealias TransformerColumn = TransformerNonEmptyAndMaxLengthString


/// 
open class TransformerCopyValueEntry {
    OverwriteIfExists: (Boolean|Mapping)?
    Source: TransformerNonEmptyString
    Target: TransformerNonEmptyAndMaxLengthString
}

typealias TransformerMatchPattern = TransformerNonEmptyString


typealias TransformerMaxLengthString = String|Mapping


/// 
open class TransformerMoveKeyEntry {
    OverwriteIfExists: (Boolean|Mapping)?
    Source: TransformerNonEmptyString
    Target: TransformerNonEmptyString
}

typealias TransformerNonEmptyAndMaxLengthString = String|Mapping


typealias TransformerNonEmptyString = String|Mapping


/// 
open class TransformerParseCloudfront {
    Source: (TransformerNonEmptyString)?
}

/// 
open class TransformerParsePostgres {
    Source: (TransformerNonEmptyString)?
}

/// 
open class TransformerParseRoute53 {
    Source: (TransformerNonEmptyString)?
}

/// 
open class TransformerParseVPC {
    Source: (TransformerNonEmptyString)?
}

/// 
open class TransformerParseWAF {
    Source: (TransformerNonEmptyString)?
}

/// Individual processor configuration
open class TransformerProcessor {
    AddKeys: (Dynamic)?
    CopyValue: (Dynamic)?
    Csv: (Dynamic)?
    DateTimeConverter: (Dynamic)?
    DeleteKeys: (Dynamic)?
    Grok: (Dynamic)?
    ListToMap: (Dynamic)?
    LowerCaseString: (Dynamic)?
    MoveKeys: (Dynamic)?
    ParseCloudfront: (TransformerParseCloudfront)?
    ParseJSON: (Dynamic)?
    ParseKeyValue: (Dynamic)?
    ParsePostgres: (TransformerParsePostgres)?
    ParseRoute53: (TransformerParseRoute53)?
    ParseVPC: (TransformerParseVPC)?
    ParseWAF: (TransformerParseWAF)?
    RenameKeys: (Dynamic)?
    SplitString: (Dynamic)?
    SubstituteString: (Dynamic)?
    TrimString: (Dynamic)?
    TypeConverter: (Dynamic)?
    UpperCaseString: (Dynamic)?
}

/// 
open class TransformerRenameKeyEntry {
    Key: TransformerNonEmptyString
    OverwriteIfExists: (Boolean|Mapping)?
    RenameTo: TransformerNonEmptyString
}

/// 
open class TransformerSplitStringEntry {
    Delimiter: String|Mapping
    Source: TransformerNonEmptyString
}

/// 
open class TransformerSubstituteStringEntry {
    From: TransformerNonEmptyAndMaxLengthString
    Source: TransformerNonEmptyString
    To: TransformerNonEmptyAndMaxLengthString
}

typealias TypeConverterEntryType = "boolean"|"integer"|"double"|"string"

/// 
open class TransformerTypeConverterEntry {
    Key: TransformerNonEmptyString
    Type: TypeConverterEntryType|Mapping
}

typealias TransformerWithKey = String|Mapping


/// Specifies a transformer on the log group to transform logs into consistent structured and information rich format.
open class Transformer extends cloudformation.Resource {

    Type = "AWS::Logs::Transformer"


    /// Existing log group that you want to associate with this transformer.
    hidden LogGroupIdentifier: String(matches(Regex(#"[\w#+=/:,.@-]*"#)))|Mapping

    /// List of processors in a transformer
    hidden TransformerConfig: Listing<TransformerProcessor>

    Properties {
        ["LogGroupIdentifier"] = if (LogGroupIdentifier == null) null else LogGroupIdentifier
        ["TransformerConfig"] = if (TransformerConfig == null) null else TransformerConfig
    }

}
