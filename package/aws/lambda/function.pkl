/// AWS::Lambda::Function
///
/// Generated by rain build --pkl-class AWS::Lambda::Function
module aws.lambda.function_

import "../../cloudformation.pkl"

/// The [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html) for a Lambda function. To deploy a function defined as a container image, you specify the location of a container image in the Amazon ECR registry. For a .zip file deployment package, you can specify the location of an object in Amazon S3. For Node.js and Python functions, you can specify the function code inline in the template.
///
///  Changes to a deployment package in Amazon S3 or a container image in ECR are not detected automatically during stack updates. To update the function code, change the object key or version in the template.
open class FunctionCode {
    ImageUri: (String|Mapping)?
    S3Bucket: (String(matches(Regex(#"^[0-9A-Za-z\.\-_]*(?<!\.)$"#)))|Mapping)?
    S3Key: (String|Mapping)?
    S3ObjectVersion: (String|Mapping)?
    ZipFile: (String|Mapping)?
}

/// The [dead-letter queue](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq) for failed asynchronous invocations.
open class FunctionDeadLetterConfig {
    TargetArn: (String(matches(Regex(#"^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$"#)))|Mapping)?
}

typealias FunctionEnvironmentVariables = Mapping<String, Any>

/// A function's environment variable settings. You can use environment variables to adjust your function's behavior without updating code. An environment variable is a pair of strings that are stored in a function's version-specific configuration.
open class FunctionEnvironment {
    Variables: (FunctionEnvironmentVariables)?
}

/// The size of the function's ``/tmp`` directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.
open class FunctionEphemeralStorage {
    Size: Int|Mapping
}

/// Details about the connection between a Lambda function and an [Amazon EFS file system](https://docs.aws.amazon.com/lambda/latest/dg/configuration-filesystem.html).
open class FunctionFileSystemConfig {
    Arn: String(matches(Regex(#"^arn:aws[a-zA-Z-]*:elasticfilesystem:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:access-point/fsap-[a-f0-9]{17}$"#)))|Mapping
    LocalMountPath: String(matches(Regex(#"^/mnt/[a-zA-Z0-9-_.]+$"#)))|Mapping
}

/// Configuration values that override the container image Dockerfile settings. For more information, see [Container image settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
open class FunctionImageConfig {
    Command: (Listing<String|Mapping>)?
    EntryPoint: (Listing<String|Mapping>)?
    WorkingDirectory: (String|Mapping)?
}

typealias LoggingConfigApplicationLogLevel = "TRACE"|"DEBUG"|"INFO"|"WARN"|"ERROR"|"FATAL"

typealias LoggingConfigLogFormat = "Text"|"JSON"

typealias LoggingConfigSystemLogLevel = "DEBUG"|"INFO"|"WARN"

/// The function's Amazon CloudWatch Logs configuration settings.
open class FunctionLoggingConfig {
    ApplicationLogLevel: (LoggingConfigApplicationLogLevel|Mapping)?
    LogFormat: (LoggingConfigLogFormat|Mapping)?
    LogGroup: (String(matches(Regex(#"[\.\-_/#A-Za-z0-9]+"#)))|Mapping)?
    SystemLogLevel: (LoggingConfigSystemLogLevel|Mapping)?
}

typealias RuntimeManagementConfigUpdateRuntimeOn = "Auto"|"FunctionUpdate"|"Manual"

/// Sets the runtime management configuration for a function's version. For more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
open class FunctionRuntimeManagementConfig {
    RuntimeVersionArn: (String|Mapping)?
    UpdateRuntimeOn: RuntimeManagementConfigUpdateRuntimeOn|Mapping
}

typealias SnapStartApplyOn = "PublishedVersions"|"None"

/// The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
open class FunctionSnapStart {
    ApplyOn: SnapStartApplyOn|Mapping
}

typealias SnapStartResponseApplyOn = "PublishedVersions"|"None"

typealias SnapStartResponseOptimizationStatus = "On"|"Off"

/// The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
open class FunctionSnapStartResponse {
    ApplyOn: (SnapStartResponseApplyOn|Mapping)?
    OptimizationStatus: (SnapStartResponseOptimizationStatus|Mapping)?
}

/// 
open class FunctionTag {
    Key: String|Mapping
    Value: (String|Mapping)?
}

typealias TracingConfigMode = "Active"|"PassThrough"

/// The function's [](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html) tracing configuration. To sample and record incoming requests, set ``Mode`` to ``Active``.
open class FunctionTracingConfig {
    Mode: (TracingConfigMode|Mapping)?
}

/// The VPC security groups and subnets that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network interface for each combination of security group and subnet in the function's VPC configuration. The function can only access resources and the internet through that VPC. For more information, see [VPC Settings](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
///
///   When you delete a function, CFN monitors the state of its network interfaces and waits for Lambda to delete them before proceeding. If the VPC is defined in the same stack, the network interfaces need to be deleted by Lambda before CFN can delete the VPC's resources.
///  To monitor network interfaces, CFN needs the ``ec2:DescribeNetworkInterfaces`` permission. It obtains this from the user or role that modifies the stack. If you don't provide this permission, CFN does not wait for network interfaces to be deleted.
open class FunctionVpcConfig {
    Ipv6AllowedForDualStack: (Boolean|Mapping)?
    SecurityGroupIds: (Listing<String|Mapping>)?
    SubnetIds: (Listing<String|Mapping>)?
}

/// The ``AWS::Lambda::Function`` resource creates a Lambda function. To create a function, you need a [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html) and an [execution role](https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html). The deployment package is a .zip file archive or container image that contains your function code. The execution role grants the function permission to use AWS services, such as Amazon CloudWatch Logs for log streaming and AWS X-Ray for request tracing.
///
///  You set the package type to ``Image`` if the deployment package is a [container image](https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html). For a container image, the code property must include the URI of a container image in the Amazon ECR registry. You do not need to specify the handler and runtime properties. 
///  You set the package type to ``Zip`` if the deployment package is a [.zip file archive](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html#gettingstarted-package-zip). For a .zip file archive, the code property specifies the location of the .zip file. You must also specify the handler and runtime properties. For a Python example, see [Deploy Python Lambda functions with .zip file archives](https://docs.aws.amazon.com/lambda/latest/dg/python-package.html).
///  You can use [code signing](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html) if your deployment package is a .zip file archive. To enable code signing for this function, specify the ARN of a code-signing configuration. When a user attempts to deploy a code package with ``UpdateFunctionCode``, Lambda checks that the code package has a valid signature from a trusted publisher. The code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
///  Note that you configure [provisioned concurrency](https://docs.aws.amazon.com/lambda/latest/dg/provisioned-concurrency.html) on a ``AWS::Lambda::Version`` or a ``AWS::Lambda::Alias``.
///  For a complete introduction to Lambda functions, see [What is Lambda?](https://docs.aws.amazon.com/lambda/latest/dg/lambda-welcome.html) in the *Lambda developer guide.*
open class Function extends cloudformation.Resource {

    Type = "AWS::Lambda::Function"


    /// The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is ``x86_64``.
    hidden Architectures: (Listing<FunctionArchitectures|Mapping>)?

    /// The code for the function.
    hidden Code: FunctionCode

    /// To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
    hidden CodeSigningConfigArn: (String(matches(Regex(#"arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:code-signing-config:csc-[a-z0-9]{17}"#)))|Mapping)?

    /// A dead-letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see [Dead-letter queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-dlq).
    hidden DeadLetterConfig: (FunctionDeadLetterConfig)?

    /// A description of the function.
    hidden Description: (String|Mapping)?

    /// Environment variables that are accessible from function code during execution.
    hidden Environment: (FunctionEnvironment)?

    /// The size of the function's ``/tmp`` directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.
    hidden EphemeralStorage: (FunctionEphemeralStorage)?

    /// Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be available in every Availability Zone that your function connects to. If your template contains an [AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html) resource, you must also specify a ``DependsOn`` attribute to ensure that the mount target is created or updated before the function.
    ///
    ///  For more information about using the ``DependsOn`` attribute, see [DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html).
    hidden FileSystemConfigs: (Listing<FunctionFileSystemConfig>)?

    /// The name of the Lambda function, up to 64 characters in length. If you don't specify a name, CFN generates one.
    ///
    ///  If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
    hidden FunctionName: (String|Mapping)?

    /// The name of the method within your code that Lambda calls to run your function. Handler is required if the deployment package is a .zip file archive. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see [Lambda programming model](https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html).
    hidden Handler: (String(matches(Regex(#"^[^\s]+$"#)))|Mapping)?

    /// Configuration values that override the container image Dockerfile settings. For more information, see [Container image settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
    hidden ImageConfig: (FunctionImageConfig)?

    /// The ARN of the KMSlong (KMS) customer managed key that's used to encrypt your function's [environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption). When [Lambda SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html) is activated, Lambda also uses this key is to encrypt your function's snapshot. If you deploy your function using a container image, Lambda also uses this key to encrypt your function when it's deployed. Note that this is not the same key that's used to protect your container image in the Amazon Elastic Container Registry (Amazon ECR). If you don't provide a customer managed key, Lambda uses a default service key.
    hidden KmsKeyArn: (String(matches(Regex(#"^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$"#)))|Mapping)?

    /// A list of [function layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html) to add to the function's execution environment. Specify each layer by its ARN, including the version.
    hidden Layers: (Listing<String|Mapping>)?

    /// The function's Amazon CloudWatch Logs configuration settings.
    hidden LoggingConfig: (FunctionLoggingConfig)?

    /// The amount of [memory available to the function](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-console) at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB. Note that new AWS accounts have reduced concurrency and memory quotas. AWS raises these quotas automatically based on your usage. You can also request a quota increase.
    hidden MemorySize: (Int|Mapping)?

    /// The type of deployment package. Set to ``Image`` for container image and set ``Zip`` for .zip file archive.
    hidden PackageType: (FunctionPackageType|Mapping)?

    /// The number of simultaneous executions to reserve for the function.
    hidden ReservedConcurrentExecutions: (Int|Mapping)?

    /// The Amazon Resource Name (ARN) of the function's execution role.
    hidden Role: String(matches(Regex(#"^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$"#)))|Mapping

    /// The identifier of the function's [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html). Runtime is required if the deployment package is a .zip file archive. Specifying a runtime results in an error if you're deploying a function using a container image.
    ///
    ///  The following list includes deprecated runtimes. Lambda blocks creating new functions and updating existing functions shortly after each runtime is deprecated. For more information, see [Runtime use after deprecation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-deprecation-levels).
    ///  For a list of all currently supported runtimes, see [Supported runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtimes-supported).
    hidden Runtime: (String|Mapping)?

    /// Sets the runtime management configuration for a function's version. For more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
    hidden RuntimeManagementConfig: (FunctionRuntimeManagementConfig)?

    /// The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
    hidden SnapStart: (FunctionSnapStart)?

    /// A list of [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html) to apply to the function.
    hidden Tags: (Listing<FunctionTag>)?

    /// The amount of time (in seconds) that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds. For more information, see [Lambda execution environment](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html).
    hidden Timeout: (Int|Mapping)?

    /// Set ``Mode`` to ``Active`` to sample and trace a subset of incoming requests with [X-Ray](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html).
    hidden TracingConfig: (FunctionTracingConfig)?

    /// For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can access resources and the internet only through that VPC. For more information, see [Configuring a Lambda function to access resources in a VPC](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
    hidden VpcConfig: (FunctionVpcConfig)?

    Properties {
        ["Architectures"] = if (Architectures == null) null else Architectures
        ["Code"] = if (Code == null) null else Code
        ["CodeSigningConfigArn"] = if (CodeSigningConfigArn == null) null else CodeSigningConfigArn
        ["DeadLetterConfig"] = if (DeadLetterConfig == null) null else DeadLetterConfig
        ["Description"] = if (Description == null) null else Description
        ["Environment"] = if (Environment == null) null else Environment
        ["EphemeralStorage"] = if (EphemeralStorage == null) null else EphemeralStorage
        ["FileSystemConfigs"] = if (FileSystemConfigs == null) null else FileSystemConfigs
        ["FunctionName"] = if (FunctionName == null) null else FunctionName
        ["Handler"] = if (Handler == null) null else Handler
        ["ImageConfig"] = if (ImageConfig == null) null else ImageConfig
        ["KmsKeyArn"] = if (KmsKeyArn == null) null else KmsKeyArn
        ["Layers"] = if (Layers == null) null else Layers
        ["LoggingConfig"] = if (LoggingConfig == null) null else LoggingConfig
        ["MemorySize"] = if (MemorySize == null) null else MemorySize
        ["PackageType"] = if (PackageType == null) null else PackageType
        ["ReservedConcurrentExecutions"] = if (ReservedConcurrentExecutions == null) null else ReservedConcurrentExecutions
        ["Role"] = if (Role == null) null else Role
        ["Runtime"] = if (Runtime == null) null else Runtime
        ["RuntimeManagementConfig"] = if (RuntimeManagementConfig == null) null else RuntimeManagementConfig
        ["SnapStart"] = if (SnapStart == null) null else SnapStart
        ["Tags"] = if (Tags == null) null else Tags
        ["Timeout"] = if (Timeout == null) null else Timeout
        ["TracingConfig"] = if (TracingConfig == null) null else TracingConfig
        ["VpcConfig"] = if (VpcConfig == null) null else VpcConfig
    }

}


typealias FunctionArchitectures = "x86_64"|"arm64"

typealias FunctionPackageType = "Image"|"Zip"
