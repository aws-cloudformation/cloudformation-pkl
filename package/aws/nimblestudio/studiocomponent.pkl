/// AWS::NimbleStudio::StudioComponent
///
/// Generated by rain build --pkl-class AWS::NimbleStudio::StudioComponent
module aws.nimblestudio.studiocomponent

import "../../cloudformation.pkl"

/// <p>An LDAP attribute of an Active Directory computer account, in the form of a name:value
///
///             pair.</p>
open class StudioComponentActiveDirectoryComputerAttribute {
    Name: (String|Mapping)?
    Value: (String|Mapping)?
}

/// <p>The configuration for a Microsoft Active Directory (Microsoft AD) studio
///
///             resource.</p>
open class StudioComponentActiveDirectoryConfiguration {
    ComputerAttributes: (Listing<StudioComponentActiveDirectoryComputerAttribute>)?
    DirectoryId: (String|Mapping)?
    OrganizationalUnitDistinguishedName: (String|Mapping)?
}

/// <p>The configuration for a render farm that is associated with a studio resource.</p>
open class StudioComponentComputeFarmConfiguration {
    ActiveDirectoryUser: (String|Mapping)?
    Endpoint: (String|Mapping)?
}

typealias StudioComponentLaunchProfilePlatform = String|Mapping


/// <p>The configuration for a license service that is associated with a studio
///
///             resource.</p>
open class StudioComponentLicenseServiceConfiguration {
    Endpoint: (String|Mapping)?
}

/// <p>A parameter for a studio component script, in the form of a key:value pair.</p>
open class StudioComponentScriptParameterKeyValue {
    Key: (String(matches(Regex(#"^[a-zA-Z_][a-zA-Z0-9_]+$"#)))|Mapping)?
    Value: (String|Mapping)?
}

/// <p>The configuration for a shared file storage system that is associated with a studio
///
///             resource.</p>
open class StudioComponentSharedFileSystemConfiguration {
    Endpoint: (String|Mapping)?
    FileSystemId: (String|Mapping)?
    LinuxMountPoint: (String(matches(Regex(#"^(/?|(\$HOME)?(/[^/\n\s\\]+)*)$"#)))|Mapping)?
    ShareName: (String|Mapping)?
    WindowsMountDrive: (String(matches(Regex(#"^[A-Z]$"#)))|Mapping)?
}

typealias StudioComponentStudioComponentConfiguration = StudioComponentStudioComponentConfigurationActiveDirectoryConfiguration|StudioComponentStudioComponentConfigurationComputeFarmConfiguration|StudioComponentStudioComponentConfigurationLicenseServiceConfiguration|StudioComponentStudioComponentConfigurationSharedFileSystemConfiguration


/// 
open class StudioComponentStudioComponentConfigurationActiveDirectoryConfiguration {
    ActiveDirectoryConfiguration: StudioComponentActiveDirectoryConfiguration
}

/// 
open class StudioComponentStudioComponentConfigurationComputeFarmConfiguration {
    ComputeFarmConfiguration: StudioComponentComputeFarmConfiguration
}

/// 
open class StudioComponentStudioComponentConfigurationLicenseServiceConfiguration {
    LicenseServiceConfiguration: StudioComponentLicenseServiceConfiguration
}

/// 
open class StudioComponentStudioComponentConfigurationSharedFileSystemConfiguration {
    SharedFileSystemConfiguration: StudioComponentSharedFileSystemConfiguration
}

/// <p>Initialization scripts for studio components.</p>
open class StudioComponentStudioComponentInitializationScript {
    LaunchProfileProtocolVersion: (String(matches(Regex(#"^2021\-03\-31$"#)))|Mapping)?
    Platform: (StudioComponentLaunchProfilePlatform)?
    RunContext: (StudioComponentStudioComponentInitializationScriptRunContext)?
    Script: (String|Mapping)?
}

typealias StudioComponentStudioComponentInitializationScriptRunContext = String|Mapping


typealias StudioComponentStudioComponentSubtype = String|Mapping


typealias StudioComponentStudioComponentType = String|Mapping


typealias StudioComponentTags = Mapping<String, Any>


/// Represents a studio component that connects a non-Nimble Studio resource in your account to your studio
open class StudioComponent extends cloudformation.Resource {

    Type = "AWS::NimbleStudio::StudioComponent"


    /// 
    hidden Configuration: (StudioComponentStudioComponentConfiguration)?

    /// <p>The description.</p>
    hidden Description: (String|Mapping)?

    /// <p>The EC2 security groups that control access to the studio component.</p>
    hidden Ec2SecurityGroupIds: (Listing<String|Mapping>)?

    /// <p>Initialization scripts for studio components.</p>
    hidden InitializationScripts: (Listing<StudioComponentStudioComponentInitializationScript>)?

    /// <p>The name for the studio component.</p>
    hidden Name: String|Mapping

    /// 
    hidden RuntimeRoleArn: (String|Mapping)?

    /// <p>Parameters for the studio component scripts.</p>
    hidden ScriptParameters: (Listing<StudioComponentScriptParameterKeyValue>)?

    /// 
    hidden SecureInitializationRoleArn: (String|Mapping)?

    /// <p>The studio ID. </p>
    hidden StudioId: String|Mapping

    /// 
    hidden Subtype: (StudioComponentStudioComponentSubtype)?

    /// 
    hidden Tags: (StudioComponentTags)?

    /// 
    hidden TypeProperty: StudioComponentStudioComponentType

    Properties {
        ["Configuration"] = if (Configuration == null) null else Configuration
        ["Description"] = if (Description == null) null else Description
        ["Ec2SecurityGroupIds"] = if (Ec2SecurityGroupIds == null) null else Ec2SecurityGroupIds
        ["InitializationScripts"] = if (InitializationScripts == null) null else InitializationScripts
        ["Name"] = if (Name == null) null else Name
        ["RuntimeRoleArn"] = if (RuntimeRoleArn == null) null else RuntimeRoleArn
        ["ScriptParameters"] = if (ScriptParameters == null) null else ScriptParameters
        ["SecureInitializationRoleArn"] = if (SecureInitializationRoleArn == null) null else SecureInitializationRoleArn
        ["StudioId"] = if (StudioId == null) null else StudioId
        ["Subtype"] = if (Subtype == null) null else Subtype
        ["Tags"] = if (Tags == null) null else Tags
        ["Type"] = if (TypeProperty == null) null else TypeProperty
    }

}
