/// AWS::Timestream::Table
///
/// Generated by rain build --pkl-class AWS::Timestream::Table
module aws.timestream.table

import "../../cloudformation.pkl"

/// An attribute used in partitioning data in a table. There are two types of partition keys: dimension keys and measure keys. A dimension key partitions data on a dimension name, while a measure key partitions data on the measure name.
open class TablePartitionKey {
    EnforcementInRecord: (TablePartitionKeyEnforcementLevel)?
    Name: (TableSchemaName)?
    Type: TablePartitionKeyType
}

typealias TablePartitionKeyEnforcementLevel = String|Mapping


typealias TablePartitionKeyList = Listing<(TablePartitionKey)?>


typealias TablePartitionKeyType = String|Mapping


typealias TableSchemaName = String|Mapping


/// You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
open class TableTag {
    Key: (String|Mapping)?
    Value: (String|Mapping)?
}

/// The AWS::Timestream::Table resource creates a Timestream Table.
open class Table extends cloudformation.Resource {

    Type = "AWS::Timestream::Table"


    /// The name for the database which the table to be created belongs to.
    hidden DatabaseName: String(matches(Regex(#"^[a-zA-Z0-9_.-]{3,256}$"#)))|Mapping

    /// The properties that determine whether magnetic store writes are enabled.
    hidden MagneticStoreWriteProperties: (Dynamic)?

    /// The retention duration of the memory store and the magnetic store.
    hidden RetentionProperties: (Dynamic)?

    /// A Schema specifies the expected data model of the table.
    hidden Schema: (Dynamic)?

    /// The name for the table. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the table name.
    hidden TableName: (String(matches(Regex(#"^[a-zA-Z0-9_.-]{3,256}$"#)))|Mapping)?

    /// An array of key-value pairs to apply to this resource.
    hidden Tags: (Listing<TableTag>)?

    Properties {
        ["DatabaseName"] = if (DatabaseName == null) null else DatabaseName
        ["MagneticStoreWriteProperties"] = if (MagneticStoreWriteProperties == null) null else MagneticStoreWriteProperties
        ["RetentionProperties"] = if (RetentionProperties == null) null else RetentionProperties
        ["Schema"] = if (Schema == null) null else Schema
        ["TableName"] = if (TableName == null) null else TableName
        ["Tags"] = if (Tags == null) null else Tags
    }

}
