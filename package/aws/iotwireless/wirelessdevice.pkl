/// AWS::IoTWireless::WirelessDevice
///
/// Generated by rain build --pkl-class AWS::IoTWireless::WirelessDevice
module aws.iotwireless.wirelessdevice

import "../../cloudformation.pkl"

/// 
open class WirelessDeviceAbpV10x {
    DevAddr: String(matches(Regex(#"[a-fA-F0-9]{8}"#)))|Mapping
    SessionKeys: WirelessDeviceSessionKeysAbpV10x
}

/// 
open class WirelessDeviceAbpV11 {
    DevAddr: String(matches(Regex(#"[a-fA-F0-9]{8}"#)))|Mapping
    SessionKeys: WirelessDeviceSessionKeysAbpV11
}

typealias ApplicationType = "SemtechGeolocation"|"SemtechGNSS"|"SemtechGNSSNG"|"SemtechWiFi"

/// LoRaWAN application configuration, which can be used to perform geolocation.
open class WirelessDeviceApplication {
    DestinationName: (String(matches(Regex(#"[a-zA-Z0-9-_]+"#)))|Mapping)?
    FPort: (Int|Mapping)?
    Type: (ApplicationType|Mapping)?
}

/// 
open class WirelessDeviceFPorts {
    Applications: (Listing<WirelessDeviceApplication>)?
}

/// 
open class WirelessDeviceLoRaWANDevice {
    AbpV10x: (WirelessDeviceAbpV10x)?
    AbpV11: (WirelessDeviceAbpV11)?
    DevEui: (String(matches(Regex(#"[a-f0-9]{16}"#)))|Mapping)?
    DeviceProfileId: (String|Mapping)?
    FPorts: (WirelessDeviceFPorts)?
    OtaaV10x: (WirelessDeviceOtaaV10x)?
    OtaaV11: (WirelessDeviceOtaaV11)?
    ServiceProfileId: (String|Mapping)?
}

/// 
open class WirelessDeviceOtaaV10x {
    AppEui: String(matches(Regex(#"[a-fA-F0-9]{16}"#)))|Mapping
    AppKey: String(matches(Regex(#"[a-fA-F0-9]{32}"#)))|Mapping
}

/// 
open class WirelessDeviceOtaaV11 {
    AppKey: String(matches(Regex(#"[a-fA-F0-9]{32}"#)))|Mapping
    JoinEui: String(matches(Regex(#"[a-fA-F0-9]{16}"#)))|Mapping
    NwkKey: String(matches(Regex(#"[a-fA-F0-9]{32}"#)))|Mapping
}

/// 
open class WirelessDeviceSessionKeysAbpV10x {
    AppSKey: String(matches(Regex(#"[a-fA-F0-9]{32}"#)))|Mapping
    NwkSKey: String(matches(Regex(#"[a-fA-F0-9]{32}"#)))|Mapping
}

/// 
open class WirelessDeviceSessionKeysAbpV11 {
    AppSKey: String(matches(Regex(#"[a-fA-F0-9]{32}"#)))|Mapping
    FNwkSIntKey: String(matches(Regex(#"[a-fA-F0-9]{32}"#)))|Mapping
    NwkSEncKey: String(matches(Regex(#"[a-fA-F0-9]{32}"#)))|Mapping
    SNwkSIntKey: String(matches(Regex(#"[a-fA-F0-9]{32}"#)))|Mapping
}

/// 
open class WirelessDeviceTag {
    Key: (String|Mapping)?
    Value: (String|Mapping)?
}

/// Create and manage wireless gateways, including LoRa gateways.
open class WirelessDevice extends cloudformation.Resource {

    Type = "AWS::IoTWireless::WirelessDevice"


    /// Wireless device description
    hidden Description: (String|Mapping)?

    /// Wireless device destination name
    hidden DestinationName: String|Mapping

    /// The date and time when the most recent uplink was received.
    hidden LastUplinkReceivedAt: (String|Mapping)?

    /// The combination of Package, Station and Model which represents the version of the LoRaWAN Wireless Device.
    hidden LoRaWAN: (WirelessDeviceLoRaWANDevice)?

    /// Wireless device name
    hidden Name: (String|Mapping)?

    /// FPort values for the GNSS, stream, and ClockSync functions of the positioning information.
    hidden Positioning: (WirelessDevicePositioning|Mapping)?

    /// A list of key-value pairs that contain metadata for the device. Currently not supported, will not create if tags are passed.
    hidden Tags: (Listing<WirelessDeviceTag>)?

    /// Thing arn. Passed into update to associate Thing with Wireless device.
    hidden ThingArn: (String|Mapping)?

    /// Wireless device type, currently only Sidewalk and LoRa
    hidden TypeProperty: WirelessDeviceType|Mapping

    Properties {
        ["Description"] = if (Description == null) null else Description
        ["DestinationName"] = if (DestinationName == null) null else DestinationName
        ["LastUplinkReceivedAt"] = if (LastUplinkReceivedAt == null) null else LastUplinkReceivedAt
        ["LoRaWAN"] = if (LoRaWAN == null) null else LoRaWAN
        ["Name"] = if (Name == null) null else Name
        ["Positioning"] = if (Positioning == null) null else Positioning
        ["Tags"] = if (Tags == null) null else Tags
        ["ThingArn"] = if (ThingArn == null) null else ThingArn
        ["Type"] = if (TypeProperty == null) null else TypeProperty
    }

}


typealias WirelessDevicePositioning = "Enabled"|"Disabled"

typealias WirelessDeviceType = "Sidewalk"|"LoRaWAN"
