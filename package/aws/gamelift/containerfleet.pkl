/// AWS::GameLift::ContainerFleet
///
/// Generated by rain build --pkl-class AWS::GameLift::ContainerFleet
module aws.gamelift.containerfleet

import "../../cloudformation.pkl"

/// Defines the range of ports on the instance that allow inbound traffic to connect with containers in a fleet.
open class ContainerFleetConnectionPortRange {
    FromPort: Int|Mapping
    ToPort: Int|Mapping
}

typealias DeploymentConfigurationImpairmentStrategy = "MAINTAIN"|"ROLLBACK"

typealias DeploymentConfigurationProtectionStrategy = "WITH_PROTECTION"|"IGNORE_PROTECTION"

/// Provides details about how to drain old tasks and replace them with new updated tasks.
open class ContainerFleetDeploymentConfiguration {
    ImpairmentStrategy: (DeploymentConfigurationImpairmentStrategy|Mapping)?
    MinimumHealthyPercentage: (Int|Mapping)?
    ProtectionStrategy: (DeploymentConfigurationProtectionStrategy|Mapping)?
}

/// Provides information about the last deployment ID and its status.
open class ContainerFleetDeploymentDetails {
    LatestDeploymentId: (String(matches(Regex(#"^[a-zA-Z0-9\-]+$|^$"#)))|Mapping)?
}

/// A policy that limits the number of game sessions a player can create on the same fleet. This optional policy gives game owners control over how players can consume available game server resources. A resource creation policy makes the following statement: "An individual player can create a maximum number of new game sessions within a specified time period".
///
/// 
/// The policy is evaluated when a player tries to create a new game session. For example, assume you have a policy of 10 new game sessions and a time period of 60 minutes. On receiving a CreateGameSession request, Amazon GameLift checks that the player (identified by CreatorId) has created fewer than 10 game sessions in the past 60 minutes.
open class ContainerFleetGameSessionCreationLimitPolicy {
    NewGameSessionsPerCreator: (Int|Mapping)?
    PolicyPeriodInMinutes: (Int|Mapping)?
}

typealias IpPermissionProtocol = "TCP"|"UDP"

/// A range of IP addresses and port settings that allow inbound traffic to connect to server processes on an Amazon GameLift hosting resource. New game sessions that are started on the fleet are assigned an IP address/port number combination, which must fall into the fleet's allowed ranges. For fleets created with a custom game server, the ranges reflect the server's game session assignments. For Realtime Servers fleets, Amazon GameLift automatically opens two port ranges, one for TCP messaging and one for UDP, for use by the Realtime servers.
open class ContainerFleetIpPermission {
    FromPort: Int|Mapping
    IpRange: String(matches(Regex(#"(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$)"#)))|Mapping
    Protocol: IpPermissionProtocol|Mapping
    ToPort: Int|Mapping
}

typealias ContainerFleetLocation = String|Mapping


/// Current resource capacity settings in a specified fleet or location. The location value might refer to a fleet's remote location or its home Region.
open class ContainerFleetLocationCapacity {
    DesiredEC2Instances: Int|Mapping
    MaxSize: Int|Mapping
    MinSize: Int|Mapping
}

/// A remote location where a multi-location fleet can deploy EC2 instances for game hosting.
open class ContainerFleetLocationConfiguration {
    Location: ContainerFleetLocation
    LocationCapacity: (ContainerFleetLocationCapacity)?
    StoppedActions: (ContainerFleetStoppedActions)?
}

/// A policy the location and provider of logs from the fleet.
open class ContainerFleetLogConfiguration {
    LogDestination: (ContainerFleetLogDestination)?
    S3BucketName: (String|Mapping)?
}

typealias ContainerFleetLogDestination = String|Mapping


typealias ScalingPolicyComparisonOperator = "GreaterThanOrEqualToThreshold"|"GreaterThanThreshold"|"LessThanThreshold"|"LessThanOrEqualToThreshold"

typealias ScalingPolicyMetricName = "ActivatingGameSessions"|"ActiveGameSessions"|"ActiveInstances"|"AvailableGameSessions"|"AvailablePlayerSessions"|"CurrentPlayerSessions"|"IdleInstances"|"PercentAvailableGameSessions"|"PercentIdleInstances"|"QueueDepth"|"WaitTime"|"ConcurrentActivatableGameSessions"

typealias ScalingPolicyPolicyType = "RuleBased"|"TargetBased"

typealias ScalingPolicyScalingAdjustmentType = "ChangeInCapacity"|"ExactCapacity"|"PercentChangeInCapacity"

/// Rule that controls how a fleet is scaled. Scaling policies are uniquely identified by the combination of name and fleet ID.
open class ContainerFleetScalingPolicy {
    ComparisonOperator: (ScalingPolicyComparisonOperator|Mapping)?
    EvaluationPeriods: (Int|Mapping)?
    MetricName: ScalingPolicyMetricName|Mapping
    Name: String|Mapping
    PolicyType: (ScalingPolicyPolicyType|Mapping)?
    ScalingAdjustment: (Int|Mapping)?
    ScalingAdjustmentType: (ScalingPolicyScalingAdjustmentType|Mapping)?
    TargetConfiguration: (ContainerFleetTargetConfiguration)?
    Threshold: (Number|Mapping)?
}

typealias StoppedActionsArray = "AUTO_SCALING"

typealias ContainerFleetStoppedActions = Listing<(StoppedActionsArray|Mapping)?>


/// A key-value pair to associate with a resource.
open class ContainerFleetTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// Settings for a target-based scaling policy. A target-based policy tracks a particular fleet metric specifies a target value for the metric. As player usage changes, the policy triggers Amazon GameLift to adjust capacity so that the metric returns to the target value. The target configuration specifies settings as needed for the target based policy, including the target value.
open class ContainerFleetTargetConfiguration {
    TargetValue: Number|Mapping
}

/// The AWS::GameLift::ContainerFleet resource creates an Amazon GameLift (GameLift) container fleet to host game servers.
open class ContainerFleet extends cloudformation.Resource {

    Type = "AWS::GameLift::ContainerFleet"


    /// Indicates whether to use On-Demand instances or Spot instances for this fleet. If empty, the default is ON_DEMAND. Both categories of instances use identical hardware and configurations based on the instance type selected for this fleet.
    hidden BillingType: (ContainerFleetBillingType|Mapping)?

    /// 
    hidden DeploymentConfiguration: (ContainerFleetDeploymentConfiguration)?

    /// A human-readable description of a fleet.
    hidden Description: (String|Mapping)?

    /// A unique identifier for an AWS IAM role that manages access to your AWS services. Create a role or look up a role's ARN from the IAM dashboard in the AWS Management Console.
    hidden FleetRoleArn: String(matches(Regex(#"^arn:aws(-.*)?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$"#)))|Mapping

    /// The name of the container group definition that will be created per game server. You must specify GAME_SERVER container group. You have the option to also specify one PER_INSTANCE container group.
    hidden GameServerContainerGroupDefinitionName: (String(matches(Regex(#"^[a-zA-Z0-9\-]+$|^arn:.*:containergroupdefinition\/[a-zA-Z0-9\-]+(:[0-9]+)?$"#)))|Mapping)?

    /// The number of desired game server container groups per instance, a number between 1-5000.
    hidden GameServerContainerGroupsPerInstance: (Int|Mapping)?

    /// A policy that limits the number of game sessions an individual player can create over a span of time for this fleet.
    hidden GameSessionCreationLimitPolicy: (ContainerFleetGameSessionCreationLimitPolicy)?

    /// 
    hidden InstanceConnectionPortRange: (ContainerFleetConnectionPortRange)?

    /// A range of IP addresses and port settings that allow inbound traffic to connect to server processes on an Amazon GameLift server.
    hidden InstanceInboundPermissions: (Listing<ContainerFleetIpPermission>)?

    /// The name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
    hidden InstanceType: (String|Mapping)?

    /// 
    hidden Locations: (Listing<ContainerFleetLocationConfiguration>)?

    /// 
    hidden LogConfiguration: (ContainerFleetLogConfiguration)?

    /// The name of an Amazon CloudWatch metric group. A metric group aggregates the metrics for all fleets in the group. Specify a string containing the metric group name. You can use an existing name or use a new name to create a new metric group. Currently, this parameter can have only one string.
    hidden MetricGroups: (Listing<String|Mapping>)?

    /// A game session protection policy to apply to all game sessions hosted on instances in this fleet. When protected, active game sessions cannot be terminated during a scale-down event. If this parameter is not set, instances in this fleet default to no protection. You can change a fleet's protection policy to affect future game sessions on the fleet. You can also set protection for individual game sessions.
    hidden NewGameSessionProtectionPolicy: (ContainerFleetNewGameSessionProtectionPolicy|Mapping)?

    /// The name of the container group definition that will be created per instance. This field is optional if you specify GameServerContainerGroupDefinitionName.
    hidden PerInstanceContainerGroupDefinitionName: (String(matches(Regex(#"^[a-zA-Z0-9\-]+$|^arn:.*:containergroupdefinition\/[a-zA-Z0-9\-]+(:[0-9]+)?$"#)))|Mapping)?

    /// A list of rules that control how a fleet is scaled.
    hidden ScalingPolicies: (Listing<ContainerFleetScalingPolicy>)?

    /// An array of key-value pairs to apply to this resource.
    hidden Tags: (Listing<ContainerFleetTag>)?

    Properties {
        ["BillingType"] = if (BillingType == null) null else BillingType
        ["DeploymentConfiguration"] = if (DeploymentConfiguration == null) null else DeploymentConfiguration
        ["Description"] = if (Description == null) null else Description
        ["FleetRoleArn"] = if (FleetRoleArn == null) null else FleetRoleArn
        ["GameServerContainerGroupDefinitionName"] = if (GameServerContainerGroupDefinitionName == null) null else GameServerContainerGroupDefinitionName
        ["GameServerContainerGroupsPerInstance"] = if (GameServerContainerGroupsPerInstance == null) null else GameServerContainerGroupsPerInstance
        ["GameSessionCreationLimitPolicy"] = if (GameSessionCreationLimitPolicy == null) null else GameSessionCreationLimitPolicy
        ["InstanceConnectionPortRange"] = if (InstanceConnectionPortRange == null) null else InstanceConnectionPortRange
        ["InstanceInboundPermissions"] = if (InstanceInboundPermissions == null) null else InstanceInboundPermissions
        ["InstanceType"] = if (InstanceType == null) null else InstanceType
        ["Locations"] = if (Locations == null) null else Locations
        ["LogConfiguration"] = if (LogConfiguration == null) null else LogConfiguration
        ["MetricGroups"] = if (MetricGroups == null) null else MetricGroups
        ["NewGameSessionProtectionPolicy"] = if (NewGameSessionProtectionPolicy == null) null else NewGameSessionProtectionPolicy
        ["PerInstanceContainerGroupDefinitionName"] = if (PerInstanceContainerGroupDefinitionName == null) null else PerInstanceContainerGroupDefinitionName
        ["ScalingPolicies"] = if (ScalingPolicies == null) null else ScalingPolicies
        ["Tags"] = if (Tags == null) null else Tags
    }

}


typealias ContainerFleetBillingType = "ON_DEMAND"|"SPOT"

typealias ContainerFleetNewGameSessionProtectionPolicy = "FullProtection"|"NoProtection"
