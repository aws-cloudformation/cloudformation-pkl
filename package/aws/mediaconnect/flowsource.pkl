/// AWS::MediaConnect::FlowSource
///
/// Generated by rain build --pkl-class AWS::MediaConnect::FlowSource
module aws.mediaconnect.flowsource

import "../../cloudformation.pkl"

typealias EncryptionAlgorithm = "aes128"|"aes192"|"aes256"

typealias EncryptionKeyType = "speke"|"static-key"|"srt-password"

/// Information about the encryption of the flow.
open class FlowSourceEncryption {
    Algorithm: (EncryptionAlgorithm|Mapping)?
    ConstantInitializationVector: (String|Mapping)?
    DeviceId: (String|Mapping)?
    KeyType: (EncryptionKeyType|Mapping)?
    Region: (String|Mapping)?
    ResourceId: (String|Mapping)?
    RoleArn: String|Mapping
    SecretArn: (String|Mapping)?
    Url: (String|Mapping)?
}

/// The source configuration for cloud flows receiving a stream from a bridge.
open class FlowSourceGatewayBridgeSource {
    BridgeArn: String|Mapping
    VpcInterfaceAttachment: (FlowSourceVpcInterfaceAttachment)?
}

/// The settings for attaching a VPC interface to an resource.
open class FlowSourceVpcInterfaceAttachment {
    VpcInterfaceName: (String|Mapping)?
}

/// Resource schema for AWS::MediaConnect::FlowSource
open class FlowSource extends cloudformation.Resource {

    Type = "AWS::MediaConnect::FlowSource"


    /// The type of encryption that is used on the content ingested from this source.
    hidden Decryption: (FlowSourceEncryption)?

    /// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
    hidden Description: String|Mapping

    /// The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
    hidden EntitlementArn: (String|Mapping)?

    /// The ARN of the flow.
    hidden FlowArn: (String|Mapping)?

    /// The source configuration for cloud flows receiving a stream from a bridge.
    hidden GatewayBridgeSource: (FlowSourceGatewayBridgeSource)?

    /// The port that the flow will be listening on for incoming content.
    hidden IngestPort: (Int|Mapping)?

    /// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
    hidden MaxBitrate: (Int|Mapping)?

    /// The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
    hidden MaxLatency: (Int|Mapping)?

    /// The minimum latency in milliseconds.
    hidden MinLatency: (Int|Mapping)?

    /// The name of the source.
    hidden Name: String|Mapping

    /// The protocol that is used by the source.
    hidden Protocol: (FlowSourceProtocol|Mapping)?

    /// The port that the flow uses to send outbound requests to initiate connection with the sender for fujitsu-qos protocol.
    hidden SenderControlPort: (Int|Mapping)?

    /// The IP address that the flow communicates with to initiate connection with the sender for fujitsu-qos protocol.
    hidden SenderIpAddress: (String|Mapping)?

    /// Source IP or domain name for SRT-caller protocol.
    hidden SourceListenerAddress: (String|Mapping)?

    /// Source port for SRT-caller protocol.
    hidden SourceListenerPort: (Int|Mapping)?

    /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    hidden StreamId: (String|Mapping)?

    /// The name of the VPC Interface this Source is configured with.
    hidden VpcInterfaceName: (String|Mapping)?

    /// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    hidden WhitelistCidr: (String|Mapping)?

    Properties {
        ["Decryption"] = if (Decryption == null) null else Decryption
        ["Description"] = if (Description == null) null else Description
        ["EntitlementArn"] = if (EntitlementArn == null) null else EntitlementArn
        ["FlowArn"] = if (FlowArn == null) null else FlowArn
        ["GatewayBridgeSource"] = if (GatewayBridgeSource == null) null else GatewayBridgeSource
        ["IngestPort"] = if (IngestPort == null) null else IngestPort
        ["MaxBitrate"] = if (MaxBitrate == null) null else MaxBitrate
        ["MaxLatency"] = if (MaxLatency == null) null else MaxLatency
        ["MinLatency"] = if (MinLatency == null) null else MinLatency
        ["Name"] = if (Name == null) null else Name
        ["Protocol"] = if (Protocol == null) null else Protocol
        ["SenderControlPort"] = if (SenderControlPort == null) null else SenderControlPort
        ["SenderIpAddress"] = if (SenderIpAddress == null) null else SenderIpAddress
        ["SourceListenerAddress"] = if (SourceListenerAddress == null) null else SourceListenerAddress
        ["SourceListenerPort"] = if (SourceListenerPort == null) null else SourceListenerPort
        ["StreamId"] = if (StreamId == null) null else StreamId
        ["VpcInterfaceName"] = if (VpcInterfaceName == null) null else VpcInterfaceName
        ["WhitelistCidr"] = if (WhitelistCidr == null) null else WhitelistCidr
    }

}


typealias FlowSourceProtocol = "zixi-push"|"rtp-fec"|"rtp"|"rist"|"srt-listener"|"srt-caller"
