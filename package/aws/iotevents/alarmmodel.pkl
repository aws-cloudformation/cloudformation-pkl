/// AWS::IoTEvents::AlarmModel
///
/// Generated by rain build --pkl-class AWS::IoTEvents::AlarmModel
module aws.iotevents.alarmmodel

import "../../cloudformation.pkl"

/// Specifies whether to get notified for alarm state changes.
open class AlarmModelAcknowledgeFlow {
    Enabled: (Boolean|Mapping)?
}

/// Specifies one of the following actions to receive notifications when the alarm state changes.
open class AlarmModelAlarmAction {
    DynamoDB: (AlarmModelDynamoDB)?
    DynamoDBv2: (AlarmModelDynamoDBv2)?
    Firehose: (AlarmModelFirehose)?
    IotEvents: (AlarmModelIotEvents)?
    IotSiteWise: (AlarmModelIotSiteWise)?
    IotTopicPublish: (AlarmModelIotTopicPublish)?
    Lambda: (AlarmModelLambda)?
    Sns: (AlarmModelSns)?
    Sqs: (AlarmModelSqs)?
}

typealias AlarmModelAlarmActions = Listing<(AlarmModelAlarmAction)?>


/// Contains the configuration information of alarm state changes.
open class AlarmModelAlarmCapabilities {
    AcknowledgeFlow: (AlarmModelAcknowledgeFlow)?
    InitializationConfiguration: (AlarmModelInitializationConfiguration)?
}

/// Contains information about one or more alarm actions.
open class AlarmModelAlarmEventActions {
    AlarmActions: (AlarmModelAlarmActions)?
}

/// Defines when your alarm is invoked.
open class AlarmModelAlarmRule {
    SimpleRule: (AlarmModelSimpleRule)?
}

/// A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *API Reference*.
///
///  You must use expressions for all parameters in ``AssetPropertyTimestamp``. The expressions accept literals, operators, functions, references, and substitution templates.
///   **Examples**
///  +  For literal values, the expressions must contain single quotes. For example, the value for the ``timeInSeconds`` parameter can be ``'1586400675'``.
///   +  For references, you must specify either variables or input values. For example, the value for the ``offsetInNanos`` parameter can be ``$variable.time``.
///   +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.
///  In the following example, the value for the ``timeInSeconds`` parameter uses a substitution template.
///   ``'${$input.TemperatureInput.sensorData.timestamp / 1000}'`` 
///   
///  For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
open class AlarmModelAssetPropertyTimestamp {
    OffsetInNanos: (String|Mapping)?
    TimeInSeconds: String|Mapping
}

/// A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *API Reference*.
///
///  You must use expressions for all parameters in ``AssetPropertyValue``. The expressions accept literals, operators, functions, references, and substitution templates.
///   **Examples**
///  +  For literal values, the expressions must contain single quotes. For example, the value for the ``quality`` parameter can be ``'GOOD'``.
///   +  For references, you must specify either variables or input values. For example, the value for the ``quality`` parameter can be ``$input.TemperatureInput.sensorData.quality``.
///   
///  For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
open class AlarmModelAssetPropertyValue {
    Quality: (String|Mapping)?
    Timestamp: (AlarmModelAssetPropertyTimestamp)?
    Value: AlarmModelAssetPropertyVariant
}

/// A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *API Reference*.
///
///  You must use expressions for all parameters in ``AssetPropertyVariant``. The expressions accept literals, operators, functions, references, and substitution templates.
///   **Examples**
///  +  For literal values, the expressions must contain single quotes. For example, the value for the ``integerValue`` parameter can be ``'100'``.
///   +  For references, you must specify either variables or parameters. For example, the value for the ``booleanValue`` parameter can be ``$variable.offline``.
///   +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates. 
///  In the following example, the value for the ``doubleValue`` parameter uses a substitution template. 
///   ``'${$input.TemperatureInput.sensorData.temperature * 6 / 5 + 32}'`` 
///   
///  For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
///  You must specify one of the following value types, depending on the ``dataType`` of the specified asset property. For more information, see [AssetProperty](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetProperty.html) in the *API Reference*.
open class AlarmModelAssetPropertyVariant {
    BooleanValue: (String|Mapping)?
    DoubleValue: (String|Mapping)?
    IntegerValue: (String|Mapping)?
    StringValue: (String|Mapping)?
}

/// Defines an action to write to the Amazon DynamoDB table that you created. The standard action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify.
///
///  You must use expressions for all parameters in ``DynamoDBAction``. The expressions accept literals, operators, functions, references, and substitution templates.
///   **Examples**
///  +  For literal values, the expressions must contain single quotes. For example, the value for the ``hashKeyType`` parameter can be ``'STRING'``.
///   +  For references, you must specify either variables or input values. For example, the value for the ``hashKeyField`` parameter can be ``$input.GreenhouseInput.name``.
///   +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.
///  In the following example, the value for the ``hashKeyValue`` parameter uses a substitution template. 
///   ``'${$input.GreenhouseInput.temperature * 6 / 5 + 32} in Fahrenheit'`` 
///   +  For a string concatenation, you must use ``+``. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.
///  In the following example, the value for the ``tableName`` parameter uses a string concatenation. 
///   ``'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date`` 
///   
///  For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
///  If the defined payload type is a string, ``DynamoDBAction`` writes non-JSON data to the DynamoDB table as binary data. The DynamoDB console displays the data as Base64-encoded text. The value for the ``payloadField`` parameter is ``<payload-field>_raw``.
open class AlarmModelDynamoDB {
    HashKeyField: String|Mapping
    HashKeyType: (String|Mapping)?
    HashKeyValue: String|Mapping
    Operation: (String|Mapping)?
    Payload: (AlarmModelPayload)?
    PayloadField: (String|Mapping)?
    RangeKeyField: (String|Mapping)?
    RangeKeyType: (String|Mapping)?
    RangeKeyValue: (String|Mapping)?
    TableName: String|Mapping
}

/// Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.
///
///  You must use expressions for all parameters in ``DynamoDBv2Action``. The expressions accept literals, operators, functions, references, and substitution templates.
///   **Examples**
///  +  For literal values, the expressions must contain single quotes. For example, the value for the ``tableName`` parameter can be ``'GreenhouseTemperatureTable'``.
///   +  For references, you must specify either variables or input values. For example, the value for the ``tableName`` parameter can be ``$variable.ddbtableName``.
///   +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.
///  In the following example, the value for the ``contentExpression`` parameter in ``Payload`` uses a substitution template. 
///   ``'{\"sensorID\": \"${$input.GreenhouseInput.sensor_id}\", \"temperature\": \"${$input.GreenhouseInput.temperature * 9 / 5 + 32}\"}'`` 
///   +  For a string concatenation, you must use ``+``. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.
///  In the following example, the value for the ``tableName`` parameter uses a string concatenation. 
///   ``'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date`` 
///   
///  For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
///  The value for the ``type`` parameter in ``Payload`` must be ``JSON``.
open class AlarmModelDynamoDBv2 {
    Payload: (AlarmModelPayload)?
    TableName: String|Mapping
}

/// Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
open class AlarmModelFirehose {
    DeliveryStreamName: String|Mapping
    Payload: (AlarmModelPayload)?
    Separator: (String(matches(Regex(#"([\n\t])|(\r\n)|(,)"#)))|Mapping)?
}

/// Specifies the default alarm state. The configuration applies to all alarms that were created based on this alarm model.
open class AlarmModelInitializationConfiguration {
    DisabledOnInitialization: Boolean|Mapping
}

/// Sends an ITE input, passing in information about the detector model instance and the event that triggered the action.
open class AlarmModelIotEvents {
    InputName: String(matches(Regex(#"^[a-zA-Z][a-zA-Z0-9_]*$"#)))|Mapping
    Payload: (AlarmModelPayload)?
}

/// Sends information about the detector model instance and the event that triggered the action to a specified asset property in ITSW.
///
///  You must use expressions for all parameters in ``IotSiteWiseAction``. The expressions accept literals, operators, functions, references, and substitutions templates.
///   **Examples**
///  +  For literal values, the expressions must contain single quotes. For example, the value for the ``propertyAlias`` parameter can be ``'/company/windfarm/3/turbine/7/temperature'``.
///   +  For references, you must specify either variables or input values. For example, the value for the ``assetId`` parameter can be ``$input.TurbineInput.assetId1``.
///   +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.
///  In the following example, the value for the ``propertyAlias`` parameter uses a substitution template. 
///   ``'company/windfarm/${$input.TemperatureInput.sensorData.windfarmID}/turbine/ ${$input.TemperatureInput.sensorData.turbineID}/temperature'`` 
///   
///  You must specify either ``propertyAlias`` or both ``assetId`` and ``propertyId`` to identify the target asset property in ITSW.
///  For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
open class AlarmModelIotSiteWise {
    AssetId: (String|Mapping)?
    EntryId: (String|Mapping)?
    PropertyAlias: (String|Mapping)?
    PropertyId: (String|Mapping)?
    PropertyValue: (AlarmModelAssetPropertyValue)?
}

/// Information required to publish the MQTT message through the IoT message broker.
open class AlarmModelIotTopicPublish {
    MqttTopic: String|Mapping
    Payload: (AlarmModelPayload)?
}

/// Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.
open class AlarmModelLambda {
    FunctionArn: String|Mapping
    Payload: (AlarmModelPayload)?
}

/// Information needed to configure the payload.
///
///  By default, ITE generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use ``contentExpression``.
open class AlarmModelPayload {
    ContentExpression: String|Mapping
    Type: String|Mapping
}

typealias SimpleRuleComparisonOperator = "GREATER"|"GREATER_OR_EQUAL"|"LESS"|"LESS_OR_EQUAL"|"EQUAL"|"NOT_EQUAL"

/// A rule that compares an input property value to a threshold value with a comparison operator.
open class AlarmModelSimpleRule {
    ComparisonOperator: SimpleRuleComparisonOperator|Mapping
    InputProperty: String|Mapping
    Threshold: String|Mapping
}

/// Information required to publish the Amazon SNS message.
open class AlarmModelSns {
    Payload: (AlarmModelPayload)?
    TargetArn: String|Mapping
}

/// Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue.
open class AlarmModelSqs {
    Payload: (AlarmModelPayload)?
    QueueUrl: String|Mapping
    UseBase64: (Boolean|Mapping)?
}

/// Metadata that can be used to manage the resource.
open class AlarmModelTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// Represents an alarm model to monitor an ITE input attribute. You can use the alarm to get notified when the value is outside a specified range. For more information, see [Create an alarm model](https://docs.aws.amazon.com/iotevents/latest/developerguide/create-alarms.html) in the *Developer Guide*.
open class AlarmModel extends cloudformation.Resource {

    Type = "AWS::IoTEvents::AlarmModel"


    /// Contains the configuration information of alarm state changes.
    hidden AlarmCapabilities: (AlarmModelAlarmCapabilities)?

    /// Contains information about one or more alarm actions.
    hidden AlarmEventActions: (AlarmModelAlarmEventActions)?

    /// The description of the alarm model.
    hidden AlarmModelDescription: (String|Mapping)?

    /// The name of the alarm model.
    hidden AlarmModelName: (String(matches(Regex(#"^[a-zA-Z0-9_-]+$"#)))|Mapping)?

    /// Defines when your alarm is invoked.
    hidden AlarmRule: AlarmModelAlarmRule

    /// An input attribute used as a key to create an alarm. ITE routes [inputs](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html) associated with this key to the alarm.
    hidden Key: (String(matches(Regex(#"^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w\- ]+`)|([\w\-]+)))*$"#)))|Mapping)?

    /// The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
    hidden RoleArn: String|Mapping

    /// A non-negative integer that reflects the severity level of the alarm.
    hidden Severity: (Int|Mapping)?

    /// A list of key-value pairs that contain metadata for the alarm model. The tags help you manage the alarm model. For more information, see [Tagging your resources](https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html) in the *Developer Guide*.
    ///
    ///  You can create up to 50 tags for one alarm model.
    hidden Tags: (Listing<AlarmModelTag>)?

    Properties {
        ["AlarmCapabilities"] = if (AlarmCapabilities == null) null else AlarmCapabilities
        ["AlarmEventActions"] = if (AlarmEventActions == null) null else AlarmEventActions
        ["AlarmModelDescription"] = if (AlarmModelDescription == null) null else AlarmModelDescription
        ["AlarmModelName"] = if (AlarmModelName == null) null else AlarmModelName
        ["AlarmRule"] = if (AlarmRule == null) null else AlarmRule
        ["Key"] = if (Key == null) null else Key
        ["RoleArn"] = if (RoleArn == null) null else RoleArn
        ["Severity"] = if (Severity == null) null else Severity
        ["Tags"] = if (Tags == null) null else Tags
    }

}
