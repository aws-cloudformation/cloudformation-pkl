/// AWS::AppMesh::VirtualGateway
///
/// Generated by rain build --pkl-class AWS::AppMesh::VirtualGateway
module aws.appmesh.virtualgateway

import "../../cloudformation.pkl"

/// 
open class VirtualGatewayJsonFormatRef {
    Key: String|Mapping
    Value: String|Mapping
}

/// 
open class VirtualGatewayLoggingFormat {
    Json: (Listing<VirtualGatewayJsonFormatRef>)?
    Text: (String|Mapping)?
}

/// 
open class VirtualGatewaySubjectAlternativeNameMatchers {
    Exact: (Listing<String|Mapping>)?
}

/// 
open class VirtualGatewaySubjectAlternativeNames {
    Match: VirtualGatewaySubjectAlternativeNameMatchers
}

/// 
open class VirtualGatewayTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayAccessLog {
    File: (VirtualGatewayVirtualGatewayFileAccessLog)?
}

/// 
open class VirtualGatewayVirtualGatewayBackendDefaults {
    ClientPolicy: (VirtualGatewayVirtualGatewayClientPolicy)?
}

/// 
open class VirtualGatewayVirtualGatewayClientPolicy {
    TLS: (VirtualGatewayVirtualGatewayClientPolicyTls)?
}

/// 
open class VirtualGatewayVirtualGatewayClientPolicyTls {
    Certificate: (VirtualGatewayVirtualGatewayClientTlsCertificate)?
    Enforce: (Boolean|Mapping)?
    Ports: (Listing<Int|Mapping>)?
    Validation: VirtualGatewayVirtualGatewayTlsValidationContext
}

/// 
open class VirtualGatewayVirtualGatewayClientTlsCertificate {
    File: (VirtualGatewayVirtualGatewayListenerTlsFileCertificate)?
    SDS: (VirtualGatewayVirtualGatewayListenerTlsSdsCertificate)?
}

/// 
open class VirtualGatewayVirtualGatewayConnectionPool {
    GRPC: (VirtualGatewayVirtualGatewayGrpcConnectionPool)?
    HTTP: (VirtualGatewayVirtualGatewayHttpConnectionPool)?
    HTTP2: (VirtualGatewayVirtualGatewayHttp2ConnectionPool)?
}

/// 
open class VirtualGatewayVirtualGatewayFileAccessLog {
    Format: (VirtualGatewayLoggingFormat)?
    Path: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayGrpcConnectionPool {
    MaxRequests: Int|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayHealthCheckPolicy {
    HealthyThreshold: Int|Mapping
    IntervalMillis: Int|Mapping
    Path: (String|Mapping)?
    Port: (Int|Mapping)?
    Protocol: String|Mapping
    TimeoutMillis: Int|Mapping
    UnhealthyThreshold: Int|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayHttp2ConnectionPool {
    MaxRequests: Int|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayHttpConnectionPool {
    MaxConnections: Int|Mapping
    MaxPendingRequests: (Int|Mapping)?
}

/// 
open class VirtualGatewayVirtualGatewayListener {
    ConnectionPool: (VirtualGatewayVirtualGatewayConnectionPool)?
    HealthCheck: (VirtualGatewayVirtualGatewayHealthCheckPolicy)?
    PortMapping: VirtualGatewayVirtualGatewayPortMapping
    TLS: (VirtualGatewayVirtualGatewayListenerTls)?
}

/// 
open class VirtualGatewayVirtualGatewayListenerTls {
    Certificate: VirtualGatewayVirtualGatewayListenerTlsCertificate
    Mode: String|Mapping
    Validation: (VirtualGatewayVirtualGatewayListenerTlsValidationContext)?
}

/// 
open class VirtualGatewayVirtualGatewayListenerTlsAcmCertificate {
    CertificateArn: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayListenerTlsCertificate {
    ACM: (VirtualGatewayVirtualGatewayListenerTlsAcmCertificate)?
    File: (VirtualGatewayVirtualGatewayListenerTlsFileCertificate)?
    SDS: (VirtualGatewayVirtualGatewayListenerTlsSdsCertificate)?
}

/// 
open class VirtualGatewayVirtualGatewayListenerTlsFileCertificate {
    CertificateChain: String|Mapping
    PrivateKey: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayListenerTlsSdsCertificate {
    SecretName: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayListenerTlsValidationContext {
    SubjectAlternativeNames: (VirtualGatewaySubjectAlternativeNames)?
    Trust: VirtualGatewayVirtualGatewayListenerTlsValidationContextTrust
}

/// 
open class VirtualGatewayVirtualGatewayListenerTlsValidationContextTrust {
    File: (VirtualGatewayVirtualGatewayTlsValidationContextFileTrust)?
    SDS: (VirtualGatewayVirtualGatewayTlsValidationContextSdsTrust)?
}

/// 
open class VirtualGatewayVirtualGatewayLogging {
    AccessLog: (VirtualGatewayVirtualGatewayAccessLog)?
}

/// 
open class VirtualGatewayVirtualGatewayPortMapping {
    Port: Int|Mapping
    Protocol: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewaySpec {
    BackendDefaults: (VirtualGatewayVirtualGatewayBackendDefaults)?
    Listeners: Listing<VirtualGatewayVirtualGatewayListener>
    Logging: (VirtualGatewayVirtualGatewayLogging)?
}

/// 
open class VirtualGatewayVirtualGatewayTlsValidationContext {
    SubjectAlternativeNames: (VirtualGatewaySubjectAlternativeNames)?
    Trust: VirtualGatewayVirtualGatewayTlsValidationContextTrust
}

/// 
open class VirtualGatewayVirtualGatewayTlsValidationContextAcmTrust {
    CertificateAuthorityArns: Listing<String|Mapping>
}

/// 
open class VirtualGatewayVirtualGatewayTlsValidationContextFileTrust {
    CertificateChain: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayTlsValidationContextSdsTrust {
    SecretName: String|Mapping
}

/// 
open class VirtualGatewayVirtualGatewayTlsValidationContextTrust {
    ACM: (VirtualGatewayVirtualGatewayTlsValidationContextAcmTrust)?
    File: (VirtualGatewayVirtualGatewayTlsValidationContextFileTrust)?
    SDS: (VirtualGatewayVirtualGatewayTlsValidationContextSdsTrust)?
}

/// Resource Type definition for AWS::AppMesh::VirtualGateway
open class VirtualGateway extends cloudformation.Resource {

    Type = "AWS::AppMesh::VirtualGateway"


    /// 
    hidden MeshName: String|Mapping

    /// 
    hidden MeshOwner: (String|Mapping)?

    /// 
    hidden Spec: VirtualGatewayVirtualGatewaySpec

    /// 
    hidden Tags: (Listing<VirtualGatewayTag>)?

    /// 
    hidden VirtualGatewayName: (String|Mapping)?

    Properties {
        ["MeshName"] = if (MeshName == null) null else MeshName
        ["MeshOwner"] = if (MeshOwner == null) null else MeshOwner
        ["Spec"] = if (Spec == null) null else Spec
        ["Tags"] = if (Tags == null) null else Tags
        ["VirtualGatewayName"] = if (VirtualGatewayName == null) null else VirtualGatewayName
    }

}
