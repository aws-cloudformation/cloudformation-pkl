/// AWS::ApplicationSignals::ServiceLevelObjective
///
/// Generated by rain build --pkl-class AWS::ApplicationSignals::ServiceLevelObjective
module aws.applicationsignals.servicelevelobjective

import "../../cloudformation.pkl"

/// This object defines the length of the look-back window used to calculate one burn rate metric for this SLO. The burn rate measures how fast the service is consuming the error budget, relative to the attainment goal of the SLO. A burn rate of exactly 1 indicates that the SLO goal will be met exactly.
///
/// For example, if you specify 60 as the number of minutes in the look-back window, the burn rate is calculated as the following:
/// burn rate = error rate over the look-back window / (1 - attainment goal percentage)
open class ServiceLevelObjectiveBurnRateConfiguration {
    LookBackWindowMinutes: Int|Mapping
}

typealias ServiceLevelObjectiveBurnRateConfigurations = Listing<(ServiceLevelObjectiveBurnRateConfiguration)?>


/// If the interval for this service level objective is a calendar interval, this structure contains the interval specifications.
open class ServiceLevelObjectiveCalendarInterval {
    Duration: ServiceLevelObjectiveDuration
    DurationUnit: ServiceLevelObjectiveDurationUnit
    StartTime: Int|Mapping
}

/// A dimension is a name/value pair that is part of the identity of a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric. For example, many Amazon EC2 metrics publish `InstanceId` as a dimension name, and the actual instance ID as the value for that dimension. You can assign up to 30 dimensions to a metric.
open class ServiceLevelObjectiveDimension {
    Name: String|Mapping
    Value: String|Mapping
}

typealias ServiceLevelObjectiveDuration = Int|Mapping


typealias ServiceLevelObjectiveDurationUnit = String|Mapping


/// A structure that contains the attributes that determine the goal of the SLO. This includes the time period for evaluation and the attainment threshold.
open class ServiceLevelObjectiveGoal {
    AttainmentGoal: (Number|Mapping)?
    Interval: (ServiceLevelObjectiveInterval)?
    WarningThreshold: (Number|Mapping)?
}

/// The time period used to evaluate the SLO. It can be either a calendar interval or rolling interval.
///
/// If you omit this parameter, a rolling interval of 7 days is used.
open class ServiceLevelObjectiveInterval {
    CalendarInterval: (ServiceLevelObjectiveCalendarInterval)?
    RollingInterval: (ServiceLevelObjectiveRollingInterval)?
}

typealias ServiceLevelObjectiveKeyAttributes = Mapping<String, Any>


/// This structure defines the metric used for a service level indicator, including the metric name, namespace, and dimensions.
open class ServiceLevelObjectiveMetric {
    Dimensions: (Listing<ServiceLevelObjectiveDimension>)?
    MetricName: (String|Mapping)?
    Namespace: (String|Mapping)?
}

typealias ServiceLevelObjectiveMetricDataQueries = Listing<(ServiceLevelObjectiveMetricDataQuery)?>


/// Use this structure to define a metric or metric math expression that you want to use as for a service level objective.
///
/// Each `MetricDataQuery` in the `MetricDataQueries` array specifies either a metric to retrieve, or a metric math expression to be performed on retrieved metrics. A single `MetricDataQueries` array can include as many as 20 `MetricDataQuery` structures in the array. The 20 structures can include as many as 10 structures that contain a `MetricStat` parameter to retrieve a metric, and as many as 10 structures that contain the `Expression` parameter to perform a math expression. Of those Expression structures, exactly one must have true as the value for `ReturnData`. The result of this expression used for the SLO.
open class ServiceLevelObjectiveMetricDataQuery {
    AccountId: (String|Mapping)?
    Expression: (String|Mapping)?
    Id: String|Mapping
    MetricStat: (ServiceLevelObjectiveMetricStat)?
    ReturnData: (Boolean|Mapping)?
}

/// A metric to be used directly for the SLO, or to be used in the math expression that will be used for the SLO. Within one MetricDataQuery object, you must specify either Expression or MetricStat but not both.
open class ServiceLevelObjectiveMetricStat {
    Metric: ServiceLevelObjectiveMetric
    Period: Int|Mapping
    Stat: String|Mapping
    Unit: (String|Mapping)?
}

/// This structure defines the metric that is used as the "good request" or "bad request" value for a request-based SLO. This value observed for the metric defined in `TotalRequestCountMetric` is divided by the number found for `MonitoredRequestCountMetric` to determine the percentage of successful requests that this SLO tracks.
open class ServiceLevelObjectiveMonitoredRequestCountMetric {
    BadCountMetric: (ServiceLevelObjectiveMetricDataQueries)?
    GoodCountMetric: (ServiceLevelObjectiveMetricDataQueries)?
}

typealias RequestBasedSliComparisonOperator = "GreaterThanOrEqualTo"|"LessThanOrEqualTo"|"LessThan"|"GreaterThan"

/// This structure contains information about the performance metric that a request-based SLO monitors.
open class ServiceLevelObjectiveRequestBasedSli {
    ComparisonOperator: (RequestBasedSliComparisonOperator|Mapping)?
    MetricThreshold: (Number|Mapping)?
    RequestBasedSliMetric: ServiceLevelObjectiveRequestBasedSliMetric
}

typealias RequestBasedSliMetricMetricType = "LATENCY"|"AVAILABILITY"

/// This structure contains the information about the metric that is used for a request-based SLO.
open class ServiceLevelObjectiveRequestBasedSliMetric {
    KeyAttributes: (ServiceLevelObjectiveKeyAttributes)?
    MetricType: (RequestBasedSliMetricMetricType|Mapping)?
    MonitoredRequestCountMetric: (ServiceLevelObjectiveMonitoredRequestCountMetric)?
    OperationName: (String|Mapping)?
    TotalRequestCountMetric: (ServiceLevelObjectiveMetricDataQueries)?
}

/// If the interval is a calendar interval, this structure contains the interval specifications.
open class ServiceLevelObjectiveRollingInterval {
    Duration: ServiceLevelObjectiveDuration
    DurationUnit: ServiceLevelObjectiveDurationUnit
}

typealias SliComparisonOperator = "GreaterThanOrEqualTo"|"LessThanOrEqualTo"|"LessThan"|"GreaterThan"

/// This structure contains information about the performance metric that an SLO monitors.
open class ServiceLevelObjectiveSli {
    ComparisonOperator: SliComparisonOperator|Mapping
    MetricThreshold: Number|Mapping
    SliMetric: ServiceLevelObjectiveSliMetric
}

typealias SliMetricMetricType = "LATENCY"|"AVAILABILITY"

/// A structure that contains information about the metric that the SLO monitors.
open class ServiceLevelObjectiveSliMetric {
    KeyAttributes: (ServiceLevelObjectiveKeyAttributes)?
    MetricDataQueries: (ServiceLevelObjectiveMetricDataQueries)?
    MetricType: (SliMetricMetricType|Mapping)?
    OperationName: (String|Mapping)?
    PeriodSeconds: (Int|Mapping)?
    Statistic: (String|Mapping)?
}

/// 
open class ServiceLevelObjectiveTag {
    Key: String(matches(Regex(#"^(?!aws:)[a-zA-Z+-=._:/]+$"#)))|Mapping
    Value: String|Mapping
}

typealias ServiceLevelObjectiveTags = Listing<(ServiceLevelObjectiveTag)?>


/// Resource Type definition for AWS::ApplicationSignals::ServiceLevelObjective
open class ServiceLevelObjective extends cloudformation.Resource {

    Type = "AWS::ApplicationSignals::ServiceLevelObjective"


    /// 
    hidden BurnRateConfigurations: (ServiceLevelObjectiveBurnRateConfigurations)?

    /// An optional description for this SLO. Default is 'No description'
    hidden Description: (String|Mapping)?

    /// 
    hidden Goal: (ServiceLevelObjectiveGoal)?

    /// The name of this SLO.
    hidden Name: String(matches(Regex(#"^[0-9A-Za-z][-._0-9A-Za-z ]{0,126}[0-9A-Za-z]$"#)))|Mapping

    /// 
    hidden RequestBasedSli: (ServiceLevelObjectiveRequestBasedSli)?

    /// 
    hidden Sli: (ServiceLevelObjectiveSli)?

    /// 
    hidden Tags: (ServiceLevelObjectiveTags)?

    Properties {
        ["BurnRateConfigurations"] = if (BurnRateConfigurations == null) null else BurnRateConfigurations
        ["Description"] = if (Description == null) null else Description
        ["Goal"] = if (Goal == null) null else Goal
        ["Name"] = if (Name == null) null else Name
        ["RequestBasedSli"] = if (RequestBasedSli == null) null else RequestBasedSli
        ["Sli"] = if (Sli == null) null else Sli
        ["Tags"] = if (Tags == null) null else Tags
    }

}
