/// AWS::AppRunner::Service
///
/// Generated by rain build --pkl-class AWS::AppRunner::Service
module aws.apprunner.service

import "../../cloudformation.pkl"

/// Authentication Configuration
open class ServiceAuthenticationConfiguration {
    AccessRoleArn: (ServiceRoleArn)?
    ConnectionArn: (String(matches(Regex(#"arn:aws(-[\w]+)*:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[0-9]{12}:(\w|\/|-){1,1011}"#)))|Mapping)?
}

typealias CodeConfigurationConfigurationSource = "REPOSITORY"|"API"

/// Code Configuration
open class ServiceCodeConfiguration {
    CodeConfigurationValues: (ServiceCodeConfigurationValues)?
    ConfigurationSource: CodeConfigurationConfigurationSource|Mapping
}

typealias CodeConfigurationValuesRuntime = "PYTHON_3"|"NODEJS_12"|"NODEJS_14"|"CORRETTO_8"|"CORRETTO_11"|"NODEJS_16"|"GO_1"|"DOTNET_6"|"PHP_81"|"RUBY_31"|"PYTHON_311"|"NODEJS_18"

/// Code Configuration Values
open class ServiceCodeConfigurationValues {
    BuildCommand: (String|Mapping)?
    Port: (String|Mapping)?
    Runtime: CodeConfigurationValuesRuntime|Mapping
    RuntimeEnvironmentSecrets: (Listing<ServiceKeyValuePair>)?
    RuntimeEnvironmentVariables: (Listing<ServiceKeyValuePair>)?
    StartCommand: (String|Mapping)?
}

/// Source Code Repository
open class ServiceCodeRepository {
    CodeConfiguration: (ServiceCodeConfiguration)?
    RepositoryUrl: String|Mapping
    SourceCodeVersion: ServiceSourceCodeVersion
    SourceDirectory: (String(matches(Regex(#"[^\x00]+"#)))|Mapping)?
}

typealias EgressConfigurationEgressType = "DEFAULT"|"VPC"

/// Network egress configuration
open class ServiceEgressConfiguration {
    EgressType: EgressConfigurationEgressType|Mapping
    VpcConnectorArn: (String(matches(Regex(#"arn:aws(-[\w]+)*:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[0-9]{12}:(\w|\/|-){1,1011}"#)))|Mapping)?
}

/// Encryption configuration (KMS key)
open class ServiceEncryptionConfiguration {
    KmsKey: String(matches(Regex(#"arn:aws(-[\w]+)*:kms:[a-z\-]+-[0-9]{1}:[0-9]{12}:key\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"#)))|Mapping
}

typealias HealthCheckConfigurationProtocol = "TCP"|"HTTP"

/// Health check configuration
open class ServiceHealthCheckConfiguration {
    HealthyThreshold: (Int|Mapping)?
    Interval: (Int|Mapping)?
    Path: (String|Mapping)?
    Protocol: (HealthCheckConfigurationProtocol|Mapping)?
    Timeout: (Int|Mapping)?
    UnhealthyThreshold: (Int|Mapping)?
}

/// Image Configuration
open class ServiceImageConfiguration {
    Port: (String|Mapping)?
    RuntimeEnvironmentSecrets: (Listing<ServiceKeyValuePair>)?
    RuntimeEnvironmentVariables: (Listing<ServiceKeyValuePair>)?
    StartCommand: (String|Mapping)?
}

typealias ImageRepositoryImageRepositoryType = "ECR"|"ECR_PUBLIC"

/// Image Repository
open class ServiceImageRepository {
    ImageConfiguration: (ServiceImageConfiguration)?
    ImageIdentifier: String(matches(Regex(#"([0-9]{12}.dkr.ecr.[a-z\-]+-[0-9]{1}.amazonaws.com\/.*)|(^public\.ecr\.aws\/.+\/.+)"#)))|Mapping
    ImageRepositoryType: ImageRepositoryImageRepositoryType|Mapping
}

/// Network ingress configuration
open class ServiceIngressConfiguration {
    IsPubliclyAccessible: Boolean|Mapping
}

/// Instance Configuration
open class ServiceInstanceConfiguration {
    Cpu: (String(matches(Regex(#"256|512|1024|2048|4096|(0.25|0.5|1|2|4) vCPU"#)))|Mapping)?
    InstanceRoleArn: (ServiceRoleArn)?
    Memory: (String(matches(Regex(#"512|1024|2048|3072|4096|6144|8192|10240|12288|(0.5|1|2|3|4|6|8|10|12) GB"#)))|Mapping)?
}

/// 
open class ServiceKeyValuePair {
    Name: (String|Mapping)?
    Value: (String|Mapping)?
}

typealias NetworkConfigurationIpAddressType = "IPV4"|"DUAL_STACK"

/// Network configuration
open class ServiceNetworkConfiguration {
    EgressConfiguration: (ServiceEgressConfiguration)?
    IngressConfiguration: (ServiceIngressConfiguration)?
    IpAddressType: (NetworkConfigurationIpAddressType|Mapping)?
}

typealias ServiceRoleArn = String|Mapping


/// Service observability configuration
open class ServiceServiceObservabilityConfiguration {
    ObservabilityConfigurationArn: (String(matches(Regex(#"arn:aws(-[\w]+)*:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[0-9]{12}:(\w|/|-){1,1011}"#)))|Mapping)?
    ObservabilityEnabled: Boolean|Mapping
}

typealias SourceCodeVersionType = "BRANCH"

/// Source Code Version
open class ServiceSourceCodeVersion {
    Type: SourceCodeVersionType|Mapping
    Value: String|Mapping
}

/// Source Code configuration
open class ServiceSourceConfiguration {
    AuthenticationConfiguration: (ServiceAuthenticationConfiguration)?
    AutoDeploymentsEnabled: (Boolean|Mapping)?
    CodeRepository: (ServiceCodeRepository)?
    ImageRepository: (ServiceImageRepository)?
}

/// 
open class ServiceTag {
    Key: (String|Mapping)?
    Value: (String|Mapping)?
}

/// The AWS::AppRunner::Service resource specifies an AppRunner Service.
open class Service extends cloudformation.Resource {

    Type = "AWS::AppRunner::Service"


    /// Autoscaling configuration ARN
    hidden AutoScalingConfigurationArn: (String(matches(Regex(#"arn:aws(-[\w]+)*:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[0-9]{12}:(\w|\/|-){1,1011}"#)))|Mapping)?

    /// 
    hidden EncryptionConfiguration: (ServiceEncryptionConfiguration)?

    /// 
    hidden HealthCheckConfiguration: (ServiceHealthCheckConfiguration)?

    /// 
    hidden InstanceConfiguration: (ServiceInstanceConfiguration)?

    /// 
    hidden NetworkConfiguration: (ServiceNetworkConfiguration)?

    /// 
    hidden ObservabilityConfiguration: (ServiceServiceObservabilityConfiguration)?

    /// The AppRunner Service Name.
    hidden ServiceName: (String(matches(Regex(#"[A-Za-z0-9][A-Za-z0-9-_]{3,39}"#)))|Mapping)?

    /// 
    hidden SourceConfiguration: ServiceSourceConfiguration

    /// 
    hidden Tags: (Listing<ServiceTag>)?

    Properties {
        ["AutoScalingConfigurationArn"] = if (AutoScalingConfigurationArn == null) null else AutoScalingConfigurationArn
        ["EncryptionConfiguration"] = if (EncryptionConfiguration == null) null else EncryptionConfiguration
        ["HealthCheckConfiguration"] = if (HealthCheckConfiguration == null) null else HealthCheckConfiguration
        ["InstanceConfiguration"] = if (InstanceConfiguration == null) null else InstanceConfiguration
        ["NetworkConfiguration"] = if (NetworkConfiguration == null) null else NetworkConfiguration
        ["ObservabilityConfiguration"] = if (ObservabilityConfiguration == null) null else ObservabilityConfiguration
        ["ServiceName"] = if (ServiceName == null) null else ServiceName
        ["SourceConfiguration"] = if (SourceConfiguration == null) null else SourceConfiguration
        ["Tags"] = if (Tags == null) null else Tags
    }

}
