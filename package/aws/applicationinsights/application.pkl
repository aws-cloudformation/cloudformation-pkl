/// AWS::ApplicationInsights::Application
///
/// Generated by rain build --pkl-class AWS::ApplicationInsights::Application
module aws.applicationinsights.application

import "../../cloudformation.pkl"

typealias AlarmSeverity = "HIGH"|"MEDIUM"|"LOW"

/// A CloudWatch alarm to be monitored for the component.
open class ApplicationAlarm {
    AlarmName: String|Mapping
    Severity: (AlarmSeverity|Mapping)?
}

/// A metric to be monitored for the component.
open class ApplicationAlarmMetric {
    AlarmMetricName: String|Mapping
}

/// The configuration settings of the component.
open class ApplicationComponentConfiguration {
    ConfigurationDetails: (ApplicationConfigurationDetails)?
    SubComponentTypeConfigurations: (Listing<ApplicationSubComponentTypeConfiguration>)?
}

typealias ComponentMonitoringSettingComponentConfigurationMode = "DEFAULT"|"DEFAULT_WITH_OVERWRITE"|"CUSTOM"

/// The monitoring setting of the component.
open class ApplicationComponentMonitoringSetting {
    ComponentARN: (String(matches(Regex(#"^arn:aws(-[\w]+)*:[\w\d-]+:([\w\d-]*)?:[\w\d_-]*([:/].+)*$"#)))|Mapping)?
    ComponentConfigurationMode: ComponentMonitoringSettingComponentConfigurationMode|Mapping
    ComponentName: (String(matches(Regex(#"^[\d\w\-_.+]*$"#)))|Mapping)?
    CustomComponentConfiguration: (ApplicationComponentConfiguration)?
    DefaultOverwriteComponentConfiguration: (ApplicationComponentConfiguration)?
    Tier: String(matches(Regex(#"^[A-Z][[A-Z]_]*$"#)))|Mapping
}

/// The configuration settings.
open class ApplicationConfigurationDetails {
    AlarmMetrics: (Listing<ApplicationAlarmMetric>)?
    Alarms: (Listing<ApplicationAlarm>)?
    HAClusterPrometheusExporter: (ApplicationHAClusterPrometheusExporter)?
    HANAPrometheusExporter: (ApplicationHANAPrometheusExporter)?
    JMXPrometheusExporter: (ApplicationJMXPrometheusExporter)?
    Logs: (Listing<ApplicationLog>)?
    NetWeaverPrometheusExporter: (ApplicationNetWeaverPrometheusExporter)?
    Processes: (Listing<ApplicationProcess>)?
    SQLServerPrometheusExporter: (ApplicationSQLServerPrometheusExporter)?
    WindowsEvents: (Listing<ApplicationWindowsEvent>)?
}

/// The custom grouped component.
open class ApplicationCustomComponent {
    ComponentName: String(matches(Regex(#"^[\d\w\-_.+]*$"#)))|Mapping
    ResourceList: Listing<String|Mapping>
}

typealias ApplicationEventLevel = String|Mapping


/// The HA cluster Prometheus Exporter settings.
open class ApplicationHAClusterPrometheusExporter {
    PrometheusPort: (String|Mapping)?
}

/// The HANA DB Prometheus Exporter settings.
open class ApplicationHANAPrometheusExporter {
    AgreeToInstallHANADBClient: Boolean|Mapping
    HANAPort: String|Mapping
    HANASID: String|Mapping
    HANASecretName: String|Mapping
    PrometheusPort: (String|Mapping)?
}

/// The JMX Prometheus Exporter settings.
open class ApplicationJMXPrometheusExporter {
    HostPort: (String|Mapping)?
    JMXURL: (String|Mapping)?
    PrometheusPort: (String|Mapping)?
}

typealias LogEncoding = "utf-8"|"utf-16"|"ascii"

/// A log to be monitored for the component.
open class ApplicationLog {
    Encoding: (LogEncoding|Mapping)?
    LogGroupName: (String(matches(Regex(#"[\.\-_/#A-Za-z0-9]+"#)))|Mapping)?
    LogPath: (String(matches(Regex(#"^([a-zA-Z]:\\[\\\S|*\S]?.*|/[^"']*)$"#)))|Mapping)?
    LogType: String(matches(Regex(#"^[A-Z][[A-Z]_]*$"#)))|Mapping
    PatternSet: (String(matches(Regex(#"[a-zA-Z0-9.-_]*"#)))|Mapping)?
}

/// The log pattern.
open class ApplicationLogPattern {
    Pattern: String|Mapping
    PatternName: String(matches(Regex(#"[a-zA-Z0-9.-_]*"#)))|Mapping
    Rank: Int|Mapping
}

/// The log pattern set.
open class ApplicationLogPatternSet {
    LogPatterns: Listing<ApplicationLogPattern>
    PatternSetName: String(matches(Regex(#"[a-zA-Z0-9.-_]*"#)))|Mapping
}

/// The NetWeaver Prometheus Exporter Settings.
open class ApplicationNetWeaverPrometheusExporter {
    InstanceNumbers: Listing<String|Mapping>
    PrometheusPort: (String|Mapping)?
    SAPSID: String|Mapping
}

/// A process to be monitored for the component.
open class ApplicationProcess {
    AlarmMetrics: Listing<ApplicationAlarmMetric>
    ProcessName: String(matches(Regex(#"^[a-zA-Z0-9_,-]+$"#)))|Mapping
}

/// The SQL prometheus exporter settings.
open class ApplicationSQLServerPrometheusExporter {
    PrometheusPort: String|Mapping
    SQLSecretName: String|Mapping
}

/// The configuration settings of sub components.
open class ApplicationSubComponentConfigurationDetails {
    AlarmMetrics: (Listing<ApplicationAlarmMetric>)?
    Logs: (Listing<ApplicationLog>)?
    Processes: (Listing<ApplicationProcess>)?
    WindowsEvents: (Listing<ApplicationWindowsEvent>)?
}

typealias SubComponentTypeConfigurationSubComponentType = "AWS::EC2::Instance"|"AWS::EC2::Volume"

/// One type sub component configurations for the component.
open class ApplicationSubComponentTypeConfiguration {
    SubComponentConfigurationDetails: ApplicationSubComponentConfigurationDetails
    SubComponentType: SubComponentTypeConfigurationSubComponentType|Mapping
}

/// A key-value pair to associate with a resource.
open class ApplicationTag {
    Key: String|Mapping
    Value: String|Mapping
}

/// A Windows Event to be monitored for the component.
open class ApplicationWindowsEvent {
    EventLevels: Listing<ApplicationEventLevel>
    EventName: String(matches(Regex(#"^[a-zA-Z0-9_ \\/-]+$"#)))|Mapping
    LogGroupName: String(matches(Regex(#"[\.\-_/#A-Za-z0-9]+"#)))|Mapping
    PatternSet: (String(matches(Regex(#"[a-zA-Z0-9.-_]*"#)))|Mapping)?
}

/// Resource schema for AWS::ApplicationInsights::Application
open class Application extends cloudformation.Resource {

    Type = "AWS::ApplicationInsights::Application"


    /// If set to true, the managed policies for SSM and CW will be attached to the instance roles if they are missing
    hidden AttachMissingPermission: (Boolean|Mapping)?

    /// If set to true, application will be configured with recommended monitoring configuration.
    hidden AutoConfigurationEnabled: (Boolean|Mapping)?

    /// Indicates whether Application Insights can listen to CloudWatch events for the application resources.
    hidden CWEMonitorEnabled: (Boolean|Mapping)?

    /// The monitoring settings of the components.
    hidden ComponentMonitoringSettings: (Listing<ApplicationComponentMonitoringSetting>)?

    /// The custom grouped components.
    hidden CustomComponents: (Listing<ApplicationCustomComponent>)?

    /// The grouping type of the application
    hidden GroupingType: (ApplicationGroupingType|Mapping)?

    /// The log pattern sets.
    hidden LogPatternSets: (Listing<ApplicationLogPatternSet>)?

    /// When set to true, creates opsItems for any problems detected on an application.
    hidden OpsCenterEnabled: (Boolean|Mapping)?

    /// The SNS topic provided to Application Insights that is associated to the created opsItem.
    hidden OpsItemSNSTopicArn: (String(matches(Regex(#"^arn:aws(-[\w]+)*:[\w\d-]+:([\w\d-]*)?:[\w\d_-]*([:/].+)*$"#)))|Mapping)?

    /// The name of the resource group.
    hidden ResourceGroupName: String(matches(Regex(#"[a-zA-Z0-9.-_]*"#)))|Mapping

    /// Application Insights sends notifications to this SNS topic whenever there is a problem update in the associated application.
    hidden SNSNotificationArn: (String(matches(Regex(#"^arn:aws(-[\w]+)*:[\w\d-]+:([\w\d-]*)?:[\w\d_-]*([:/].+)*$"#)))|Mapping)?

    /// The tags of Application Insights application.
    hidden Tags: (Listing<ApplicationTag>)?

    Properties {
        ["AttachMissingPermission"] = if (AttachMissingPermission == null) null else AttachMissingPermission
        ["AutoConfigurationEnabled"] = if (AutoConfigurationEnabled == null) null else AutoConfigurationEnabled
        ["CWEMonitorEnabled"] = if (CWEMonitorEnabled == null) null else CWEMonitorEnabled
        ["ComponentMonitoringSettings"] = if (ComponentMonitoringSettings == null) null else ComponentMonitoringSettings
        ["CustomComponents"] = if (CustomComponents == null) null else CustomComponents
        ["GroupingType"] = if (GroupingType == null) null else GroupingType
        ["LogPatternSets"] = if (LogPatternSets == null) null else LogPatternSets
        ["OpsCenterEnabled"] = if (OpsCenterEnabled == null) null else OpsCenterEnabled
        ["OpsItemSNSTopicArn"] = if (OpsItemSNSTopicArn == null) null else OpsItemSNSTopicArn
        ["ResourceGroupName"] = if (ResourceGroupName == null) null else ResourceGroupName
        ["SNSNotificationArn"] = if (SNSNotificationArn == null) null else SNSNotificationArn
        ["Tags"] = if (Tags == null) null else Tags
    }

}


typealias ApplicationGroupingType = "ACCOUNT_BASED"
