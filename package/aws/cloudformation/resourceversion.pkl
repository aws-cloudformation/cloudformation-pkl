/// AWS::CloudFormation::ResourceVersion
///
/// Generated by rain build --pkl-class AWS::CloudFormation::ResourceVersion
module aws.cloudformation.resourceversion

import "../../cloudformation.pkl"

/// 
open class ResourceVersionLoggingConfig {
    LogGroupName: (String(matches(Regex(#"^[\.\-_/#A-Za-z0-9]+$"#)))|Mapping)?
    LogRoleArn: (String|Mapping)?
}

/// A resource that has been registered in the CloudFormation Registry.
open class ResourceVersion extends cloudformation.Resource {

    Type = "AWS::CloudFormation::ResourceVersion"


    /// The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your resource type with the appropriate credentials.
    hidden ExecutionRoleArn: (String|Mapping)?

    /// Specifies logging configuration information for a type.
    hidden LoggingConfig: (ResourceVersionLoggingConfig)?

    /// A url to the S3 bucket containing the schema handler package that contains the schema, event handlers, and associated files for the type you want to register.
    ///
    /// 
    /// For information on generating a schema handler package for the type you want to register, see submit in the CloudFormation CLI User Guide.
    hidden SchemaHandlerPackage: String|Mapping

    /// The name of the type being registered.
    ///
    /// 
    /// We recommend that type names adhere to the following pattern: company_or_organization::service::type.
    hidden TypeName: String(matches(Regex(#"^[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}$"#)))|Mapping

    Properties {
        ["ExecutionRoleArn"] = if (ExecutionRoleArn == null) null else ExecutionRoleArn
        ["LoggingConfig"] = if (LoggingConfig == null) null else LoggingConfig
        ["SchemaHandlerPackage"] = if (SchemaHandlerPackage == null) null else SchemaHandlerPackage
        ["TypeName"] = if (TypeName == null) null else TypeName
    }

}
