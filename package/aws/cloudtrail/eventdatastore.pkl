/// AWS::CloudTrail::EventDataStore
///
/// Generated by rain build --pkl-class AWS::CloudTrail::EventDataStore
module aws.cloudtrail.eventdatastore

import "../../cloudformation.pkl"

/// Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ?elds. They help you control costs by logging only those events that are important to you.
open class EventDataStoreAdvancedEventSelector {
    FieldSelectors: Listing<EventDataStoreAdvancedFieldSelector>
    Name: (String|Mapping)?
}

/// A single selector statement in an advanced event selector.
open class EventDataStoreAdvancedFieldSelector {
    EndsWith: (Listing<String|Mapping>)?
    Equals: (Listing<String|Mapping>)?
    Field: String(matches(Regex(#"([\w|\d|\.|_]+)"#)))|Mapping
    NotEndsWith: (Listing<String|Mapping>)?
    NotEquals: (Listing<String|Mapping>)?
    NotStartsWith: (Listing<String|Mapping>)?
    StartsWith: (Listing<String|Mapping>)?
}

/// A string that contains Insights types that are logged on an event data store.
open class EventDataStoreInsightSelector {
    InsightType: (String|Mapping)?
}

/// An arbitrary set of tags (key-value pairs) for this event data store.
open class EventDataStoreTag {
    Key: String|Mapping
    Value: String|Mapping
}

typealias EventDataStoreTimestamp = String|Mapping


/// A storage lake of event data against which you can run complex SQL-based queries. An event data store can include events that you have logged on your account from the last 7 to 2557 or 3653 days (about seven or ten years) depending on the selected BillingMode.
open class EventDataStore extends cloudformation.Resource {

    Type = "AWS::CloudTrail::EventDataStore"


    /// The advanced event selectors that were used to select events for the data store.
    hidden AdvancedEventSelectors: (Listing<EventDataStoreAdvancedEventSelector>)?

    /// The mode that the event data store will use to charge for event storage.
    hidden BillingMode: (String|Mapping)?

    /// Indicates whether federation is enabled on an event data store.
    hidden FederationEnabled: (Boolean|Mapping)?

    /// The ARN of the role used for event data store federation.
    hidden FederationRoleArn: (String|Mapping)?

    /// Indicates whether the event data store is ingesting events.
    hidden IngestionEnabled: (Boolean|Mapping)?

    /// Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing event data store. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store.
    hidden InsightSelectors: (Listing<EventDataStoreInsightSelector>)?

    /// Specifies the ARN of the event data store that will collect Insights events. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store
    hidden InsightsDestination: (String|Mapping)?

    /// Specifies the KMS key ID to use to encrypt the events delivered by CloudTrail. The value can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
    hidden KmsKeyId: (String|Mapping)?

    /// Indicates whether the event data store includes events from all regions, or only from the region in which it was created.
    hidden MultiRegionEnabled: (Boolean|Mapping)?

    /// The name of the event data store.
    hidden Name: (String|Mapping)?

    /// Indicates that an event data store is collecting logged events for an organization.
    hidden OrganizationEnabled: (Boolean|Mapping)?

    /// The retention period, in days.
    hidden RetentionPeriod: (Int|Mapping)?

    /// 
    hidden Tags: (Listing<EventDataStoreTag>)?

    /// Indicates whether the event data store is protected from termination.
    hidden TerminationProtectionEnabled: (Boolean|Mapping)?

    Properties {
        ["AdvancedEventSelectors"] = if (AdvancedEventSelectors == null) null else AdvancedEventSelectors
        ["BillingMode"] = if (BillingMode == null) null else BillingMode
        ["FederationEnabled"] = if (FederationEnabled == null) null else FederationEnabled
        ["FederationRoleArn"] = if (FederationRoleArn == null) null else FederationRoleArn
        ["IngestionEnabled"] = if (IngestionEnabled == null) null else IngestionEnabled
        ["InsightSelectors"] = if (InsightSelectors == null) null else InsightSelectors
        ["InsightsDestination"] = if (InsightsDestination == null) null else InsightsDestination
        ["KmsKeyId"] = if (KmsKeyId == null) null else KmsKeyId
        ["MultiRegionEnabled"] = if (MultiRegionEnabled == null) null else MultiRegionEnabled
        ["Name"] = if (Name == null) null else Name
        ["OrganizationEnabled"] = if (OrganizationEnabled == null) null else OrganizationEnabled
        ["RetentionPeriod"] = if (RetentionPeriod == null) null else RetentionPeriod
        ["Tags"] = if (Tags == null) null else Tags
        ["TerminationProtectionEnabled"] = if (TerminationProtectionEnabled == null) null else TerminationProtectionEnabled
    }

}
