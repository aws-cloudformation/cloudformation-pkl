/// An experimental pattern to create an S3 bucket that passes typical compliance checks.
module patterns.bucket

import "../cloudformation.pkl" as cfn
import "../aws/s3/bucket.pkl" as bucket
import "../aws/iam/rolepolicy.pkl" as rolepolicy
import "../aws/iam/role.pkl" as role

open class CompliantBucket extends bucket.Bucket {
    Metadata {
        Comment = "Records access logs for the main bucket"
        checkov {
            skip = new Listing {
                new {
                    comment = "This is the log bucket"
                    id = "CKV_AWS_18"
                }
            }
        }
        guard {
            SuppressedRules = new Listing {
                "S3_BUCKET_LOGGING_ENABLED"
                "S3_BUCKET_REPLICATION_ENABLED"
            }
        }
    }
                
    BucketEncryption {
        ServerSideEncryptionConfiguration {
            new {
                ServerSideEncryptionByDefault {
                    SSEAlgorithm = "AES256"
                }
            }
        }
    }

    ObjectLockConfiguration {
        ObjectLockEnabled = "Enabled"
        Rule {
            DefaultRetention {
                Mode = "COMPLIANCE"
                Years = 1
            }
        }
    }

    ObjectLockEnabled = true

    PublicAccessBlockConfiguration {
        BlockPublicAcls = true
        BlockPublicPolicy = true
        IgnorePublicAcls = true
        RestrictPublicBuckets = true
    }

    VersioningConfiguration {
        Status = "Enabled"
    }
}

AppName: String
LogicalId: String

fixed Resources: Mapping<String, cfn.Resource> = new Mapping {

    [LogicalId] = new CompliantBucket {
        BucketName = cfn.Sub("\(AppName)-${AWS::Region}-${AWS::AccountId}")
        ObjectLockEnabled = false
        ObjectLockConfiguration = null
        LoggingConfiguration {
            DestinationBucketName = cfn.Ref("Log\(LogicalId)")
        }
        ReplicationConfiguration {
            Role = cfn.GetAtt(LogicalId + "ReplicationRole", "Arn")
            Rules {
                new {
                    Destination {
                        Bucket = cfn.GetAtt("Replica\(LogicalId)", "Arn")
                    }
                    Status = "Enabled"
                }
            }
        }
        VersioningConfiguration {
            Status = "Enabled"
        }
    }

    ["Log" + LogicalId] = new CompliantBucket {
        BucketName = cfn.Sub("\(AppName)-logs-${AWS::Region}-${AWS::AccountId}")

    }

    ["Replica" + LogicalId] = new CompliantBucket {
        BucketName = cfn.Sub("\(AppName)-replicas-${AWS::Region}-${AWS::AccountId}")
        ObjectLockEnabled = false
        ObjectLockConfiguration = null
    }

    [LogicalId + "ReplicationPolicy"] = new rolepolicy.RolePolicy {
        PolicyDocument {
            Statement = new Listing {
                new {
                    Action = new Listing {
                        "s3:GetReplicationConfiguration"
                        "s3:ListBucket"
                    }
                    Effect = "Allow"
                    Resource = cfn.Sub("arn:aws:s3:::\(AppName)-${AWS::Region}-${AWS::AccountId}")
                }
                new {
                    Action {
                        "s3:GetObjectVersionForReplication"
                        "s3:GetObjectVersionAcl"
                        "s3:GetObjectVersionTagging"
                    }
                    Effect = "Allow"
                    Resource = cfn.Sub("arn:aws:s3:::\(AppName)-${AWS::Region}-${AWS::AccountId}/*")
                }
                new {
                    Action {
                        "s3:ReplicateObject"
                        "s3:ReplicateDelete"
                        "s3:ReplicationTags"
                    }
                    Effect = "Allow"
                    Resource = cfn.Sub("arn:aws:s3:::\(AppName)-replicas-${AWS::Region}-${AWS::AccountId}/*")
                }
            }
            Version = "2012-10-17"
        }
        PolicyName = "bucket-replication-policy"
        RoleName = cfn.Ref(LogicalId + "ReplicationRole")
    }

    [LogicalId + "ReplicationRole"] = new role.Role {
        AssumeRolePolicyDocument {
            Statement = new Listing {
                new {
                    Action = new Listing {
                        "sts:AssumeRole"
                    }
                    Effect = "Allow"
                    Principal {
                        Service = new Listing {
                            "s3.amazonaws.com"
                        }
                    }
                }
            }
            Version = "2012-10-17"
          }
          Path = "/"
    }
}

