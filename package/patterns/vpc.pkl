/// An experimental pattern to create a basic VPC
module pattern.vpc

import "../cloudformation.pkl" as cfn
import "../aws/ec2/vpc.pkl"
import "../aws/ec2/subnet.pkl"
import "../aws/ec2/routetable.pkl"
import "../aws/ec2/route.pkl"
import "../aws/ec2/eip.pkl"
import "../aws/ec2/natgateway.pkl"
import "../aws/ec2/internetgateway.pkl"
import "../aws/ec2/subnetroutetableassociation.pkl"


/// The logical name of the VPC
LogicalId: String

/// The subnets within this VPC
Subnets: Listing<Subnet>

/// The CloudFormation resources representing this VPC.
fixed Resources: Mapping<String, cfn.Resource> = new {
    [LogicalId] = new vpc.VPC {
        CidrBlock = "10.0.0.0/16"
        EnableDnsHostnames = true
        EnableDnsSupport = true
        InstanceTenancy = "default"
    }
    ["\(LogicalId)Gateway"] = new internetgateway.InternetGateway {}
    for (subnet in Subnets) {
        ...(subnet) { VpcId = LogicalId }.Resources
    }
}

fixed Outputs: Mapping<String, cfn.Output> = new {
    ["\(LogicalId)Id"] = new cfn.Output {
        Description = "A reference to the VPC"
        Value = cfn.Ref(LogicalId)
    }
}

open class Subnet {
    VpcId: String
    LogicalId: String
    IsPublic: Boolean
    RouteTable: routetable.RouteTable
    DefaultRoute: route.Route
    Az: cfn.RefString
    Cidr: String
    PublicNATGateway: cfn.RefString?

    local vpcId = cfn.Ref(VpcId)

    local gwId = cfn.Ref("\(VpcId)Gateway")

    local privateResources: Mapping<String, cfn.Resource> = new {
        [LogicalId] = new subnet.Subnet {
            CidrBlock = Cidr
            AvailabilityZone = Az
            MapPublicIpOnLaunch = IsPublic
            VpcId = vpcId
        }

        [LogicalId + "RouteTable"] = new routetable.RouteTable {
            VpcId = vpcId
        }

        [LogicalId + "RouteTableAssociation"] = new subnetroutetableassociation.SubnetRouteTableAssociation {
            RouteTableId = cfn.Ref(LogicalId + "RouteTable")
            SubnetId = cfn.Ref(LogicalId)
        }

        [LogicalId + "DefaultRoute"] = new route.Route {
            DestinationCidrBlock = "0.0.0.0/0"
            NatGatewayId = if (IsPublic) null else PublicNATGateway
            GatewayId = if (IsPublic) gwId else null
            RouteTableId = cfn.Ref(LogicalId + "RouteTable")
        }
    }

    fixed Resources: Mapping<String, cfn.Resource> = (privateResources) {
        when (IsPublic) {
            [LogicalId + "NATGateway"] = new natgateway.NatGateway {
                AllocationId = cfn.GetAtt(LogicalId + "EIP", "AllocationId")
                SubnetId = cfn.Ref(LogicalId)
            }

            [LogicalId + "EIP"] = new eip.EIP {
                Domain = vpcId
            }
        }
    }

    fixed NatGateway: cfn.RefString? = if (IsPublic) cfn.Ref(LogicalId + "NATGateway") else null
}

